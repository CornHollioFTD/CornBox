{"FileModelVersion":{"Major":1,"Minor":0},"Name":"Test Boat","Version":11,"SavedTotalBlockCount":1882,"SavedMaterialCost":214966.5,"ContainedMaterialCost":14400.0,"ItemDictionary":{"1339":"ca924c87-8012-448a-a6c7-a7ff91b0e801","1318":"0d554a9d-7d06-48b3-8aea-ffaeaa30380a","1347":"52a61c5e-07be-4bb9-9649-d3375c66e97e","1323":"db9ed060-d556-435b-945c-19c923e233d3","1317":"a7f5d8de-4882-4111-9d01-436493e5b2d8","1351":"d48733e2-f003-4643-86a2-cb350fd0dc04","1344":"bcaf33a4-98c3-41d7-b416-438670e97d53","1328":"ac09f902-8921-4a58-aad5-c679706697f6","1316":"46f54639-5f91-4731-93eb-e5c0a7460538","1343":"b183f553-ce82-47c5-a4ed-6470b83b0d45","1320":"5548037e-8428-43f8-bcb6-d730dbcd0a79","1331":"5f07c608-acf2-4cc5-97d0-1a0a96acb9e3","1315":"2a22f176-01c2-42f2-a7d2-2c7054504aa9","1342":"225daaae-6f35-4489-aeb5-73e66e0664a4","1325":"442f3ea3-c7cd-4759-84ee-a0d2fac5a711","1322":"a09be1c6-93fd-4b54-b9ca-62e60efbc818","764":"ab699540-efc8-4592-bc97-204f6a874b3a","1319":"e5d065f6-907b-450d-b998-213cdc54eec1","1321":"8477bbec-974c-45bf-a1ce-49a48d5b5307","1345":"40659614-1b34-497a-b745-78497e4b2025","1349":"369eefd9-0c39-412e-a294-d0bb2251c509","1329":"2ddec223-13c2-4bf9-ba05-66338c51bd45","1326":"b9d21957-633f-4926-9562-4cfab38badee","1348":"ee18a848-1319-4ff9-b5e5-3f3710635dbf","1324":"de50f4f6-3d7e-4d6b-ae34-e6a34b24b104","1327":"91183077-8eac-4e29-a197-9190429ef0ba","1330":"098917ec-d86a-4cee-9c65-7997295bc248","1338":"d09c2121-c7e4-4d99-9556-02b92d17a652","1218":"f5d2db25-114e-473a-8313-96831ccd011e","325":"8331c71c-5725-472d-ad2e-65e4110982b7","214":"e8d04f75-a134-452e-a04a-af5172d65040","161":"8600329a-4b2b-44c7-8e66-634b0d81ce3d","163":"56c27d46-39b3-4ac1-b4f7-71c118d8dde9","169":"c8fe583a-357b-4fa6-86f1-fc2de639c909","31":"19a3d1a2-574e-4619-91b0-050d3b1201a9","13":"b6184e42-1647-4bd2-8465-f8b88f76621f","11":"ceae02f9-2a21-40a0-b0d5-fdb0e4975826","329":"2078227e-d38c-4f58-abd0-6f4878806a9f","768":"9a0ae372-beb4-4009-b14e-36ed0715af73","352":"2e715d3f-349f-41e1-bd89-7f685939d5aa","397":"26a604f0-071c-49ca-8a0e-e1d9c959b1c5","393":"edd65760-896f-4f6a-ba8c-eb2b072635f4","439":"2c557c38-4136-436a-bae2-c5cd1102690c","368":"936f57b0-0376-411e-a9c2-776681111efc","753":"fb1276c4-ba55-4e62-8315-40d4bf8adbf2","265":"b06788d5-4715-4168-8f7d-d6380f73fe54","260":"f71f9cfc-a107-4404-bb2c-7dc30e10e8da","341":"a3d914e9-697d-425f-abda-a6b21b4de952","392":"5ef97d26-1196-4b1a-ba1d-fd539c26b684","582":"c0e407e9-fc15-43fa-9a61-4c79a3acb6a9","358":"d3924bae-be5a-43a0-be19-64fc7c8d6059","360":"ceed114a-ddb5-47d4-9b7a-ef1ce9398e09","157":"e63040c9-0027-4fd3-be30-67fe3e950140"},"Blueprint":{"ContainedMaterialCost":14400.0,"CSI":[0.0,0.0,-1.0,0.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.200000018,1.0,1.0,0.0,1.0,52.16193,8.581124,-1.0,0.0,0.0,1.0,1.0,7200000.0,0.0,0.0,0.0,1969.8501,0.0,0.1,0.1,1.0,1.0,3.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,0.0,-1.0,0.0,0.0,12000.0,7199700.0,7200000.0,0.0,0.0,-1.0,4420.0,0.0,-1.0,918.0,0.0,500.0,-1.0,12.0,0.0,0.0,0.0,6.97626352,0.0,0.0,0.0,0.200000018,0.05188948,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0],"COL":["0.011764,0,0,0","1,0,0,0.5","0,1,0,0.5","0,0,1,0.5","0.1,0.1,0.1,0.5","0.3,0.3,0.3,0.5","0.5,0.5,0.5,0.5","1,1,1,0.1","1,1,1,0.5","1,1,1,0.99","1,0.921568,0.015686,0.99","0,1,1,0.99","1,0,1,0.99","0.616029,0.041568,0.598922,0.616381","0.204702,0.754058,0.712989,0.740486","0.554607,0.64452,0.926487,0.219472","0.737624,0.457268,0.625993,0.319465","0.483263,0.8098,0.5415,0.423461","0.049516,0.2,0.475453,0.410689","0.200739,0.229956,0.828186,0.247301","0.167417,0.88698,0.657702,0.062131","0.534748,0.218002,0.187084,0.406349","0.530859,0.881647,0.906455,0.04621","0.209334,0.32636,0.295473,0.48137","0.686063,0.987506,0.803765,0.354047","0.050415,0.668246,0.241258,0.053549","0.755998,0.95323,0.172363,0.411452","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0"],"SCs":[],"BLP":["-7,3,16","-7,3,20","-7,3,24","-7,3,28","-7,3,32","-7,3,36","-7,3,40","-7,3,44","-7,3,48","-7,3,52","-7,3,53","-7,4,16","-7,4,17","-7,4,21","-7,4,25","-7,4,29","-7,4,33","-7,4,37","-7,4,41","-7,4,45","-7,4,49","-7,4,53","-7,5,16","-7,5,17","-7,5,21","-7,5,25","-7,5,29","-7,5,33","-7,5,37","-7,5,41","-7,5,45","-7,5,49","-7,5,53","-7,6,16","-7,6,17","-7,6,21","-7,6,25","-7,6,29","-7,6,33","-7,6,37","-7,6,41","-7,6,45","-7,6,49","-7,6,53","-6,2,12","-6,2,16","-6,2,20","-6,2,24","-6,2,28","-6,2,32","-6,2,36","-6,2,40","-6,2,44","-6,2,48","-6,2,52","-6,2,53","-6,3,8","-6,3,12","-6,3,13","-6,3,53","-6,3,57","-6,3,61","-6,3,65","-6,4,8","-6,4,9","-6,4,13","-6,4,53","-6,4,57","-6,4,61","-6,4,65","-6,5,4","-6,5,8","-6,5,9","-6,5,13","-6,5,53","-6,5,57","-6,5,61","-6,5,65","-6,6,4","-6,6,8","-6,6,9","-6,6,13","-6,6,53","-6,6,57","-6,6,61","-6,6,65","-6,7,4","-6,7,8","-6,7,9","-6,7,13","-6,7,17","-6,7,21","-6,7,25","-6,7,29","-6,7,33","-6,7,37","-6,7,41","-6,7,45","-6,7,49","-6,7,53","-6,7,57","-6,7,61","-6,7,65","-6,7,69","-6,8,4","-6,8,8","-6,8,9","-6,8,13","-6,8,17","-6,8,21","-6,8,25","-6,8,29","-6,8,33","-6,8,37","-6,8,41","-6,8,45","-6,8,49","-6,8,53","-6,8,57","-6,8,61","-6,8,65","-6,8,69","-5,1,12","-5,1,16","-5,1,20","-5,1,24","-5,1,28","-5,1,32","-5,1,36","-5,1,40","-5,1,44","-5,1,48","-5,1,52","-5,1,53","-5,2,8","-5,2,12","-5,2,16","-5,2,17","-5,2,20","-5,2,24","-5,2,28","-5,2,32","-5,2,36","-5,2,40","-5,2,44","-5,2,48","-5,2,52","-5,2,53","-5,2,57","-5,2,61","-5,2,65","-5,2,69","-5,3,8","-5,3,65","-5,3,69","-5,4,8","-5,4,65","-5,4,69","-5,5,4","-5,5,8","-5,5,69","-5,6,1","-5,6,69","-5,7,1","-5,7,69","-5,7,73","-5,8,1","-5,8,73","-4,1,8","-4,1,12","-4,1,15","-4,1,20","-4,1,24","-4,1,28","-4,1,32","-4,1,36","-4,1,40","-4,1,44","-4,1,48","-4,1,52","-4,1,53","-4,1,57","-4,1,61","-4,1,65","-4,1,69","-4,1,70","-4,2,8","-4,2,68","-4,2,71","-4,2,72","-4,3,8","-4,3,67","-4,3,71","-4,3,72","-4,4,8","-4,4,70","-4,4,74","-4,5,4","-4,5,8","-4,5,71","-4,5,75","-4,6,72","-4,6,76","-4,7,73","-4,7,77","-4,8,77","-4,8,81","-3,1,9","-3,1,12","-3,1,17","-3,1,21","-3,1,25","-3,1,29","-3,1,33","-3,1,37","-3,1,41","-3,1,45","-3,1,49","-3,1,53","-3,1,57","-3,1,61","-3,1,65","-3,1,69","-3,1,70","-3,1,74","-3,2,8","-3,2,74","-3,2,75","-3,3,75","-3,3,76","-3,4,7","-3,4,77","-3,4,78","-3,5,4","-3,5,8","-3,5,78","-3,5,79","-3,6,76","-3,6,80","-3,7,79","-3,7,80","-3,7,81","-3,8,81","-3,8,85","-2,0,78","-2,0,79","-2,0,80","-2,0,81","-2,0,82","-2,1,9","-2,1,12","-2,1,16","-2,1,19","-2,1,23","-2,1,27","-2,1,31","-2,1,35","-2,1,39","-2,1,43","-2,1,47","-2,1,51","-2,1,55","-2,1,59","-2,1,63","-2,1,67","-2,1,71","-2,1,72","-2,1,76","-2,1,77","-2,1,81","-2,1,82","-2,2,8","-2,2,79","-2,2,80","-2,2,82","-2,3,78","-2,3,79","-2,3,80","-2,4,80","-2,4,81","-2,5,2","-2,5,3","-2,5,8","-2,5,81","-2,5,82","-2,5,84","-2,6,84","-2,6,85","-2,7,85","-2,7,86","-2,8,85","-2,8,86","-2,8,87","-1,0,74","-1,0,78","-1,0,81","-1,0,82","-1,0,84","-1,1,8","-1,1,11","-1,1,15","-1,1,19","-1,1,23","-1,1,27","-1,1,31","-1,1,35","-1,1,39","-1,1,43","-1,1,47","-1,1,51","-1,1,55","-1,1,59","-1,1,63","-1,1,67","-1,1,71","-1,1,72","-1,1,76","-1,1,84","-1,2,8","-1,2,82","-1,2,84","-1,3,81","-1,3,82","-1,4,8","-1,4,82","-1,4,83","-1,4,84","-1,5,4","-1,5,8","-1,5,84","-1,5,85","-1,6,1","-1,6,85","-1,6,86","-1,7,1","-1,7,86","-1,7,87","-1,8,1","-1,8,87","-1,8,88","0,0,74","0,0,78","0,0,81","0,0,82","0,0,84","0,1,8","0,1,11","0,1,15","0,1,19","0,1,23","0,1,27","0,1,31","0,1,35","0,1,39","0,1,43","0,1,47","0,1,51","0,1,55","0,1,59","0,1,63","0,1,67","0,1,71","0,1,72","0,1,85","0,2,8","0,2,82","0,2,83","0,2,84","0,3,8","0,3,82","0,4,83","0,4,84","0,5,4","0,5,8","0,5,85","0,6,86","0,7,87","0,8,88","1,0,74","1,0,78","1,0,81","1,0,82","1,0,84","1,1,8","1,1,11","1,1,15","1,1,19","1,1,23","1,1,27","1,1,31","1,1,35","1,1,39","1,1,43","1,1,47","1,1,51","1,1,55","1,1,59","1,1,63","1,1,67","1,1,71","1,1,72","1,1,84","1,2,8","1,2,82","1,2,84","1,3,81","1,3,82","1,4,82","1,4,83","1,4,84","1,5,4","1,5,8","1,5,84","1,5,85","1,6,85","1,6,86","1,7,86","1,7,87","1,8,87","1,8,88","2,0,78","2,0,79","2,0,80","2,0,81","2,0,82","2,1,11","2,1,12","2,1,16","2,1,19","2,1,23","2,1,27","2,1,31","2,1,35","2,1,39","2,1,43","2,1,47","2,1,51","2,1,55","2,1,59","2,1,63","2,1,67","2,1,71","2,1,72","2,1,76","2,1,77","2,1,81","2,1,82","2,2,8","2,2,79","2,2,80","2,2,82","2,3,78","2,3,79","2,3,80","2,4,80","2,4,81","2,5,2","2,5,3","2,5,8","2,5,81","2,5,82","2,5,84","2,6,84","2,6,85","2,7,85","2,7,86","2,8,85","2,8,86","2,8,87","3,1,11","3,1,12","3,1,17","3,1,21","3,1,25","3,1,29","3,1,33","3,1,37","3,1,41","3,1,45","3,1,49","3,1,53","3,1,57","3,1,61","3,1,65","3,1,69","3,1,70","3,1,74","3,2,8","3,2,74","3,2,75","3,3,75","3,3,76","3,4,7","3,4,77","3,4,78","3,5,4","3,5,8","3,5,78","3,5,79","3,6,76","3,6,80","3,7,79","3,7,80","3,7,81","3,8,81","3,8,85","4,1,8","4,1,12","4,1,15","4,1,20","4,1,24","4,1,28","4,1,32","4,1,36","4,1,40","4,1,44","4,1,48","4,1,52","4,1,53","4,1,57","4,1,61","4,1,65","4,1,69","4,1,70","4,2,8","4,2,68","4,2,71","4,2,72","4,3,8","4,3,67","4,3,71","4,3,72","4,4,8","4,4,70","4,4,74","4,5,4","4,5,8","4,5,71","4,5,75","4,6,72","4,6,76","4,7,73","4,7,77","4,8,77","4,8,81","5,1,12","5,1,16","5,1,20","5,1,24","5,1,28","5,1,32","5,1,36","5,1,40","5,1,44","5,1,48","5,1,52","5,1,53","5,2,8","5,2,12","5,2,16","5,2,17","5,2,20","5,2,24","5,2,28","5,2,32","5,2,36","5,2,40","5,2,44","5,2,48","5,2,52","5,2,53","5,2,57","5,2,61","5,2,65","5,2,69","5,3,8","5,3,65","5,3,69","5,4,8","5,4,65","5,4,69","5,5,4","5,5,8","5,5,69","5,6,1","5,6,69","5,7,1","5,7,69","5,7,73","5,8,1","5,8,73","6,2,12","6,2,16","6,2,20","6,2,24","6,2,28","6,2,32","6,2,36","6,2,40","6,2,44","6,2,48","6,2,52","6,2,53","6,3,8","6,3,12","6,3,13","6,3,53","6,3,57","6,3,61","6,3,65","6,4,8","6,4,9","6,4,13","6,4,53","6,4,57","6,4,61","6,4,65","6,5,4","6,5,8","6,5,9","6,5,13","6,5,53","6,5,57","6,5,61","6,5,65","6,6,4","6,6,8","6,6,9","6,6,13","6,6,53","6,6,57","6,6,61","6,6,65","6,7,4","6,7,8","6,7,9","6,7,13","6,7,17","6,7,21","6,7,25","6,7,29","6,7,33","6,7,37","6,7,41","6,7,45","6,7,49","6,7,53","6,7,57","6,7,61","6,7,65","6,7,69","6,8,4","6,8,8","6,8,9","6,8,13","6,8,17","6,8,21","6,8,25","6,8,29","6,8,33","6,8,37","6,8,41","6,8,45","6,8,49","6,8,53","6,8,57","6,8,61","6,8,65","6,8,69","7,3,16","7,3,20","7,3,24","7,3,28","7,3,32","7,3,36","7,3,40","7,3,44","7,3,48","7,3,52","7,3,53","7,4,16","7,4,17","7,4,21","7,4,25","7,4,29","7,4,33","7,4,37","7,4,41","7,4,45","7,4,49","7,4,53","7,5,16","7,5,17","7,5,21","7,5,25","7,5,29","7,5,33","7,5,37","7,5,41","7,5,45","7,5,49","7,5,53","7,6,16","7,6,17","7,6,21","7,6,25","7,6,29","7,6,33","7,6,37","7,6,41","7,6,45","7,6,49","7,6,53","0,2,35","0,2,36","0,2,37","0,2,38","0,2,39","0,2,40","0,2,41","0,2,42","0,2,43","0,2,44","0,2,45","0,2,46","0,2,47","0,2,48","0,2,49","0,2,50","0,2,51","0,2,52","0,2,53","0,2,54","0,2,55","0,2,56","0,2,57","0,2,58","0,2,59","0,2,60","0,2,61","0,2,62","0,2,63","0,2,64","0,2,65","0,2,66","0,2,67","0,2,68","0,2,69","0,2,70","0,2,71","0,2,72","0,2,73","0,2,74","0,2,75","0,2,76","0,2,77","0,2,78","0,2,34","0,2,33","0,2,32","0,2,31","0,2,30","0,2,29","0,2,28","0,2,27","0,2,26","0,2,25","0,2,24","0,2,23","0,2,22","0,2,21","0,2,20","0,2,19","0,2,18","0,2,17","0,2,16","0,2,15","0,2,14","0,2,13","0,2,12","0,2,11","0,2,10","0,2,9","6,6,38","-6,6,38","5,5,42","-5,5,42","5,5,45","-5,5,45","5,5,48","-5,5,48","3,5,41","-3,5,41","3,5,42","-3,5,42","3,5,43","-3,5,43","2,5,41","-2,5,41","2,5,42","-2,5,42","2,5,43","-2,5,43","2,5,45","-2,5,45","2,5,48","-2,5,48","2,4,42","-2,4,42","2,4,45","-2,4,45","2,4,48","-2,4,48","2,3,42","-2,3,42","2,3,45","-2,3,45","2,3,48","-2,3,48","1,5,41","-1,5,41","1,5,42","-1,5,42","1,5,43","-1,5,43","5,2,7","-5,2,7","5,2,6","-5,2,6","5,2,5","-5,2,5","-1,0,42","-5,8,64","5,8,64","-5,8,63","-5,8,62","-4,8,63","-5,8,61","-4,8,62","-4,8,64","-3,8,63","-5,8,60","-4,8,61","-3,8,62","-4,8,65","-3,8,64","-2,8,63","-5,8,59","-4,8,60","-3,8,61","-2,8,62","-4,8,66","-3,8,65","-5,8,65","-2,8,64","-1,8,63","-5,8,58","-4,8,59","-3,8,60","-2,8,61","-1,8,62","-4,8,67","-3,8,66","-5,8,66","-2,8,65","-1,8,64","0,8,63","-5,8,57","-4,8,58","-3,8,59","-2,8,60","-1,8,61","0,8,62","-4,8,68","-3,8,67","-5,8,67","-2,8,66","-1,8,65","0,8,64","1,8,63","-5,8,56","-4,8,57","-3,8,58","-2,8,59","-1,8,60","0,8,61","1,8,62","-4,8,69","-3,8,68","-5,8,68","-2,8,67","-1,8,66","0,8,65","1,8,64","2,8,63","-5,8,55","-4,8,56","-3,8,57","-2,8,58","-1,8,59","0,8,60","1,8,61","2,8,62","-4,8,70","-3,8,69","-5,8,69","-2,8,68","-1,8,67","0,8,66","1,8,65","2,8,64","3,8,63","-5,8,54","-4,8,55","-3,8,56","-2,8,57","-1,8,58","0,8,59","1,8,60","2,8,61","3,8,62","-4,8,71","-3,8,70","-5,8,70","-2,8,69","-1,8,68","0,8,67","1,8,66","2,8,65","3,8,64","4,8,63","-5,8,53","-4,8,54","-3,8,55","-2,8,56","-1,8,57","0,8,58","1,8,59","2,8,60","3,8,61","4,8,62","-4,8,72","-3,8,71","-5,8,71","-2,8,70","-1,8,69","0,8,68","1,8,67","2,8,66","3,8,65","4,8,64","5,8,63","-5,8,52","-4,8,53","-3,8,54","-2,8,55","-1,8,56","0,8,57","1,8,58","2,8,59","3,8,60","4,8,61","5,8,62","-4,8,73","-3,8,72","-5,8,72","-2,8,71","-1,8,70","0,8,69","1,8,68","2,8,67","3,8,66","4,8,65","-5,8,51","-4,8,52","-3,8,53","-2,8,54","-1,8,55","0,8,56","1,8,57","2,8,58","3,8,59","4,8,60","5,8,61","-4,8,74","-3,8,73","-2,8,72","-1,8,71","0,8,70","1,8,69","2,8,68","3,8,67","4,8,66","5,8,65","-5,8,50","-4,8,51","-3,8,52","-2,8,53","-1,8,54","0,8,55","1,8,56","2,8,57","3,8,58","4,8,59","5,8,60","-4,8,75","-3,8,74","-2,8,73","-1,8,72","0,8,71","1,8,70","2,8,69","3,8,68","4,8,67","5,8,66","-5,8,49","-4,8,50","-3,8,51","-2,8,52","-1,8,53","0,8,54","1,8,55","2,8,56","3,8,57","4,8,58","5,8,59","-4,8,76","-3,8,75","-2,8,74","-1,8,73","0,8,72","1,8,71","2,8,70","3,8,69","4,8,68","5,8,67","-5,8,48","-4,8,49","-3,8,50","-2,8,51","-1,8,52","0,8,53","1,8,54","2,8,55","3,8,56","4,8,57","5,8,58","-3,8,76","-2,8,75","-1,8,74","0,8,73","1,8,72","2,8,71","3,8,70","4,8,69","5,8,68","-5,8,47","-4,8,48","-3,8,49","-2,8,50","-1,8,51","0,8,52","1,8,53","2,8,54","3,8,55","4,8,56","5,8,57","-3,8,77","-2,8,76","-1,8,75","0,8,74","1,8,73","2,8,72","3,8,71","4,8,70","5,8,69","-5,8,46","-4,8,47","-3,8,48","-2,8,49","-1,8,50","0,8,51","1,8,52","2,8,53","3,8,54","4,8,55","5,8,56","-3,8,78","-2,8,77","-1,8,76","0,8,75","1,8,74","2,8,73","3,8,72","4,8,71","5,8,70","-5,8,45","-4,8,46","-3,8,47","-2,8,48","-1,8,49","0,8,50","1,8,51","2,8,52","3,8,53","4,8,54","5,8,55","-3,8,79","-2,8,78","-1,8,77","0,8,76","1,8,75","2,8,74","3,8,73","4,8,72","5,8,71","-5,8,44","-4,8,45","-3,8,46","-2,8,47","-1,8,48","0,8,49","1,8,50","2,8,51","3,8,52","4,8,53","5,8,54","-3,8,80","-2,8,79","-1,8,78","0,8,77","1,8,76","2,8,75","3,8,74","4,8,73","5,8,72","-5,8,43","-4,8,44","-3,8,45","-2,8,46","-1,8,47","0,8,48","1,8,49","2,8,50","3,8,51","4,8,52","5,8,53","-2,8,80","-1,8,79","0,8,78","1,8,77","2,8,76","3,8,75","4,8,74","-5,8,42","-4,8,43","-3,8,44","-2,8,45","-1,8,46","0,8,47","1,8,48","2,8,49","3,8,50","4,8,51","5,8,52","-2,8,81","-1,8,80","0,8,79","1,8,78","2,8,77","3,8,76","4,8,75","-5,8,41","-4,8,42","-3,8,43","-2,8,44","-1,8,45","0,8,46","1,8,47","2,8,48","3,8,49","4,8,50","5,8,51","-2,8,82","-1,8,81","0,8,80","1,8,79","2,8,78","3,8,77","4,8,76","-5,8,40","-4,8,41","-3,8,42","-2,8,43","-1,8,44","0,8,45","1,8,46","2,8,47","3,8,48","4,8,49","5,8,50","-2,8,83","-1,8,82","0,8,81","1,8,80","2,8,79","3,8,78","-5,8,39","-4,8,40","-3,8,41","-2,8,42","-1,8,43","0,8,44","1,8,45","2,8,46","3,8,47","4,8,48","5,8,49","-2,8,84","-1,8,83","0,8,82","1,8,81","2,8,80","3,8,79","-5,8,38","-4,8,39","-3,8,40","-2,8,41","-1,8,42","0,8,43","1,8,44","2,8,45","3,8,46","4,8,47","5,8,48","-1,8,84","0,8,83","1,8,82","2,8,81","3,8,80","-5,8,37","-4,8,38","-3,8,39","-2,8,40","-1,8,41","0,8,42","1,8,43","2,8,44","3,8,45","4,8,46","5,8,47","-1,8,85","0,8,84","1,8,83","2,8,82","-5,8,36","-4,8,37","-3,8,38","-2,8,39","-1,8,40","0,8,41","1,8,42","2,8,43","3,8,44","4,8,45","5,8,46","-1,8,86","0,8,85","1,8,84","2,8,83","-5,8,35","-4,8,36","-3,8,37","-2,8,38","-1,8,39","0,8,40","1,8,41","2,8,42","3,8,43","4,8,44","5,8,45","0,8,86","1,8,85","2,8,84","-5,8,34","-4,8,35","-3,8,36","-2,8,37","-1,8,38","0,8,39","1,8,40","2,8,41","3,8,42","4,8,43","5,8,44","0,8,87","1,8,86","-5,8,33","-4,8,34","-3,8,35","-2,8,36","-1,8,37","0,8,38","1,8,39","2,8,40","3,8,41","4,8,42","5,8,43","-5,8,32","-4,8,33","-3,8,34","-2,8,35","-1,8,36","0,8,37","1,8,38","2,8,39","3,8,40","4,8,41","5,8,42","-5,8,31","-4,8,32","-3,8,33","-2,8,34","-1,8,35","0,8,36","1,8,37","2,8,38","3,8,39","4,8,40","5,8,41","-5,8,30","-4,8,31","-3,8,32","-2,8,33","-1,8,34","0,8,35","1,8,36","2,8,37","3,8,38","4,8,39","5,8,40","-5,8,29","-4,8,30","-3,8,31","-2,8,32","-1,8,33","0,8,34","1,8,35","2,8,36","3,8,37","4,8,38","5,8,39","-5,8,28","-4,8,29","-3,8,30","-2,8,31","-1,8,32","0,8,33","1,8,34","2,8,35","3,8,36","4,8,37","5,8,38","-5,8,27","-4,8,28","-3,8,29","-2,8,30","-1,8,31","0,8,32","1,8,33","2,8,34","3,8,35","4,8,36","5,8,37","-5,8,26","-4,8,27","-3,8,28","-2,8,29","-1,8,30","0,8,31","1,8,32","2,8,33","3,8,34","4,8,35","5,8,36","-5,8,25","-4,8,26","-3,8,27","-2,8,28","-1,8,29","0,8,30","1,8,31","2,8,32","3,8,33","4,8,34","5,8,35","-5,8,24","-4,8,25","-3,8,26","-2,8,27","-1,8,28","0,8,29","1,8,30","2,8,31","3,8,32","4,8,33","5,8,34","-5,8,23","-4,8,24","-3,8,25","-2,8,26","-1,8,27","0,8,28","1,8,29","2,8,30","3,8,31","4,8,32","5,8,33","-5,8,22","-4,8,23","-3,8,24","-2,8,25","-1,8,26","0,8,27","1,8,28","2,8,29","3,8,30","4,8,31","5,8,32","-5,8,21","-4,8,22","-3,8,23","-2,8,24","-1,8,25","0,8,26","1,8,27","2,8,28","3,8,29","4,8,30","5,8,31","-5,8,20","-4,8,21","-3,8,22","-2,8,23","-1,8,24","0,8,25","1,8,26","2,8,27","3,8,28","4,8,29","5,8,30","-5,8,19","-4,8,20","-3,8,21","-2,8,22","-1,8,23","0,8,24","1,8,25","2,8,26","3,8,27","4,8,28","5,8,29","-5,8,18","-4,8,19","-3,8,20","-2,8,21","-1,8,22","0,8,23","1,8,24","2,8,25","3,8,26","4,8,27","5,8,28","-5,8,17","-4,8,18","-3,8,19","-2,8,20","-1,8,21","0,8,22","1,8,23","2,8,24","3,8,25","4,8,26","5,8,27","-5,8,16","-4,8,17","-3,8,18","-2,8,19","-1,8,20","0,8,21","1,8,22","2,8,23","3,8,24","4,8,25","5,8,26","-5,8,15","-4,8,16","-3,8,17","-2,8,18","-1,8,19","0,8,20","1,8,21","2,8,22","3,8,23","4,8,24","5,8,25","-5,8,14","-4,8,15","-3,8,16","-2,8,17","-1,8,18","0,8,19","1,8,20","2,8,21","3,8,22","4,8,23","5,8,24","-5,8,13","-4,8,14","-3,8,15","-2,8,16","-1,8,17","0,8,18","1,8,19","2,8,20","3,8,21","4,8,22","5,8,23","-5,8,12","-4,8,13","-3,8,14","-2,8,15","-1,8,16","0,8,17","1,8,18","2,8,19","3,8,20","4,8,21","5,8,22","-5,8,11","-4,8,12","-3,8,13","-2,8,14","-1,8,15","0,8,16","1,8,17","2,8,18","3,8,19","4,8,20","5,8,21","-5,8,10","-4,8,11","-3,8,12","-2,8,13","-1,8,14","0,8,15","1,8,16","2,8,17","3,8,18","4,8,19","5,8,20","-5,8,9","-4,8,10","-3,8,11","-2,8,12","-1,8,13","0,8,14","1,8,15","2,8,16","3,8,17","4,8,18","5,8,19","-5,8,8","-4,8,9","-3,8,10","-2,8,11","-1,8,12","0,8,13","1,8,14","2,8,15","3,8,16","4,8,17","5,8,18","-5,8,7","-4,8,8","-3,8,9","-2,8,10","-1,8,11","0,8,12","1,8,13","2,8,14","3,8,15","4,8,16","5,8,17","-5,8,6","-4,8,7","-3,8,8","-2,8,9","-1,8,10","0,8,11","1,8,12","2,8,13","3,8,14","4,8,15","5,8,16","-5,8,5","-4,8,6","-3,8,7","-2,8,8","-1,8,9","0,8,10","1,8,11","2,8,12","3,8,13","4,8,14","5,8,15","-5,8,4","-4,8,5","-3,8,6","-2,8,7","-1,8,8","0,8,9","1,8,10","2,8,11","3,8,12","4,8,13","5,8,14","-5,8,3","-4,8,4","-3,8,5","-2,8,6","-1,8,7","0,8,8","1,8,9","2,8,10","3,8,11","4,8,12","5,8,13","-5,8,2","-4,8,3","-3,8,4","-2,8,5","-1,8,6","0,8,7","1,8,8","2,8,9","3,8,10","4,8,11","5,8,12","-4,8,2","-3,8,3","-2,8,4","-1,8,5","0,8,6","1,8,7","2,8,8","3,8,9","4,8,10","5,8,11","-3,8,2","-2,8,3","-1,8,4","0,8,5","1,8,6","2,8,7","3,8,8","4,8,9","5,8,10","-2,8,2","-1,8,3","0,8,4","1,8,5","2,8,6","3,8,7","4,8,8","5,8,9","-1,8,2","0,8,3","1,8,4","2,8,5","3,8,6","4,8,7","5,8,8","0,8,2","1,8,3","2,8,4","3,8,5","4,8,6","5,8,7","1,8,2","2,8,3","3,8,4","4,8,5","5,8,6","2,8,2","3,8,3","4,8,4","5,8,5","3,8,2","4,8,3","5,8,4","4,8,2","5,8,3","5,8,2","0,9,17","0,9,21","-1,9,21","-1,9,20","0,2,5","0,2,6","0,2,7","0,6,18","0,0,42","1,0,42","1,3,17","1,3,16","-1,3,16","-1,3,15","-1,3,14","-1,3,13","-1,3,12","-1,3,11","-1,3,10","-1,3,9","-1,3,17","-1,3,80","1,3,80","1,3,79","-1,3,79","0,9,89","0,9,1","-5,5,51","5,5,51","0,0,15","0,9,34","0,9,8","0,9,6","0,9,5","-1,9,5","1,9,5","5,3,36","-5,3,36","5,3,33","-5,3,33","5,3,30","-5,3,30","3,3,37","-3,3,37","3,3,36","-3,3,36","3,3,35","-3,3,35","2,3,37","-2,3,37","2,3,36","-2,3,36","2,3,35","-2,3,35","2,3,33","-2,3,33","2,3,30","-2,3,30","2,4,36","-2,4,36","2,4,33","-2,4,33","2,4,30","-2,4,30","2,5,36","-2,5,36","2,5,33","-2,5,33","2,5,30","-2,5,30","1,3,37","-1,3,37","1,3,36","-1,3,36","1,3,35","-1,3,35","2,3,20","-2,3,20","2,3,23","-2,3,23","2,3,26","-2,3,26","4,3,19","-4,3,19","4,3,20","-4,3,20","4,3,21","-4,3,21","5,3,19","-5,3,19","5,3,20","-5,3,20","5,3,21","-5,3,21","5,3,23","-5,3,23","5,3,26","-5,3,26","5,4,20","-5,4,20","5,4,23","-5,4,23","5,4,26","-5,4,26","5,5,20","-5,5,20","5,5,23","-5,5,23","5,5,26","-5,5,26","6,3,19","-6,3,19","6,3,20","-6,3,20","6,3,21","-6,3,21","4,3,54","-4,3,54","4,3,57","-4,3,57","4,3,60","-4,3,60","4,3,63","-4,3,63","2,3,66","-2,3,66","2,3,69","-2,3,69","2,3,72","-2,3,72","0,9,20","0,9,27","-1,9,27","-1,9,26","1,9,27","0,8,0","5,8,0","-5,8,0","7,8,5","-7,8,5","7,8,18","-7,8,18","7,8,31","-7,8,31","7,8,43","-7,8,43","7,8,57","-7,8,57","7,8,69","-7,8,69","5,8,80","-5,8,80","0,8,90","-2,8,88","2,8,88","-3,9,35","3,9,35","-4,9,35","-5,9,35","-6,9,35","-7,9,35","-7,9,36","-7,9,34","4,9,35","5,9,35","6,9,35","7,9,35","7,9,36","7,9,34","0,9,4","0,9,3","0,9,2","0,9,0","0,9,-1","1,9,-1","-1,9,-1","3,9,21","0,9,24"],"BLR":[19,14,14,14,14,14,14,14,14,14,12,19,12,12,12,12,12,12,12,12,12,18,19,18,18,18,18,18,18,18,18,18,18,2,0,0,0,0,0,0,0,0,0,18,19,14,14,14,14,14,14,14,14,14,14,18,15,19,0,12,18,18,18,23,18,0,18,0,0,18,19,19,18,0,18,0,0,18,19,2,0,0,18,0,0,18,19,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,19,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,19,14,14,14,14,14,14,14,14,14,14,18,15,19,19,0,19,19,19,19,19,19,19,19,19,18,18,18,18,18,15,0,18,0,0,18,14,19,18,20,18,20,18,18,20,18,15,14,19,17,17,17,17,17,17,17,17,17,18,12,12,18,15,12,15,2,2,18,1,0,2,18,1,0,18,14,19,0,18,0,18,0,18,18,12,12,12,0,17,17,17,17,17,17,17,17,17,17,17,17,17,12,18,0,0,18,0,18,23,17,18,14,19,14,18,0,18,14,0,18,12,12,14,7,15,7,18,12,12,21,19,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,12,0,18,0,14,0,0,0,0,18,0,18,14,18,19,17,12,18,18,12,18,12,0,18,12,14,14,14,18,18,15,19,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,1,18,0,0,0,0,18,1,0,18,12,14,19,12,12,20,18,12,20,18,12,20,12,12,14,14,14,12,12,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,4,14,19,4,12,12,12,14,14,14,16,16,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,16,0,0,0,0,16,0,16,12,14,17,12,12,16,12,16,12,12,12,14,5,13,5,16,14,12,20,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,12,0,16,0,14,0,0,0,0,16,0,16,14,16,17,19,12,16,16,12,16,12,0,16,12,14,12,0,17,17,17,17,17,17,17,17,17,17,17,17,17,12,16,0,0,16,0,16,22,19,16,14,17,14,16,0,16,14,0,16,12,12,13,14,14,17,17,17,17,17,17,17,17,17,16,12,12,12,13,12,13,2,2,16,3,0,2,16,3,0,16,14,17,0,16,0,16,0,16,16,12,17,14,14,14,14,14,14,14,14,14,14,16,13,17,17,0,17,17,17,17,17,17,17,17,17,16,12,12,12,16,13,0,16,0,0,16,14,17,16,21,16,21,16,16,21,16,17,14,14,14,14,14,14,14,14,14,14,16,13,17,0,12,12,12,16,22,16,0,16,0,0,16,17,17,16,0,16,0,0,16,17,2,0,0,16,0,0,16,17,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,17,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,14,14,14,14,14,14,14,14,14,12,17,12,12,12,12,12,12,12,12,12,16,17,16,16,16,16,16,16,16,16,16,16,2,0,0,0,0,0,0,0,0,0,16,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,9,13,15,13,15,13,15,3,1,3,1,3,1,3,1,3,1,3,1,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,3,1,3,1,3,1,2,2,2,2,0,0,0,17,19,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,11,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,0,2,2,2,2,2,1,3,1,3,1,3,15,13,15,13,15,13,15,13,15,13,15,13,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,15,13,15,13,15,13,3,1,3,1,3,1,13,15,13,15,13,15,13,15,13,15,13,15,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,13,15,13,15,13,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,1,0,0,14,14,14,13,15,13,15,13,15,13,15,13,15,13,15,13,15,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BP1":null,"BP2":nullnull,"BlockData":"","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAADBfVafAAAAAAcAAAAHAAAAAAAAAAAAAAQBAAAAOe0HAAAAAAAHAAAAAAABAAAAAAAAPjUUAAAAAAAHAAAAHAABAAAAAAAACgAEzczMPQsABM3MzD0MAATNzMw9DQAEzczMPVJDAAAAAAAABwAAAAAAAQAAAAAAAMRKAAAAAAAABwAAAA4AAAAAAAAAAAAABAAAhEIDAAQAAIRCK94KAAAAAAAHAAAACAABAAAAAAAAAAABAQEAAQEyjlAAAAAAAAcAAAAAAAAAAAAAAADQq2UAAAAAAA4AAAAAAAAAAAAAAAABAAAAAAAAwidhAAAAAAAHAAAARgAAAAAAAAAAAAAEAABIQgoABAAAyMEPAAQAAFxCFAAEAAD6QxkABACAO0UyAAQAQBxGNwAEAEAcRh4ABAAAgD8jAAQAAIA/KAAEAACgQQ==","designChanged":false,"blueprintVersion":11,"blueprintName":"Test Boat","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":157,"LocalPosition":"12122.48,-7.685939,12973.98","LocalRotation":"-0.01531733,0.3374743,-0.003116372,0.941205","ForceId":1830061105,"TotalBlockCount":1882,"MaxCords":"8,9,91","MinCords":"-8,-1,-1","BlockIds":[1339,1318,1318,1318,1318,1318,1318,1318,1318,1318,1347,1323,1317,1317,1317,1317,1317,1317,1317,1317,1317,1323,1323,1317,1317,1317,1317,1317,1317,1317,1317,1317,1323,1347,1318,1318,1318,1318,1318,1318,1318,1318,1318,1347,1347,1318,1318,1318,1318,1318,1318,1318,1318,1318,1318,1351,1344,1328,1316,1328,1318,1318,1343,1320,1317,1316,1317,1317,1317,1323,1347,1328,1317,1316,1317,1317,1317,1323,1323,1317,1317,1317,1317,1317,1317,1323,1323,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1331,1351,1323,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1323,1347,1318,1318,1318,1318,1318,1318,1318,1318,1318,1318,1351,1344,1328,1317,1315,1315,1317,1317,1317,1317,1317,1317,1317,1317,1331,1318,1318,1318,1342,1325,1317,1322,764,1317,1323,1323,1317,1323,1317,1323,1317,1331,1351,1317,1323,1344,1331,1316,1317,1317,1317,1317,1317,1317,1317,1317,1317,1331,1319,1319,1318,1320,1347,1325,1315,1316,1322,1317,764,1317,1323,1316,1317,1323,1323,1317,1317,1323,1317,1322,1317,1321,1331,1347,1316,1317,764,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1328,1342,764,764,1322,764,1322,1342,1315,1322,1323,1317,1316,1322,1317,1323,1316,764,1323,1328,1345,1343,1320,1320,1320,1349,1316,1317,1316,1316,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,764,1317,764,1321,764,1315,1329,1349,764,764,1321,764,1321,1321,1315,1317,1315,1326,1348,1324,1344,1324,1344,764,1324,1344,1351,1331,1316,1329,1349,1327,1316,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1316,1321,764,1329,1349,764,1320,1316,764,1324,1344,1323,1317,1325,1344,1316,1324,1344,1316,1324,1344,1316,1325,1345,1323,1317,1316,1315,1321,764,1316,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,764,764,764,764,1321,764,764,764,1320,1323,1317,1320,1320,1320,1321,1347,1328,1316,1326,1345,1330,1316,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1321,764,1326,1345,764,1320,764,1325,1348,1323,1317,1324,1348,1325,1348,1325,1348,1324,1349,1339,1320,1320,1320,1345,1316,1317,1316,1316,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,764,1317,764,1321,764,1315,1326,1345,764,764,1321,764,1321,1321,1315,1317,1315,1329,1344,1325,1348,1325,1348,764,1325,1348,1316,1317,764,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1331,1338,764,764,1322,764,1322,1338,1315,1322,1323,1317,1316,1322,1317,1323,1316,764,1323,1331,1349,1348,1328,1316,1317,1317,1317,1317,1317,1317,1317,1317,1317,1328,1318,1318,1318,1320,1351,1324,1315,1316,1322,1317,764,1317,1323,1316,1317,1323,1323,1317,1317,1323,1317,1322,1317,1321,1328,1351,1351,1319,1319,1319,1319,1319,1319,1319,1319,1319,1319,1347,1348,1331,1317,1315,1315,1317,1317,1317,1317,1317,1317,1317,1317,1328,1318,1318,1318,1338,1324,1317,1322,764,1317,1323,1323,1317,1323,1317,1323,1317,1328,1347,1317,1323,1351,1319,1319,1319,1319,1319,1319,1319,1319,1319,1319,1347,1348,1331,1316,1331,1318,1318,1339,1320,1317,1316,1317,1317,1317,1323,1351,1331,1317,1316,1317,1317,1317,1323,1323,1317,1317,1317,1317,1317,1317,1323,1323,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1328,1347,1323,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1317,1323,1343,1319,1319,1319,1319,1319,1319,1319,1319,1319,1351,1323,1317,1317,1317,1317,1317,1317,1317,1317,1317,1323,1323,1317,1317,1317,1317,1317,1317,1317,1317,1317,1323,1351,1319,1319,1319,1319,1319,1319,1319,1319,1319,1351,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,1218,325,325,214,214,214,214,214,214,161,161,161,161,161,161,161,161,161,161,161,161,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,169,169,161,161,161,161,31,31,13,13,11,11,329,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,768,352,397,393,439,11,13,31,368,329,329,329,753,753,753,753,753,753,753,753,753,329,329,329,753,753,265,265,214,214,329,260,341,341,341,341,341,214,214,214,214,214,214,161,161,161,161,161,161,161,161,161,161,161,161,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,169,169,161,161,161,161,214,214,214,214,214,214,161,161,161,161,161,161,161,161,161,161,161,161,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,169,169,161,161,161,161,214,214,214,214,214,214,214,214,214,214,214,214,214,214,392,397,393,439,341,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,358,360],"BlockState":"=0,1882","AliveCount":1882,"BlockStringData":["-- V3\r\n-- User-friendly settings:\r\n\r\n    \r\n--  Choose your AI type:\r\n--      'true' for standard AI, 'false' for breadboard\r\n            DoTakeControlFromAiAndSendYawCommand = false\r\n                PropulsionRequestWhileAvoiding = 1\r\n                PropulsionRequestToStopOrReverse = 0.1\r\n                PropulsionRequestForYawRight = -1                                     \r\n        \r\n--      'true' for full breadboard AI, 'false' for standard AI\r\n            DoSendComplexControlCommand = true\r\n                CCCForYawRight = 8  -- K\r\n                CCCForYawLeft = 4  -- H\r\n                CCCWhileAvoiding = 5 -- U\r\n                CCCToStopOrReverse = 6 -- J\r\n    \r\n--  The end of user-friendly settings! \r\n\r\n\r\n--  Behavior\r\n            AggressiveForward = true\r\n            PreferredRight = true\r\n            ShowMessageForRunningAndWarnings = true\r\n\r\n--  Dimensions and margins:\r\n            SafeDistance = 50\r\n            ExtraDistanceForBeingFriendly = 10\r\n            MaximumSizeOfEnemyShip = 300\r\n            MaximumTimeForCoursePrediction = 10\r\n\r\n--  Leave this as 'true', unless you are building illegal melee craft or hate your own fleet\r\n            DoCheckForCollisionWithEnemy = true\r\n            DoCheckForCollisionWithFriendlies = true\r\n\r\n\r\n\r\n-- Don't touch the rest!\r\n\r\nMaximumRateOfRotation = 25\r\nMinimumRateOfRotation = 1\r\n\r\nYawCommandMultiplier = 10\r\n\r\nDoInitializationOnStart = true\r\n\r\nConstructDimensions = Vector3(1, 1, 1)\r\nConstructSphericalHalfSize = 0\r\n\r\nEnemySphericalHalfSize = MaximumSizeOfEnemyShip/2 \r\nDimensionsOfFriendlies = {}\r\nConstantForConstructId = -99\r\nConstantForEnemyId = -77\r\n\r\nLastFrameConstructVelocity = Vector3(0, 0, 0)\r\nConstructCurrentSpeed = 10\r\nConstructCurrentCourse = 0\r\nConstructMaxTurnRate = MinimumRateOfRotation\r\nTimeNeededForConstructToReactSafely = 3\r\nLastFramePositionsAndVectors = {}\r\nRateOfRotationAndSpeed = {}\r\nDeclineOfRateOfRotation = 0.999        -- Redo\r\nDeclineOfSpeed = 0.9992\r\nEmaNumber = 0.1\r\nEmaNumberForCourse = 0.2           -- As function of speed or something !!!\r\nEmaNumberForTurnRate = 0.1\r\nConstantForBigNumber = 999999\r\n\r\nConstantForFramesPerSecond = 40\r\n\r\nNumberOfFramesToPredictWith = 10\r\n\r\nConstructForwardsVelocityMagnitude = 0\r\n\r\nfunction UpdateRotationAndSpeed(constructVelocity, newPositionsAndVectors)                             -- Need fix for angle at low speed\r\n    ConstructCurrentSpeed = math.max(1, ConstructCurrentSpeed * (1 - EmaNumber) + constructVelocity.magnitude * EmaNumber)            -- Reverse ??\r\n    ConstructCurrentCourse = ConstructCurrentCourse * (1 - EmaNumberForCourse)\r\n            + Vector3.SignedAngle(constructVelocity, LastFrameConstructVelocity, Vector3.up) * ConstantForFramesPerSecond * EmaNumberForCourse\r\n    ConstructMaxTurnRate = math.min( math.max(MinimumRateOfRotation, ConstructMaxTurnRate * DeclineOfRateOfRotation,        -- Unsavory fluctuation from roll or something !!!!\r\n            ConstructMaxTurnRate * (1 - EmaNumberForTurnRate) \r\n            + math.abs(Vector3.SignedAngle(constructVelocity, LastFrameConstructVelocity, Vector3.up) * ConstantForFramesPerSecond) * EmaNumberForTurnRate\r\n            ), MaximumRateOfRotation, math.abs(ConstructCurrentCourse) * 2)            --??\r\n\r\n    TimeNeededForConstructToReactSafely = math.min(math.max(90 / ConstructMaxTurnRate, 1), MaximumTimeForCoursePrediction)\r\n    \r\n    local newRateOfRotationAndSpeed = {}\r\n    for id, data in pairs(newPositionsAndVectors) do\r\n        if not LastFramePositionsAndVectors[id] then\r\n            RateOfRotationAndSpeed[id] = {Id = data.Id, CurrentCourse = 0, MaxSpeed = 1}\r\n            LastFramePositionsAndVectors[id] = {Id = data.Id, Position = data.Position, Velocity = data.Velocity}\r\n        end        \r\n        newRateOfRotationAndSpeed[id] = {\r\n            Id = data.Id,           \r\n            CurrentCourse = RateOfRotationAndSpeed[id].CurrentCourse * (1 - EmaNumberForCourse)\r\n                    + Vector3.SignedAngle(data.Velocity, LastFramePositionsAndVectors[id].Velocity, Vector3.up) * ConstantForFramesPerSecond * EmaNumberForCourse,\r\n            MaxSpeed = math.max(1, RateOfRotationAndSpeed[id].MaxSpeed * DeclineOfSpeed,\r\n                    RateOfRotationAndSpeed[id].MaxSpeed * (1 - EmaNumber) + data.Velocity.magnitude * EmaNumber)\r\n        }\r\n    end\r\n    RateOfRotationAndSpeed = newRateOfRotationAndSpeed\r\n    LastFrameConstructVelocity = constructVelocity\r\nend\r\n\r\n\r\nfunction GetSphericalHalfSize(id)\r\n    if id==ConstantForConstructId then\r\n        return ConstructSphericalHalfSize\r\n    end\r\n    if id==ConstantForEnemyId then\r\n        return EnemySphericalHalfSize\r\n    end\r\n\r\n    if DimensionsOfFriendlies[id]~=nil then\r\n        return DimensionsOfFriendlies[id].MaxSphericalHalfSize                   -- check id for the rest\r\n    end\r\n    \r\n    DBG(\"No size for Id \"..id)\r\n    return EnemySphericalHalfSize\r\n    \r\nend\r\n\r\n\r\nfunction GetDistanceToObstacleSphere (constructPosition, obstaclePosition, obstacleId)\r\n    return (constructPosition - obstaclePosition).magnitude - GetSphericalHalfSize(ConstantForConstructId) - GetSphericalHalfSize(obstacleId)      -- Skip check for construct if not used in full\r\nend\r\n\r\n\r\nfunction CalculateFlybyDistanceAndTime(constructPosition, constructVelocity, obstaclePosition, obstacleVelocity)   \r\n    local currentSphericalDistance = GetDistanceToObstacleSphere(constructPosition, obstaclePosition, ConstantForEnemyId)           -- Add id for frd     \r\n    local distanceVector = constructPosition - obstaclePosition    \r\n    local velocityProjection = Vector3.Dot(constructVelocity - obstacleVelocity, distanceVector) / distanceVector.magnitude\r\n    local timeToCloseTheDistance = (currentSphericalDistance / velocityProjection) * -1 \r\n    local predictedPositionForObstacle = obstaclePosition + obstacleVelocity * timeToCloseTheDistance            \r\n    local predictedPositionForConstruct = constructPosition + constructVelocity * timeToCloseTheDistance\r\n    local predictedDistance = GetDistanceToObstacleSphere(predictedPositionForConstruct, predictedPositionForObstacle, ConstantForEnemyId)\r\n    return predictedDistance, timeToCloseTheDistance, currentSphericalDistance \r\nend\r\n\r\n\r\nfunction FindMinimalFlybyDistanceAndTime(constructPosition, constructVelocity, positionsAndVectors)\r\n    local minDistancePredicted = ConstantForBigNumber\r\n    local minTimePredicted = ConstantForBigNumber\r\n    local minDistance = ConstantForBigNumber    \r\n    local closestObstacleId = 0 \r\n    for id, data in pairs(positionsAndVectors) do\r\n            local distancePrediction, timePrediction, currentSphericalDistance = CalculateFlybyDistanceAndTime(\r\n                                                            constructPosition, constructVelocity,\r\n                                                            data.Position, data.Velocity)\r\n        if timePrediction < minTimePredicted and timePrediction > 0 then\r\n            minDistancePredicted = distancePrediction\r\n            minTimePredicted = timePrediction\r\n        end\r\n        if currentSphericalDistance < minDistance then\r\n            minDistance = currentSphericalDistance\r\n            closestObstacleId = id\r\n        end\r\n     --   DBG(\"FB: id: \"..id..\" distancePrediction: \"..distancePrediction..\" timePrediction:\"..timePrediction..\" currentSphericalDistance: \"..currentSphericalDistance)\r\n    end\r\n    return minDistancePredicted, minTimePredicted, minDistance, closestObstacleId                     \r\nend\r\n\r\n\r\nfunction PredictFutureCircularPosition(travelTime, currentPosition, velocityVector, speed, rateOfTurn, currentCourse)           -- V3 math are FUUUCKING SLOOOOW!\r\n\r\n    local timeToChangeCourse = math.abs((currentCourse - rateOfTurn) / rateOfTurn)\r\n    local partialCourseChange = (rateOfTurn * (travelTime / timeToChangeCourse) + currentCourse) / 2\r\n\r\n    if travelTime<timeToChangeCourse then\r\n      --  return currentPosition + Quaternion.AngleAxis(medianCourse, Vector3.up) * velocityVector * (travelTime * 0.8)       -- Am i happy with this? \r\n        return currentPosition + Quaternion.AngleAxis(partialCourseChange, Vector3.up) * velocityVector.normalized * speed * (travelTime * 0.8)\r\n    end\r\n    \r\n    local medianCourse = (rateOfTurn + currentCourse) / 2\r\n    \r\n    travelTime = travelTime - timeToChangeCourse\r\n    local vectorFromStartToCenter = Quaternion(0, 0.70710676908493, 0, 0.70710676908493) * velocityVector.normalized * (speed * 180 / rateOfTurn /  math.pi)\r\n    local vectorFromCenterToPredictionPoint = Quaternion.AngleAxis(rateOfTurn * travelTime, Vector3.up) * (vectorFromStartToCenter * -1)\r\n    return currentPosition + Quaternion.AngleAxis(medianCourse, Vector3.up) * velocityVector * timeToChangeCourse\r\n            + vectorFromStartToCenter + vectorFromCenterToPredictionPoint\r\nend\r\n\r\n\r\nfunction CompareSafetyOfManeuversAndChooseDirectionOfTurn (timeNeededToReactSafely, numberOfFrames, constructPosition, constructVelocity, currentPositionsAndVectors)\r\n    local constructSpeed = ConstructCurrentSpeed\r\n    local constructCurrentCourse = ConstructCurrentCourse * -1\r\n    local constructHardRightCourse = ConstructMaxTurnRate\r\n    local constructHardLeftCourse = ConstructMaxTurnRate * -1\r\n\r\n    DBG(\"L: \"..constructHardLeftCourse..\" C: \"..constructCurrentCourse..\" R: \"..constructHardRightCourse)\r\n\r\n    local minCurrentDistanceCurrentCourse, minFinalCurrentDistanceCurrentCourse = ConstantForBigNumber, ConstantForBigNumber\r\n    local minCurrentDistanceHardRightCourse, minFinalCurrentDistanceHardRightCourse = ConstantForBigNumber, ConstantForBigNumber\r\n    local minCurrentDistanceHardLeftCourse, minFinalCurrentDistanceHardLeftCourse = ConstantForBigNumber, ConstantForBigNumber\r\n\r\n    local averageDistanceCC, averageDistanceHR, averageDistanceHL = 0, 0, 0\r\n    \r\n    for currentFrame = 1, numberOfFrames do\r\n        local timeFrame = timeNeededToReactSafely / numberOfFrames * currentFrame\r\n\r\n        local constructPositionCurrentCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructCurrentCourse, constructCurrentCourse)\r\n        local constructPositionHardRightCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructHardRightCourse, constructCurrentCourse)\r\n        local constructPositionHardLeftCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructHardLeftCourse, constructCurrentCourse)\r\n\r\n        for id, data in pairs(currentPositionsAndVectors) do\r\n            local currentCourse = Get_TurnRate(id)\r\n            local obstaclePosition = PredictFutureCircularPosition (timeFrame, data.Position, data.Velocity, Get_Speed(id), currentCourse, currentCourse)\r\n            local fakeId = data.Id\r\n\r\n            local currentDistanceCurrentCourse = GetDistanceToObstacleSphere(constructPositionCurrentCourse, obstaclePosition, fakeId)\r\n            local currentDistanceHardRightCourse = GetDistanceToObstacleSphere(constructPositionHardRightCourse, obstaclePosition, fakeId)\r\n            local currentDistanceHardLeftCourse = GetDistanceToObstacleSphere(constructPositionHardLeftCourse, obstaclePosition, fakeId)\r\n\r\n            averageDistanceCC = averageDistanceCC + currentDistanceCurrentCourse                        -- Ignore by distance\r\n            averageDistanceHR = averageDistanceHR + currentDistanceHardRightCourse\r\n            averageDistanceHL = averageDistanceHL + currentDistanceHardLeftCourse\r\n            \r\n            if currentFrame == numberOfFrames then\r\n                if currentDistanceCurrentCourse < minFinalCurrentDistanceCurrentCourse then\r\n                    minFinalCurrentDistanceCurrentCourse = currentDistanceCurrentCourse\r\n                end\r\n                if currentDistanceHardRightCourse < minFinalCurrentDistanceHardRightCourse then\r\n                    minFinalCurrentDistanceHardRightCourse = currentDistanceHardRightCourse\r\n                end\r\n                if currentDistanceHardLeftCourse < minFinalCurrentDistanceHardLeftCourse then\r\n                    minFinalCurrentDistanceHardLeftCourse = currentDistanceHardLeftCourse\r\n                end\r\n            else\r\n                if currentDistanceCurrentCourse < minCurrentDistanceCurrentCourse then\r\n                    minCurrentDistanceCurrentCourse = currentDistanceCurrentCourse\r\n                end\r\n                if currentDistanceHardRightCourse < minCurrentDistanceHardRightCourse then\r\n                    minCurrentDistanceHardRightCourse = currentDistanceHardRightCourse\r\n                end\r\n                if currentDistanceHardLeftCourse < minCurrentDistanceHardLeftCourse then\r\n                    minCurrentDistanceHardLeftCourse = currentDistanceHardLeftCourse\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n    end\r\n\r\n    averageDistanceCC = averageDistanceCC / numberOfFrames\r\n    averageDistanceHR = averageDistanceHR / numberOfFrames\r\n    averageDistanceHL = averageDistanceHL / numberOfFrames\r\n\r\n    DBG(\"minCurrentDistanceHardLeftCourse: \"..minCurrentDistanceHardLeftCourse..\" minCurrentDistanceCurrentCourse: \"..minCurrentDistanceCurrentCourse..\" minCurrentDistanceHardRightCourse: \"..minCurrentDistanceHardRightCourse)\r\n    DBG(\"minFinalCurrentDistanceHardLeftCourse: \"..minFinalCurrentDistanceHardLeftCourse..\" minFinalCurrentDistanceCurrentCourse: \"..minFinalCurrentDistanceCurrentCourse..\" minFinalCurrentDistanceHardRightCourse: \"..minFinalCurrentDistanceHardRightCourse)\r\n    DBG(\"averageDistanceHL: \"..averageDistanceHL..\" averageDistanceCC: \"..averageDistanceCC..\" averageDistanceHR: \"..averageDistanceHR)\r\n\r\n    \r\n    local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n    local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n    local YawDirectionSign = 1\r\n    if ConstructForwardsVelocityMagnitude < 0 then                                          -- Redo!\r\n        propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n        PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n        YawDirectionSign = -1\r\n    end\r\n    \r\n    if AggressiveForward and minFinalCurrentDistanceCurrentCourse > SafeDistance and (minCurrentDistanceCurrentCourse > SafeDistance or (minCurrentDistanceCurrentCourse > 0 and averageDistanceCC > averageDistanceHL and averageDistanceCC > averageDistanceHR))\r\n       --     and minCurrentDistanceCurrentCourse > minCurrentDistanceHardLeftCourse and minCurrentDistanceCurrentCourse > minCurrentDistanceHardRightCourse \r\n    then    \r\n        DBG(\"It's fine!\")\r\n        return 0, 0\r\n    end\r\n    \r\n    if PreferredRight and minFinalCurrentDistanceHardRightCourse > SafeDistance and minCurrentDistanceHardRightCourse > 0 \r\n        and averageDistanceHR > averageDistanceHL\r\n    then\r\n        DBG(\"Preferred Right.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse and\r\n            minFinalCurrentDistanceHardRightCourse > SafeDistance and\r\n            minCurrentDistanceHardRightCourse > 0 then\r\n        DBG(\"Go right. Safe.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardLeftCourse > minFinalCurrentDistanceHardRightCourse and\r\n            minFinalCurrentDistanceHardLeftCourse > SafeDistance and\r\n            minCurrentDistanceHardLeftCourse > 0 then\r\n        DBG(\"Go left. Safe.\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardRightCourse < 0 and minFinalCurrentDistanceHardLeftCourse < 0 then\r\n        if minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse then\r\n            DBG(\"Right. Unsafe!\")\r\n            return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward\r\n        else\r\n            DBG(\"Left. Unsafe!\")\r\n            return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward     \r\n        end\r\n    end\r\n \r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse\r\n            and minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse\r\n    then\r\n        DBG(\"Right. Unsafe 2!\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward\r\n    end\r\n    if minFinalCurrentDistanceHardLeftCourse > minFinalCurrentDistanceHardRightCourse\r\n            and minCurrentDistanceHardLeftCourse > minCurrentDistanceHardRightCourse\r\n    then    \r\n        DBG(\"Left. Unsafe 2!\")\r\n         return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward\r\n        \r\n    end\r\n\r\n    if  averageDistanceHR > averageDistanceHL\r\n            and minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse then\r\n        DBG(\"Right. Unsafe 3 !\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward    \r\n    end\r\n    if averageDistanceHL > averageDistanceHR\r\n            and minCurrentDistanceHardLeftCourse > minCurrentDistanceHardRightCourse then\r\n        DBG(\"Left. Unsafe 3 !\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward\r\n    end\r\n    \r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse then\r\n        DBG(\"Attaque! Right.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse\r\n    else\r\n        DBG(\"Attaque! Left.\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, PropulsionRequestReverse\r\n    end\r\n\r\n    return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse\r\nend\r\n\r\n\r\nfunction DetectAndAvoidCollision()\r\n    local constructPosition = I:GetConstructCenterOfMass()\r\n    local constructVelocity = I:GetVelocityVector()\r\n\r\n    constructVelocity.y=0                                                             -- Should it stay or should it go ??\r\n    \r\n    ConstructForwardsVelocityMagnitude = I:GetForwardsVelocityMagnitude()\r\n    local newPositionsAndVectors = {}                                 \r\n                                                                        \r\n    if DoCheckForCollisionWithFriendlies then\r\n        for i = 0, I:GetFriendlyCount() - 1, 1 do\r\n            local infoForObstacle = I:GetFriendlyInfo(i)\r\n            infoForObstacle.Velocity.y=0\r\n            newPositionsAndVectors[infoForObstacle.Id] = {\r\n                Id = infoForObstacle.Id,\r\n                Position = infoForObstacle.CenterOfMass,\r\n                Velocity = infoForObstacle.Velocity\r\n            }\r\n        end\r\n    end\r\n\r\n    if DoCheckForCollisionWithEnemy then\r\n        for i = 0, I:GetNumberOfTargets(0) - 1, 1 do\r\n            local infoForObstacle = I:GetTargetInfo(0, i)\r\n            infoForObstacle.Velocity.y=0\r\n            newPositionsAndVectors[infoForObstacle.Id] = {                                \r\n                Id = ConstantForEnemyId, --infoForObstacle.Id,                           -- Deplorable! \r\n                Position = infoForObstacle.Position,\r\n                Velocity = infoForObstacle.Velocity\r\n            }\r\n        end\r\n    end\r\n\r\n    DBG(\"Obstacles in play: \"..GetLengthOfTable(newPositionsAndVectors))\r\n\r\n    UpdateRotationAndSpeed(constructVelocity, newPositionsAndVectors)                                       -- Need some love\r\n    LastFramePositionsAndVectors = newPositionsAndVectors\r\n    \r\n    local minDistancePredicted, minTimePredicted, currentDistance, closestObstacleId\r\n        =  FindMinimalFlybyDistanceAndTime(constructPosition, constructVelocity, newPositionsAndVectors)\r\n\r\n    local timeNeededToReactSafely = TimeNeededForConstructToReactSafely * 3\r\n    local distanceNeededToReactSafely = ConstructCurrentSpeed * TimeNeededForConstructToReactSafely  \r\n    local numberOfFrames = NumberOfFramesToPredictWith\r\n    DBG(\"timeNeededToReactSafely: \"..timeNeededToReactSafely..\" distanceNeededToReactSafely: \"..distanceNeededToReactSafely..\" ConstructCurrentSpeed: \"..ConstructCurrentSpeed)\r\n    DBG(\"minDistancePredicted: \"..minDistancePredicted..\"  minTimePredicted: \"..minTimePredicted..\" currentDistance: \"..currentDistance)\r\n\r\n    if currentDistance < 0 then    \r\n        local obstacleRelativePosition = constructPosition - newPositionsAndVectors[closestObstacleId].Position\r\n                + newPositionsAndVectors[closestObstacleId].Velocity.normalized * (GetSphericalHalfSize(closestObstacleId) * 0.3)\r\n        local signForSide = constructVelocity.x * obstacleRelativePosition.z - constructVelocity.z * obstacleRelativePosition.x\r\n    \r\n        local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n        local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n        local YawDirectionSign = 1\r\n        if ConstructForwardsVelocityMagnitude < 0 then                                   --And again - Redo!\r\n            propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n            PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n            YawDirectionSign = -1\r\n        end        \r\n                \r\n        if signForSide > 0 then\r\n            DBG (\"All is lost! Left! \"..currentDistance)\r\n            return PropulsionRequestForYawRight * -1 * YawDirectionSign, PropulsionRequestReverse\r\n        else\r\n            DBG (\"All is lost! Right! \"..currentDistance)\r\n            return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse\r\n        end\r\n        \r\n    elseif false or (currentDistance < SafeDistance ) or (currentDistance < distanceNeededToReactSafely and minTimePredicted > 0 and minTimePredicted < timeNeededToReactSafely) or (minDistancePredicted < SafeDistance and minTimePredicted > 0 and minTimePredicted < timeNeededToReactSafely) then\r\n        \r\n        return CompareSafetyOfManeuversAndChooseDirectionOfTurn (timeNeededToReactSafely, numberOfFrames, constructPosition, constructVelocity, newPositionsAndVectors)\r\n        \r\n    end\r\n\r\n    DBG (\"All good. \"..currentDistance) \r\n\r\n    return 0, 0\r\nend\r\n\r\n\r\nfunction DoStuff (desiredYaw, desiredForward)\r\n\r\n    if DoTakeControlFromAiAndSendYawCommand then\r\n        if desiredYaw~=0 then\r\n            I:TellAiThatWeAreTakingControl()\r\n            I:RequestControl(0, 0, desiredYaw * YawCommandMultiplier)             -- Redo   \r\n            I:RequestControl(0, 8, desiredForward)\r\n        end     \r\n\r\n    end\r\n\r\n    if DoSendComplexControlCommand then\r\n        if desiredYaw==PropulsionRequestForYawRight * -1 then I:RequestComplexControllerStimulus(CCCForYawLeft) end\r\n        if desiredYaw==PropulsionRequestForYawRight then I:RequestComplexControllerStimulus(CCCForYawRight) end\r\n        \r\n        if desiredForward==PropulsionRequestWhileAvoiding then I:RequestComplexControllerStimulus(CCCWhileAvoiding) end\r\n        if desiredForward==PropulsionRequestToStopOrReverse then I:RequestComplexControllerStimulus(CCCToStopOrReverse) end\r\n    end\r\n\r\n    DBG(Mathf.Round(I:GetGameTime())..\": DesiredYaw = \"..desiredYaw..\" desiredForward: \"..desiredForward)\r\nend\r\n\r\n\r\nfunction DoInputSanityCheck()\r\n    local msg = \"\"\r\n    if SafeDistance<0 then\r\n        SafeDistance = 10\r\n        msg = msg .. \" SafeDistance! \"\r\n    end\r\n    if MaximumSizeOfEnemyShip<50 then\r\n        MaximumSizeOfEnemyShip = 50\r\n        msg = msg .. \" MaximumSizeOfEnemyShip! \"\r\n    end\r\n    if CCCForYawRight==CCCForYawLeft then\r\n        msg = msg .. \" CCCForYawRight==CCCForYawLeft - not fixed! \"\r\n    end\r\n    if MaximumTimeForCoursePrediction<0 then\r\n        MaximumTimeForCoursePrediction = 10\r\n        msg = msg .. \" MaximumTimeForCoursePrediction! \"\r\n    end\r\n    if ConstantForConstructId==ConstantForEnemyId then\r\n        msg = msg .. \" Nuts - not fixed! \"\r\n    end\r\n    return msg\r\nend\r\n\r\n\r\nfunction StartupInitialization()\r\n    I:ClearLogs()\r\n    if InTheFightWithCornHollio then\r\n        desiredSpeed = 0\r\n        EngageSelfDestruct(true)\r\n    end\r\n    \r\n    DoInitializationOnStart = false\r\n    \r\n    ConstructDimensions = ConstructDimensions + I:GetConstructMaxDimensions() - I:GetConstructMinDimensions()\r\n    ConstructSphericalHalfSize = math.max(ConstructDimensions.x, ConstructDimensions.y, ConstructDimensions.z) / 2\r\n    \r\n    for i = 0, I:GetFriendlyCount() - 1, 1 do\r\n        local FriendlyInfo = I:GetFriendlyInfo(i)\r\n        local friendlySize = FriendlyInfo.PositiveSize - FriendlyInfo.NegativeSize + Vector3(1, 1, 1)\r\n        DimensionsOfFriendlies[FriendlyInfo.Id] = {\r\n            Id = FriendlyInfo.Id,\r\n            BoundingBox = friendlySize,\r\n            MaxSphericalHalfSize = math.max(friendlySize.x, friendlySize.y, friendlySize.z) / 2 + ExtraDistanceForBeingFriendly\r\n        }\r\n    end\r\n\r\n    local msg = DoInputSanityCheck()\r\n\r\n    if ShowMessageForRunningAndWarnings then\r\n        I:LogToHud(\"CornBox is running on \".. I:GetBlueprintName()..\" (Id: \".. I:GetUniqueId()..\"). \"..msg)        \r\n    end\r\n    \r\nend\r\n\r\n\r\nfunction Update(ILocal)\r\n    I=ILocal\r\n    I:ClearLogs()\r\n\r\n    if DoInitializationOnStart then                         -- add support for new spawns and test for sanity\r\n        StartupInitialization()                                 -- And where are missing friendly size come from?\r\n    end\r\n    \r\n    local success, desiredYaw, desiredForward\r\n    \r\n    for _ = 1, 1 do\r\n   --     desiredYaw, desiredForward = DetectAndAvoidCollision()\r\n        success, desiredYaw, desiredForward = pcall(DetectAndAvoidCollision)                -- Is it fast?\r\n        \r\n    end\r\n\r\n    if not success then\r\n        DBG(\"!!Error!!\")\r\n        desiredYaw = 0\r\n        desiredForward = 0                                                                  -- Or stop?\r\n    end\r\n    \r\n    if desiredYaw~=0 or desiredForward~=0 then\r\n        DoStuff(desiredYaw, desiredForward)\r\n    else\r\n        DBG(Mathf.Round(I:GetGameTime())..\": No collision to avoid.\")\r\n    end\r\n    \r\nend\r\n\r\n\r\nfunction DBG(string)\r\n    I:Log(string)\r\nend\r\n\r\n\r\nfunction PV(v)\r\n    return \" x: \"..v.x..\"  y: \"..v.y..\"  z: \"..v.z..\"   mg: \"..v.magnitude\r\nend\r\n\r\n\r\nfunction GetLengthOfTable(table)\r\n    local count = 0\r\n    for _ in pairs(table) do\r\n        count = count + 1\r\n    end\r\n    return count\r\nend\r\n\r\n\r\nfunction Get_Speed (id)\r\n    return RateOfRotationAndSpeed[id].MaxSpeed\r\nend                                                                         -- Kill it?\r\nfunction Get_TurnRate (id)\r\n    return RateOfRotationAndSpeed[id].CurrentCourse\r\nend\r\n\r\n"],"BlockStringDataIds":[179],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":0,"PersistentBlockIndex":184,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"1cc99486-fff6-4c8c-ab26-cf71343faa66","ObjectId":"7ff5520f-752e-4f11-9582-b052f87faf5e","CreatorReadableName":"CornHollio","HashV1":"5ce9d17d004db24d2f6e024308db1ee5"},"BlockCount":1882}}