{"FileModelVersion":{"Major":1,"Minor":0},"Name":"Submarauder","Version":129,"SavedTotalBlockCount":2921,"SavedMaterialCost":77845.92,"ContainedMaterialCost":16.800005,"ItemDictionary":{"543":"1576f21e-9ca2-4f29-8b14-53ce98205a5b","1617":"d077c2a4-4578-4965-9318-c14bb7ac1bd6","1615":"05475442-0e52-4e0b-9fbb-2715f0e54f97","1355":"b9d21957-633f-4926-9562-4cfab38badee","1377":"ee18a848-1319-4ff9-b5e5-3f3710635dbf","1614":"39553630-8281-40e4-96fb-b01c1f3537e6","545":"8331c71c-5725-472d-ad2e-65e4110982b7","352":"52e52d0c-02d7-4965-a46e-93462e083659","1358":"2ddec223-13c2-4bf9-ba05-66338c51bd45","1616":"2ee817c1-f2a3-407a-847d-b97ffb844e45","1259":"f5d2db25-114e-473a-8313-96831ccd011e","778":"d5016f16-6431-4e8f-b0cc-5f0f400b151a","1630":"bdafa446-f615-49cb-94f3-d7652dde6cec","1373":"bcaf33a4-98c3-41d7-b416-438670e97d53","1346":"a7f5d8de-4882-4111-9d01-436493e5b2d8","1631":"b88679fb-0325-4c85-942f-ad9c6ed6545b","542":"9a0d25cc-f5c2-4780-b674-38fe17e73f8e","766":"ab699540-efc8-4592-bc97-204f6a874b3a","1613":"de36c624-8c78-4b52-8d86-431cec16a306","1345":"46f54639-5f91-4731-93eb-e5c0a7460538","535":"637d3a6a-2f79-477a-b97f-34dca41b5714","780":"515ee20d-20d8-4195-bea5-213e6f1fd929","1344":"2a22f176-01c2-42f2-a7d2-2c7054504aa9","779":"01a87958-93cf-4efa-857f-10913b0573d9","1625":"ee5463c9-b9f8-4438-bb79-7f2364f69b61","288":"ef545d00-c22d-4eed-bd76-74d6432e2974","1651":"f878fa09-cb47-4e1c-8f1e-df2544a6882a","346":"9413049d-a4f7-4c1c-8b8a-d2f1f4c18e53","792":"a160804b-15cc-46e2-8ffb-401c2aa01de6","797":"e0f9e669-4748-4cde-be95-58e47e094253","1637":"90ca403c-ddb5-4a55-ac6f-2ca2c970d6ad","1350":"8477bbec-974c-45bf-a1ce-49a48d5b5307","1640":"6cc4ec54-404c-4989-9f85-9b59824faf96","770":"d51549fd-2e38-4271-b85a-afded45400df","391":"9a3f63f4-48b6-4fe0-9f59-9fac3d073750","1660":"92159a6b-a1b6-4f8b-9c08-503f2cbbd572","783":"91d167b1-652f-4ac8-adc4-973b548ccd5d","1659":"6448ddc8-a3df-465f-b819-52f1cf347983","1656":"dee106ea-3e91-4b03-92ef-33038c5681a0","1626":"2db5d925-700e-4375-abcd-f79bb17a1855","1349":"5548037e-8428-43f8-bcb6-d730dbcd0a79","787":"33b65ccc-58a0-487d-8b68-a997a71b0bfe","1378":"369eefd9-0c39-412e-a294-d0bb2251c509","771":"9a0ae372-beb4-4009-b14e-36ed0715af73","1374":"40659614-1b34-497a-b745-78497e4b2025","1636":"17575457-18fa-43e0-a8cb-1331efc1c77e","1655":"1ae7e9fe-c0c4-4bb4-a0d6-28e21789a66c","347":"79015536-c137-4c87-a337-99dcf3deff81","777":"043e9b00-4a2f-41b8-bf2f-4aaa4442f138","307":"e6bb2b09-daee-432d-9aff-45fc63d24fca","259":"f29b1372-f4f3-4305-aa85-5fe214361fb7","270":"0d1d97b5-3c99-45bf-8a5d-e7a624b3ddb6","782":"4c24445d-a29b-446e-b03f-29e570e9d47d","798":"6209370e-abeb-4ec1-b523-dc21ea33fe0c","1633":"3296c67d-6ace-44dd-8e86-335b9a90ad80","529":"c0afc8a9-5c49-4f15-8834-6e39ff144da3","406":"64109192-fd8e-422b-a9e8-74295d3d74ea","402":"19945f75-8353-45e1-938f-a548fa05e05e","232":"58305289-16ea-43cf-9144-2f23b383da81","1647":"9c0d97cf-0c99-4565-a931-b1c5bdf8fc1b","1258":"19ee2ba3-9443-4a44-97fd-bad9b1443895","397":"4bd38234-b485-4a94-bc2d-d3fc80d89955","403":"2ae437c8-afe6-4d6d-9562-0423227878b2","396":"1b672c70-b108-4ec9-b6f6-9f817adf7250","390":"ec49b6a2-244f-4cfa-b49e-8dd19213b280","1353":"de50f4f6-3d7e-4d6b-ae34-e6a34b24b104","240":"c0e407e9-fc15-43fa-9a61-4c79a3acb6a9","1635":"c545a97c-6ac6-4181-a704-28031244aeb1","503":"936f57b0-0376-411e-a9c2-776681111efc","1354":"442f3ea3-c7cd-4759-84ee-a0d2fac5a711","1351":"a09be1c6-93fd-4b54-b9ca-62e60efbc818","388":"a5872d78-28e7-48a3-b452-ceb29de035cc","400":"54836777-b634-4a21-ab1e-2b0e426b640f","310":"31277649-04ec-45db-adfc-4a7d0a73686a","279":"930ab796-f1c7-47f0-bf04-0ef6ae44006b","485":"5b609887-c1dd-407b-b3b6-b1eb35d1e818","488":"7cd6a310-cf17-4f6d-a818-8f29d029778f","526":"6c37df0b-7eaf-48d4-85d8-2453014d8edf","547":"3a59c6f8-59dc-4a12-8fd3-c509a9d84906","487":"6a7c1ad1-21e5-4b2e-bf04-cc08d639313c","202":"6c2979f0-365a-4e9c-88ee-7b9d931409cb","199":"9ea523b6-af69-4809-b5e4-88351099b2dc","387":"a97e03b0-e8da-49e2-9913-ad8c1826d869","765":"3cc75979-18ac-46c4-9a5b-25b327d99410","629":"41f8d920-d038-4bd9-b84d-01603ac7a534","625":"09bec717-8b13-40ab-8468-0630cae1e964","632":"0448ca96-fa37-4389-9ee3-3e7280ffadd3","646":"bd32505c-29b2-4ff2-aa27-4ab3018b6706","643":"1af1b76e-23df-495e-8bc7-711ce2c221f8","647":"16e58d6d-30ce-40ac-a80e-ea153a3608a8","194":"438b4494-6746-4223-93a1-3a75b08bd5b6","665":"1bc2df6d-f59e-40f4-ade3-83a357676123","551":"576e79a6-07e1-4485-903d-e5929d512c08","260":"26a604f0-071c-49ca-8a0e-e1d9c959b1c5","255":"5ef97d26-1196-4b1a-ba1d-fd539c26b684","490":"d3924bae-be5a-43a0-be19-64fc7c8d6059","656":"19a3d1a2-574e-4619-91b0-050d3b1201a9","635":"b6184e42-1647-4bd2-8465-f8b88f76621f","633":"ceae02f9-2a21-40a0-b0d5-fdb0e4975826","34":"2718d6ad-07a2-4d98-bd7e-9cdb2b3f70db","544":"69061de4-f4df-41cd-8af1-ccb2081cbae6","472":"a3d914e9-697d-425f-abda-a6b21b4de952","484":"2e715d3f-349f-41e1-bd89-7f685939d5aa","548":"a8dcd83f-ec5f-40fc-901e-0bf45a8e551b","621":"e63040c9-0027-4fd3-be30-67fe3e950140","609":"cdca5dec-eeee-4849-9b2e-73b23e216465","546":"dd9dd993-3f46-47ca-bfc0-80f37e183e9b","1645":"57af2af7-29ce-4c97-b107-b59edffb6ce5","1363":"fa519e04-e82f-47db-91b8-f78ba4a5ba35","608":"788700be-1e74-46d7-9e34-1a5ec2747548"},"Blueprint":{"ContainedMaterialCost":16.800005,"CSI":[0.0,0.0,0.0,0.0,0.0,132000.0,0.0,1091.2537841796875,0.018877366557717323,0.0,0.0,0.0,0.0,56358.097336658509,40.9151496887207,1.0,1.0,0.0,1.0,43.32513427734375,8.7725752226722187E-14,-1.0,0.0,67000.0,1.0,1.0,0.0,0.0,0.0,5.0,1520.6700439453125,100.0,0.1,0.1,1.0,1.0,3.0,3000.0,24.10264778137207,23977.2285,0.0,29.38715934753418,1.0,0.0,100.0,0.0,0.0,22338.34375,0.0,0.0,100.0,123.59999084472656,1.0,6581.98046875,323.13348388671875,0.0,0.0,0.0,307.20465087890625,0.0,12.0,0.0,23281.568359375,0.0,21.2672119140625,0.0,15.3125,0.0,1.5000002384185791,0.099760137498378754,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0],"COL":["0,0,0,0","0.972549,0,1,0.99","0,1,0,0.63","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0.972549,1,0,0.99","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0.972549,1,1,0.55","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","1,0,0,0.99","0,1,0,0.99","0,0,0,0","0.1,0.1,0.1,0.9","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0"],"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,2,-5","0,3,-5","0,10,-4","0,6,-7","0,3,-6","0,5,-6","0,7,-6","0,9,-4","0,13,-7","0,4,-6","0,13,-6","0,0,-5","0,12,-4","0,11,-4","0,4,-5","0,11,-5","0,10,-5","0,9,-5","0,8,-5","0,6,-5","0,5,-5","0,1,-6","0,0,-6","0,4,-7","0,11,-7","-6,5,0","0,9,-7","-6,0,0","0,8,-7","-5,5,0","0,7,-7","0,1,-7","0,2,-7","5,10,0","-7,3,0","-7,5,0","4,14,0","0,12,-7","-7,6,0","0,10,-7","-4,11,0","0,12,-6","0,2,-6","0,3,-7","0,6,-6","0,3,-4","0,8,-6","0,14,-6","0,14,-4","6,2,0","6,3,0","7,12,0","4,0,0","4,3,0","0,0,-4","4,5,0","7,11,0","7,9,0","6,1,0","5,8,0","6,8,0","7,7,0","7,13,0","0,10,-6","0,9,-6","4,12,0","6,0,0","6,14,0","6,12,0","6,11,0","6,10,0","6,9,0","5,3,0","0,12,-5","0,5,-4","4,8,0","0,6,-4","4,10,0","0,8,-4","0,2,-4","4,11,0","5,2,0","6,13,0","0,14,-5","0,4,-4","7,8,0","5,0,0","4,6,0","4,2,0","4,9,0","4,4,0","0,11,-6","7,10,0","-5,6,0","5,4,0","5,5,0","5,6,0","-6,6,0","0,1,7","5,11,0","-5,0,0","0,3,6","5,14,0","5,12,0","0,0,5","0,0,4","0,0,6","0,1,6","0,3,5","0,2,6","0,4,5","0,13,7","5,9,0","0,11,4","0,10,7","0,8,4","0,9,6","0,2,5","0,3,7","0,2,4","0,5,7","0,11,6","0,2,7","0,8,6","0,4,7","0,6,6","0,7,1","0,10,4","0,3,4","0,5,4","0,6,7","0,5,-7","6,4,0","0,14,5","0,9,4","0,11,7","0,6,4","0,9,7","0,14,6","0,7,6","0,5,5","0,5,6","0,4,6","0,4,4","0,12,6","0,13,6","0,7,7","0,10,5","-7,8,0","-6,8,0","0,14,4","-6,14,0","-4,4,0","-7,2,0","-7,1,0","-4,2,0","-7,7,0","0,12,7","-4,3,0","-6,13,0","-4,6,0","0,12,5","-4,0,0","-6,4,0","-7,11,0","-6,1,0","-5,11,0","-6,12,0","-7,12,0","-7,4,0","7,2,0","-5,4,0","-6,3,0","0,9,5","-4,5,0","-5,3,0","0,6,5","-4,14,0","-5,2,0","-6,2,0","0,11,5","0,8,5","0,10,6","-6,11,0","6,6,0","7,3,0","-4,10,0","-5,14,0","7,4,0","-7,13,0","6,5,0","7,5,0","6,7,0","-4,12,0","-5,12,0","7,6,0","-7,9,0","-6,9,0","-5,9,0","7,1,0","-1,13,0","1,13,0","0,14,-1","-1,14,0","0,14,1","-1,14,1","-1,14,-1","1,14,-1","1,14,1","1,14,0","-1,12,1","-1,12,0","-1,12,-1","1,12,1","1,12,0","-5,7,1","1,7,-1","1,12,-1","0,12,-1","0,12,1","-1,7,-1","-1,13,1","0,1,5","1,13,-1","1,13,1","5,13,-1","-1,13,-1","5,7,1","5,7,-1","-1,7,1","1,7,1","0,1,-5","-1,13,-5","1,13,5","-1,7,5","1,7,-5","5,13,1","1,7,5","1,13,-5","-1,7,-5","-5,7,-1","-5,13,1","-5,13,-1","-1,13,5","-1,8,-1","-5,1,1","5,1,1","-5,1,-1","0,2,1","-1,1,5","1,1,5","1,1,-5","-1,1,-5","5,1,-1","0,0,1","1,0,0","0,0,-1","-1,0,0","-1,0,1","1,0,1","-1,0,-1","1,0,-1","1,6,1","-1,7,0","1,8,0","-1,8,0","1,2,0","1,6,-1","1,7,0","0,8,-1","0,2,-1","-1,2,0","-1,2,1","1,2,1","-1,2,-1","1,2,-1","1,8,-1","1,8,1","-1,8,1","0,8,1","-1,6,1","-1,6,0","4,7,2","-5,1,0","-3,13,4","-3,1,-3","2,7,4","4,7,-2","2,1,-4","-1,6,-1","0,6,-1","1,6,0","0,6,1","-4,7,3","4,1,2","2,7,-4","3,1,4","4,1,-3","-5,8,0","-2,7,4","-4,8,0","3,7,-3","-4,9,0","-3,1,-4","-5,10,0","3,1,-3","-4,13,-3","-4,13,3","-3,13,-3","-4,13,2","-4,7,2","4,7,-3","4,1,-2","3,13,-4","3,7,-4","4,13,-3","3,1,-4","-4,1,-3","3,1,3","3,13,3","-3,1,4","-6,7,0","3,7,3","3,13,-3","-6,10,0","-2,1,4","-3,1,3","3,13,4","-7,10,0","-4,1,2","-2,1,-4","-3,7,3","4,13,-2","-3,13,3","-4,1,3","-4,1,-2","4,1,3","3,7,4","2,1,4","-4,13,-2","4,7,3","4,13,3","-3,7,4","1,1,1","5,7,0","1,1,-1","0,7,-5","0,12,0","0,13,5","0,1,-1","-5,13,0","-1,1,1","-2,13,4","-1,1,-1","-3,13,-4","-2,7,-4","2,13,-4","-2,13,-4","-3,7,-3","-3,7,-4","-4,7,-3","5,13,0","-4,7,-2","0,12,4","0,1,-2","-2,1,0","0,1,2","0,2,0","4,13,2","0,7,5","2,13,4","0,13,-5","5,1,0","2,1,0","-2,13,0","0,13,2","0,5,0","0,9,0","0,1,1","-5,7,0","-2,7,0","0,7,-2","2,7,0","0,7,2","0,13,-2","2,13,0","-1,1,0","1,1,0","0,13,1","0,13,-1","0,6,0","0,7,-1","0,8,7"],"BLR":[0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,19,22,19,22,19,22,22,22,16,19,19,16,22,19,22,19,22,22,22,22,22,22,22,22,16,16,16,16,16,22,16,16,16,16,16,16,16,16,22,22,16,16,16,16,16,16,16,16,22,22,16,22,16,22,22,16,16,16,22,22,16,16,16,16,16,16,22,16,19,16,16,16,19,21,16,19,21,16,16,21,21,21,21,21,21,21,21,16,21,21,21,21,21,21,21,21,21,21,21,21,21,0,21,21,21,21,22,16,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,19,19,21,19,19,19,19,19,19,21,19,19,19,21,19,19,19,19,19,19,19,19,16,19,19,21,19,19,21,19,19,19,21,21,21,19,16,16,19,19,16,19,16,16,16,19,19,16,19,19,19,16,0,0,10,11,8,8,11,10,9,9,7,7,6,4,5,18,17,5,6,4,23,18,1,17,20,17,23,16,17,18,20,1,23,20,21,22,16,20,22,23,19,18,19,21,11,18,16,19,0,21,20,22,23,17,4,5,6,7,7,4,6,5,4,0,9,11,1,5,0,10,2,3,11,9,10,10,10,9,8,8,7,7,19,0,18,16,23,18,21,6,6,5,4,18,19,21,20,22,19,22,19,18,19,23,19,18,19,18,16,17,17,17,18,17,17,17,22,23,23,19,21,19,19,18,19,22,22,16,19,17,20,17,18,17,21,16,20,16,23,16,16,16,18,20,1,22,3,9,3,0,3,21,22,23,19,20,21,20,16,19,19,1,16,21,2,3,0,7,19,3,23,3,0,1,3,0,6,8,0,3,3,2,1,0,2,1,0,0,0,0,9,0,21],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAACoAAgAAAAAAAAMAAAAAAAABAAAAABUAJIgAAAAjAF0AAAAAIwBdGwEAACMAAAAEmpmZPgQABJqZmT4HAASamZk+AQAEAAAgQAUABAEAAAAAAASYBAAA","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Marauder","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":608,"LocalPosition":"-7,3,-53","LocalRotation":"-0.707106,-0.707106,0,0","ForceId":0,"TotalBlockCount":394,"MaxCords":"7,14,7","MinCords":"-7,0,-7","BlockIdslockState":"=0,394","AliveCount":394,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.4.8.0","PersistentSubObjectIndex":16,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":false,"ForeignBlocks":0,"CreatorId":"00000000-0000-0000-0000-000000000000","ObjectId":"00000000-0000-0000-0000-000000000000","CreatorReadableName":"","HashV1":"b84624206a654c82d83dd439ab9c5677"},"BlockCount":394}],"BLP":["0,0,-13","8,5,-21","4,0,-23","-2,10,-40","4,10,-40","1,7,-26","5,0,-39","0,-2,-2","-2,-2,-10","4,0,-27","7,1,-26","0,-3,-39","2,10,-40","1,6,3","-8,1,-26","-1,2,3","-7,3,-36","-4,0,-27","3,6,0","2,-2,-10","-8,3,-46","8,1,-6","0,-4,-35","0,-3,-11","8,1,-26","-2,4,3","1,6,-25","-5,5,6","-4,10,-40","-7,2,-31","0,-1,4","8,1,-11","8,1,-21","-2,9,-39","7,3,-36","-7,2,-36","8,1,-16","-8,5,-36","-1,2,7","3,1,-37","-8,3,-53","-8,3,-26","3,8,-40","1,7,-39","5,0,-27","-6,0,-11","-8,1,-11","8,3,-26","-1,7,-39","5,7,-13","-3,7,-45","3,1,-39","6,0,-11","-4,1,-3","-2,2,7","6,0,-19","1,6,-24","-5,7,-13","8,5,-11","4,-2,-2","8,3,-16","0,5,3","7,1,-22","-8,5,-31","-8,3,-31","-2,6,2","-8,1,-36","-2,8,-40","-3,8,-40","7,6,-37","7,3,-16","8,3,-21","-5,0,-11","0,3,-44","8,3,-46","5,7,-38","6,1,-11","0,6,-23","-1,6,-25","8,4,-28","-4,6,-1","5,0,-23","-5,-1,-39","5,7,-28","0,-2,-28","4,0,-39","1,-1,-23","1,0,-25","7,4,-12","5,-1,-27","0,-2,-1","0,-3,-15","-4,8,3","7,4,-32","-2,-2,-19","-1,-3,-39","-6,8,-41","-5,0,-39","2,-2,-19","1,1,-8","6,1,-26","-1,-2,-23","2,0,-25","1,-2,-23","-4,8,2","5,-1,-23","-7,6,-37","6,0,-39","-1,5,3","-4,-2,-2","0,-3,-23","-2,-2,-35","8,5,-31","7,6,-32","-3,1,-37","-6,0,-39","5,-1,-11","-4,0,-39","-7,3,-31","7,3,-31","1,8,-26","8,5,-16","0,-3,-35","0,-3,-7","8,5,-36","0,-1,0","-2,3,3","8,5,-26","0,-3,-3","6,1,-21","3,1,-38","0,-3,-28","-3,1,-38","5,0,-19","-4,1,3","-7,6,-32","-5,-1,-11","-1,7,-25","-1,0,-25","-2,-2,-23","0,-2,-27","5,-1,-39","7,6,-27","-7,6,-27","7,6,-22","-2,0,-25","-1,-2,-27","0,-4,-39","-6,0,-3","1,7,-21","9,3,-51","-1,8,-22","0,6,-6","-8,5,-51","-6,7,-27","-4,2,-6","8,6,-49","0,9,-22","-8,2,-51","0,2,-2","8,5,-51","-8,3,-52","0,-4,-27","0,2,3","0,-4,-31","4,2,-6","8,6,-51","-1,9,-20","-8,0,-45","0,-2,-39","-4,9,-44","-9,4,-53","8,2,-51","-8,6,-49","8,4,-54","-4,3,-5","1,8,-20","-8,3,-36","0,1,0","0,-4,-43","8,3,-53","-5,7,-29","-8,6,-51","0,1,2","2,7,-39","-5,7,-30","8,4,-40","-5,7,-38","5,7,-25","-5,7,-25","-1,9,-22","5,7,-8","0,6,-20","5,7,-9","5,7,-18","-8,4,-33","-8,3,-54","4,9,-44","8,4,-13","5,7,-26","-8,4,-40","-5,7,-28","-5,7,-8","-1,6,-23","4,3,-5","7,6,-43","8,4,-52","5,7,-21","-1,7,-20","8,4,-18","7,4,-6","-8,4,-10","0,4,8","7,2,-44","4,1,-3","-5,7,-26","5,7,-36","5,7,-24","5,7,-23","2,-2,-23","2,-2,-27","-6,7,-37","8,8,-47","0,9,-24","8,4,-30","10,4,-53","10,4,-54","-2,2,3","-3,8,-6","0,2,-1","0,7,-43","8,4,-25","-8,7,-47","-1,8,-23","5,7,-14","-4,2,-3","8,1,-50","-8,4,-52","-1,9,-25","-8,1,-6","2,6,2","3,7,-41","-3,1,-39","2,2,3","-2,1,-5","7,0,-3","5,0,-11","0,4,3","8,1,-36","8,7,-46","8,3,-31","8,3,-11","-8,3,-11","5,7,-31","-8,1,-31","-2,6,-41","2,6,-41","-3,7,-41","8,7,-47","-8,1,-50","10,3,-53","8,3,-54","-5,7,-9","8,2,-52","5,7,-15","-10,4,-53","-10,4,-54","8,5,-50","0,-4,-3","0,-3,-43","-10,3,-53","9,4,-53","1,9,-24","1,9,-25","-1,7,-24","1,9,-22","0,6,-21","5,7,-27","-9,3,-51","8,3,-52","1,9,-20","-8,5,-50","-8,4,-53","4,0,-11","3,9,-46","-8,8,-47","8,5,-53","-8,4,-54","8,4,-15","2,-2,-36","-2,-2,-36","-8,4,-28","0,-4,-7","0,7,-21","-8,2,-52","-8,7,-49","-1,-1,-27","1,-3,-31","-8,1,-49","3,0,1","-4,7,4","0,-3,1","-4,0,1","4,-1,-3","-1,-2,-32","-4,-1,-3","4,0,1","7,4,-37","3,0,-7","6,4,-27","-6,0,-7","6,4,-37","1,7,-24","3,3,-5","0,1,-8","1,-3,-3","-3,-2,-31","7,4,-17","4,7,-1","7,8,-45","7,9,-45","-7,9,-45","-8,8,-45","0,9,8","8,8,-45","3,-2,-11","-2,11,-44","2,7,4","6,4,-17","-7,4,-37","-5,0,-7","5,0,-7","1,-2,-11","0,8,-22","7,4,-7","3,-2,-31","-3,-2,-27","6,0,-7","-1,0,-7","3,-2,-7","-1,8,0","-5,1,2","-2,-3,-3","2,-3,-3","1,-3,-19","4,-2,-3","2,-2,-3","7,4,-42","-4,7,-1","-6,5,5","0,-4,1","-2,-2,-43","0,8,4","0,7,7","6,4,-32","-7,8,-45","6,5,-27","1,0,-7","1,-3,-27","-2,1,-8","3,5,3","7,4,-22","6,4,-7","0,8,0","8,2,-45","-6,1,-7","7,4,-27","-6,4,-37","-8,1,-45","2,2,-5","-6,4,-32","-2,2,-5","-1,5,-26","6,4,-12","0,6,-25","2,-2,-43","8,2,-49","-7,4,-32","8,0,-2","8,1,-49","8,1,-45","6,1,-7","-5,1,-7","7,4,-2","0,1,-4","9,3,-47","-1,0,5","2,1,-7","0,2,-3","6,5,-12","6,5,-17","-5,2,-7","-1,-2,-43","4,2,-3","6,5,-37","8,5,-22","-9,3,-47","-2,2,-40","-3,5,3","1,-2,-43","-6,5,-32","-7,4,-7","-7,4,-42","-3,0,1","6,5,-22","-5,0,-27","1,8,4","7,0,-7","-6,2,-40","0,7,-41","-5,4,2","-8,0,-2","6,4,-22","1,-3,-23","-1,8,4","4,1,-43","2,7,3","1,7,-22","-8,2,-45","2,2,-40","0,3,-8","0,4,-8","2,-1,-3","1,8,0","0,0,-14","-2,7,3","1,0,-15","3,7,-45","-8,1,-38","5,2,-7","-6,5,-27","-2,0,-7","-7,6,-12","6,0,-27","2,2,-7","-5,7,2","-3,6,0","-3,1,-3","5,2,-6","4,-2,-1","0,-1,-27","6,0,-23","1,-2,-19","-5,2,-6","-3,0,3","0,-2,-19","-1,-1,-19","-1,-2,-19","1,-1,-19","0,-1,-19","-7,4,6","-6,2,-5","-3,0,-7","-2,-1,-3","4,0,-7","-2,0,1","-3,3,3","-8,0,-6","3,-2,-27","2,0,-7","8,0,-6","-2,4,7","3,-1,-3","-4,6,-5","-5,1,-3","-6,2,-7","-1,-1,-23","6,7,-12","-7,7,-42","1,8,-22","7,7,-42","7,6,-17","-4,8,-3","6,0,-3","5,0,-3","-2,5,3","-5,0,-3","-2,7,-39","-1,6,3","3,1,-3","-4,-2,-1","6,2,-7","7,6,-7","-7,0,-3","1,-2,-1","0,-2,-23","-2,-2,-27","0,-2,-15","-6,0,-27","-1,1,-8","-5,-1,-27","-4,2,5","8,1,-31","7,2,-31","-1,9,-19","-1,8,-19","-8,7,-46","0,6,3","8,3,-36","2,8,-40","4,0,-19","2,5,3","4,8,-3","1,9,-2","4,1,1","-4,0,-11","-8,5,-11","6,2,-5","3,-2,-19","-3,-2,-15","7,4,2","8,5,-41","6,2,-40","-5,2,-40","7,6,-12","-3,-2,-23","-1,-2,-11","-6,2,-37","6,2,-37","-6,1,-37","-5,1,1","1,-3,-39","3,-2,-23","3,11,-44","-6,6,-12","5,1,-37","2,11,-44","-2,-2,-3","-2,7,-43","3,2,-7","8,5,-7","-3,11,-44","-7,4,-2","6,6,-12","8,2,-41","3,-2,-15","2,0,1","1,-1,-43","-8,0,-46","1,2,-8","5,2,-40","0,5,-27","-7,0,-7","4,6,-5","4,6,-1","-3,-2,-7","-6,1,-36","6,1,-37","-1,-2,-1","5,1,1","0,0,5","6,3,-3","7,7,-43","4,6,-6","1,-2,-32","-4,0,-7","6,1,1","-3,3,-5","-3,-2,-11","-3,-1,-3","-6,5,-37","6,5,-32","6,1,-16","5,3,-6","-5,3,-2","5,3,-2","-1,-3,-3","-4,6,-6","5,0,0","-6,1,-31","2,2,-8","-5,3,-6","6,1,-31","2,1,-8","-2,2,-8","6,1,-36","-6,3,-3","-8,2,-41","8,1,-38","-8,4,-38","-4,4,-2","4,4,-3","-4,4,-3","3,4,-3","-3,4,-3","2,4,-3","-2,4,-3","1,4,2","4,4,-2","4,4,2","-4,4,2","4,4,1","-4,4,1","4,4,0","-4,4,0","4,4,-1","-4,4,-1","-1,4,2","-1,4,-3","2,3,2","-2,3,2","2,3,1","-2,3,1","2,3,0","-2,3,0","2,3,-1","1,4,-3","1,4,1","-1,4,1","1,4,0","-1,4,0","1,4,-1","-1,4,-1","1,4,-2","-1,4,-2","0,4,-3","-3,4,-2","2,5,0","-2,5,0","2,5,-1","-2,5,-1","2,5,-2","-2,5,-2","2,6,1","-2,6,1","-2,5,1","-1,6,1","1,6,0","-1,6,0","1,6,-1","-1,6,-1","1,6,-2","-1,6,-2","2,5,1","2,6,0","-3,4,2","3,4,1","-3,4,1","3,4,0","-3,4,0","3,4,-1","-3,4,-1","3,4,-2","3,4,2","-2,6,0","2,6,-1","-2,6,-1","2,6,-2","-2,6,-2","2,6,-3","-2,6,-3","2,5,-3","-2,5,-3","-2,3,-1","-5,6,-18","-5,6,-20","0,6,7","-4,-1,-15","-2,8,7","-8,5,-17","-3,0,-23","-5,6,-19","-8,5,-12","7,4,6","-6,1,-16","-6,4,-27","-2,0,-19","-5,0,-15","-2,0,5","-6,6,-20","1,9,8","-6,6,-25","-7,4,-24","5,6,6","-5,6,-15","-5,6,-17","-6,6,-16","-7,4,-16","3,3,9","-6,6,-24","4,6,7","-7,4,-26","-7,4,-12","-5,6,-14","-6,6,-26","6,4,6","-8,0,-13","-6,6,-10","-7,4,-19","-8,0,-17","1,3,-2","-1,3,-2","1,3,-3","-1,3,-3","1,1,3","-1,1,3","1,1,4","-1,1,4","-1,3,-1","2,3,-2","-2,3,-2","1,3,2","-1,3,2","1,3,1","-1,3,1","1,3,0","-1,3,0","1,3,-1","0,1,4","-6,6,-18","-8,0,-21","-5,-1,-15","-6,6,-11","-7,1,-16","6,4,7","4,8,3","5,4,8","4,4,9","0,1,3","0,-3,-31","6,7,-7","-6,6,-19","-4,-1,-19","-6,7,-22","-6,7,-17","-6,7,-12","-8,1,-17","1,6,1","2,2,0","0,4,-1","2,2,-1","0,4,-2","2,2,-2","2,2,-3","3,5,2","3,3,-3","0,4,0","-2,2,1","-2,2,0","-2,2,-1","-2,2,-2","0,4,2","2,2,2","0,4,1","2,2,1","0,6,1","-1,1,-1","-1,1,-2","1,5,2","1,1,2","1,1,1","1,1,0","1,1,-1","1,1,-2","-1,1,0","0,6,0","0,6,-1","0,6,-3","-3,5,2","-3,3,-3","-2,2,-3","-1,5,2","-1,1,2","-1,1,1","-2,2,2","-2,4,-1","-3,5,-1","-2,4,-2","-3,5,-2","1,5,1","1,5,0","1,5,-1","2,4,2","-2,4,0","2,4,1","2,4,0","2,4,-1","3,5,-1","2,4,-2","3,5,-2","-1,5,-2","-2,4,1","3,3,2","-2,4,2","-3,3,2","-3,5,1","-3,3,1","-3,5,0","-3,3,0","-3,3,-1","-3,3,-2","0,6,-2","3,5,1","3,3,1","3,5,0","3,3,0","3,3,-1","3,3,-2","-1,5,1","-1,5,0","-1,5,-1","1,1,-3","-4,5,0","4,5,-1","-4,5,-1","4,5,-2","-4,5,-2","1,6,-3","-1,6,-3","1,2,-4","4,5,0","3,6,-2","-3,6,-2","3,5,-3","-3,5,-3","4,5,2","-4,5,2","4,5,1","-4,5,1","-1,2,-4","1,2,-1","-1,2,-1","1,2,-2","-1,2,-2","1,2,-3","-1,2,-3","0,5,-2","0,5,-3","-1,2,0","1,1,-4","-1,1,-4","2,3,-3","-2,3,-3","1,2,2","-1,2,2","1,2,1","-1,2,1","1,2,0","-3,6,-1","0,3,11","0,3,10","0,3,9","0,3,8","0,3,7","0,3,6","0,3,5","0,3,4","0,3,12","3,6,-3","1,5,-3","4,5,-3","-1,5,-3","-3,6,-3","-4,5,-3","-1,1,-3","0,3,14","0,3,13","0,3,3","-4,3,0","4,3,-1","-4,3,-1","4,3,-2","-4,3,-2","4,3,-3","-4,3,-3","3,6,-1","4,3,0","0,3,2","0,3,1","0,3,0","0,3,-1","0,5,-4","4,3,2","-4,3,2","4,3,1","-4,3,1","-7,4,-14","4,4,3","1,0,7","-1,5,12","-6,-1,-23","-1,7,7","2,4,9","-4,-2,-19","1,2,7","5,4,2","-7,2,-11","1,7,7","2,3,3","5,7,2","1,4,3","-1,6,12","-2,3,11","-6,-1,-19","-7,4,-17","2,6,10","-8,1,-22","8,7,-49","4,3,7","-6,3,5","8,4,-53","-4,-2,-15","-7,4,-21","-5,-1,-19","-6,-1,-15","5,3,6","2,7,8","4,7,4","-5,7,-14","5,7,3","-2,3,7","4,8,-2","0,8,8","5,7,-11","-5,7,-23","-8,4,-13","-8,4,-18","-3,4,11","-1,6,11","5,7,-10","5,6,2","-5,7,-20","1,1,9","-5,7,3","-2,4,9","-8,4,-23","3,4,11","-5,7,-21","2,3,7","5,3,2","-8,4,-20","-5,7,-19","-5,7,-18","1,7,11","2,6,6","-7,5,-16","-6,1,-21","-4,4,9","-5,7,-24","-5,7,-16","1,1,5","2,4,13","2,3,11","2,2,9","-5,7,-15","-2,5,7","0,7,9","-8,4,-25","-5,6,-16","1,10,-39","5,-1,-19","2,1,7","5,7,-34","8,4,-10","-8,4,-30","8,4,-8","1,6,-22","-1,8,-20","5,7,-35","9,3,-54","1,9,-21","-5,7,-31","0,7,-23","-9,3,-54","-1,6,-24","1,7,9","-5,7,-36","9,4,-54","4,5,7","-2,-3,-19","1,0,-18","5,7,-19","8,4,-38","5,7,-39","0,9,-25","-5,7,-33","-1,3,3","10,3,-54","-1,6,-22","-5,6,-23","0,7,8","0,6,-22","1,-2,-27","5,7,-16","8,4,-23","8,4,-35","-5,7,-34","1,10,-46","2,4,3","3,3,3","1,5,3","-7,0,-23","5,7,-20","0,7,-24","0,9,-21","1,3,3","-1,6,-20","0,7,-25","-9,4,-54","-1,8,-24","-1,7,-23","1,6,-21","1,2,3","1,6,-20","1,-1,-27","-8,4,-8","0,9,-23","-5,7,-35","-1,8,9","5,7,-33","-1,9,-24","0,8,-23","8,4,-33","0,7,-22","-2,1,-7","0,8,-21","8,0,-45","-1,4,3","-5,7,-39","5,7,-30","1,8,-24","-4,-2,-3","5,7,-29","-4,-2,-23","-6,7,-7","-4,-1,-23","5,4,4","-7,4,-22","1,5,-22","-1,5,-22","-3,-2,-19","0,8,-42","0,5,-18","5,7,-2","-4,7,-17","4,2,5","-6,0,-15","-4,0,-15","-8,5,-22","-6,6,-15","3,2,7","-10,3,-54","4,6,3","-7,4,-27","2,4,7","-5,-1,-23","5,1,2","-7,6,-22","-7,6,-17","-7,0,-11","-3,0,-19","-6,5,-22","-2,0,-23","-6,5,-17","0,4,7","0,9,-39","-3,3,9","0,6,11","-6,6,-13","6,3,5","-3,7,-19","-7,0,-15","-2,8,3","2,5,11","3,6,8","-5,6,-13","-6,6,-23","-1,6,-19","-5,6,-21","-6,6,-14","-3,-1,-19","6,5,5","1,6,12","-1,7,11","-6,4,-7","-7,5,-20","1,5,12","-7,5,-24","-8,5,-53","-7,0,-19","4,2,1","1,2,8","-6,4,-17","3,2,3","4,1,3","-6,4,-12","5,5,6","-6,4,-22","-2,1,7","-6,5,-12","3,5,9","3,1,5","2,0,5","-6,0,-23","-2,5,11","0,0,-15","-2,4,13","-8,4,-15","-7,1,-17","-7,1,-11","-8,3,-16","4,5,3","0,5,-22","-3,9,-46","-5,0,-19","-4,0,-19","6,2,3","4,3,3","-7,3,-16","-6,1,-12","5,2,4","5,5,2","4,4,5","-6,6,-21","3,5,5","1,8,9","-1,7,9","0,3,15","-1,0,-15","-5,7,-11","1,6,11","-1,0,-14","6,4,2","-7,1,-22","-5,7,-17","2,9,-20","0,6,12","-7,2,-16","-7,4,-11","-3,5,9","2,5,7","3,3,5","-6,1,-17","-3,0,-15","-8,7,-41","-2,-1,-19","1,6,7","-3,7,-21","-2,7,-18","-5,0,-23","3,4,7","-6,1,-26","2,2,7","-3,7,-18","-8,3,-21","-8,5,-21","0,0,-18","-7,1,-21","-7,3,-21","-8,5,-16","6,5,1","-6,1,-11","4,7,0","-6,0,-19","-1,0,-18","-7,2,-21","-8,1,-16","-6,1,-22","-8,1,-21","-8,5,-26","-7,1,-12","-2,6,10","-4,0,-23","6,2,-39","6,6,-11","-1,1,5","2,9,-26","-1,-3,1","-4,8,-6","-5,2,4","6,6,-30","6,6,-33","-4,-2,-27","0,10,-39","-4,10,-45","-4,5,7","3,7,-26","6,6,-31","3,7,-18","3,7,-27","5,7,-5","-1,-1,1","-1,-2,3","2,7,-18","6,6,-26","4,7,-27","1,8,-6","1,7,-27","7,1,-32","2,7,-27","6,6,-21","-2,10,-39","1,-2,3","3,7,-24","8,4,-5","8,0,-22","-2,-1,3","6,6,-24","5,6,-26","0,11,-40","5,2,-4","6,6,-19","1,9,-26","-8,3,-48","2,8,-22","6,6,-28","-3,3,5","-4,7,-40","8,3,-48","-4,3,-44","5,6,-38","0,6,-45","-3,7,-20","8,5,-5","9,3,-43","7,4,-45","-7,6,-45","7,8,-43","6,6,-39","-2,8,-26","1,3,-44","4,10,-45","2,10,-46","7,4,-39","6,6,-40","2,8,-6","6,6,-23","3,7,-19","6,6,-25","7,4,-31","5,6,-45","0,5,-26","3,10,-46","-1,1,9","6,6,-16","6,6,-29","7,4,-24","7,3,-21","7,3,-41","7,3,-26","6,1,-22","7,2,-43","4,7,-37","-7,1,-32","7,2,-21","-4,7,-32","7,2,-36","-6,3,-44","4,11,-43","6,1,-12","7,2,-26","-7,1,-26","-7,2,-41","-6,1,-27","7,1,-11","-4,9,-45","5,7,-17","5,7,-32","-4,11,-41","-4,11,-44","-3,7,-25","4,10,-42","-4,11,-42","7,1,-7","-7,1,-7","-4,2,1","-7,1,-36","2,11,-45","-2,11,-45","1,11,-45","4,10,-43","-4,10,-44","-1,10,-39","7,1,-16","-2,9,-23","-6,1,-32","6,1,-32","-7,2,-43","0,-5,-44","7,2,-41","7,2,-16","3,6,-45","6,3,-44","-3,-1,1","4,11,-45","2,9,-39","4,7,-12","0,9,-1","7,3,-45","7,1,-21","-7,1,-37","-8,5,-5","7,1,-12","2,10,-39","-5,7,-12","4,10,-41","7,4,-26","7,1,-36","-7,1,-31","7,1,-31","2,-2,-35","-1,0,1","7,1,-37","7,1,-17","-5,7,-27","-3,7,-23","3,7,-22","4,7,-32","3,11,-45","-7,3,-41","1,0,1","-2,9,-24","4,-2,-27","-2,-3,-35","-4,-2,-7","5,6,-23","-2,-3,-27","-5,7,-6","2,-3,-23","4,-2,-35","5,8,-41","2,7,-5","0,0,-7","-4,-2,-43","4,-2,-23","8,6,-41","4,7,-40","4,7,-39","7,5,-12","5,6,-21","-6,6,-5","-8,5,-4","5,7,-22","6,6,-13","6,5,0","-5,6,-38","-1,9,-26","-6,5,0","7,4,-9","-4,-2,-31","-8,7,-45","-2,-3,-43","3,7,-23","-6,6,-4","-4,-2,-35","2,6,-7","1,6,-7","-4,6,7","1,9,-1","2,11,-40","-8,4,-5","7,5,-32","2,11,-41","-2,-3,-31","7,8,-42","-1,2,8","1,9,-19","-3,1,5","7,5,-24","-1,9,8","-2,7,8","-3,8,4","-5,6,6","3,0,3","2,9,-19","7,8,-41","7,5,-20","-7,5,-40","4,-2,-43","0,3,-2","4,-1,-39","-4,-2,-39","3,7,-25","4,-2,-19","4,-2,-31","-6,2,3","-3,2,3","-4,3,7","-7,5,-12","-1,-1,5","7,5,-40","-7,5,-28","-7,5,-32","7,5,-36","-7,5,-36","1,-1,5","-2,3,-44","-6,2,-44","7,6,-4","-4,6,-45","3,7,7","5,6,-37","-6,2,-1","-5,2,0","7,6,-5","8,5,-6","-4,3,3","-7,6,-6","-5,8,-41","-2,8,-22","-4,-1,-43","3,7,-20","-1,6,-45","1,6,-45","-9,3,-43","-7,7,-45","8,4,-4","-5,3,2","-8,3,-47","7,7,-45","-2,7,-46","0,0,9","-5,6,-37","-3,7,-24","-3,7,-27","4,3,-44","2,7,-46","-5,7,-22","8,3,-47","0,11,-45","7,4,-29","4,-2,-39","0,1,8","-8,5,-6","-6,3,1","-7,6,-4","7,6,-45","2,-3,-39","-4,8,-5","-4,8,-4","-5,7,-5","-6,6,-6","-1,7,-27","2,9,-25","8,7,-41","-3,10,-46","6,6,-20","2,-3,-31","-7,6,-5","-5,7,-4","-2,9,-26","-2,9,-21","2,9,-21","2,7,-38","4,-2,-15","3,3,-44","2,3,-44","-3,1,-7","-3,3,-44","6,6,-45","-1,8,8","-5,6,-45","-1,10,-46","-1,3,-44","-5,3,-44","-2,-3,-39","4,-2,-11","-6,6,-45","-5,7,-32","0,0,-29","-5,6,-2","-5,6,-6","-3,4,7","0,7,-27","-6,0,-1","0,-2,-32","0,-3,-12","-1,7,-5","-7,8,-43","-2,-2,-11","-5,6,-40","3,8,4","-1,7,-1","5,6,-40","0,-3,-14","1,0,-31","-3,1,1","-4,7,-39","-3,-2,-43","3,-2,-43","0,9,-26","-6,4,7","-2,2,9","1,0,-13","1,0,-14","0,0,-30","-1,0,-13","6,6,-36","6,4,-45","-6,4,-45","-3,5,5","6,2,-44","7,5,-4","-3,7,-5","-1,0,-31","-8,1,-37","1,0,-29","-6,6,-34","8,1,-37","-7,4,-31","-7,4,-34","2,-2,-11","-6,6,-33","5,6,-9","3,8,-6","-5,6,-26","-7,1,-3","5,6,-12","-5,6,-12","-5,6,-32","5,6,-8","-6,6,-30","-7,4,-29","0,0,-31","-2,-2,-32","2,-2,-32","-6,6,-3","-1,6,-7","7,1,-3","-4,4,5","-8,1,-32","-3,9,-3","0,-2,-11","5,6,-11","3,9,-3","-5,8,-3","5,8,-3","5,3,-44","-7,4,-45","1,0,-30","4,8,-6","-5,4,8","0,-5,-31","0,-5,-35","-7,8,-41","-7,8,-44","1,7,3","7,8,-44","2,8,-1","0,-5,-43","-3,2,-40","-6,4,-2","-5,6,2","3,7,-1","0,-5,-11","0,-5,0","-8,0,-7","-6,1,-3","-3,7,-1","3,2,-40","0,-5,-27","0,-5,-19","6,6,-34","0,-5,-7","6,2,-1","8,0,-8","-1,7,3","-6,3,-7","-6,4,-6","-3,8,-5","0,-5,-23","3,7,-5","-1,0,-29","-6,5,1","-6,4,2","0,-5,-15","6,4,-2","-5,5,2","-8,6,-41","8,3,-45","1,7,-1","0,-5,1","-6,4,6","4,8,-5","-3,8,-1","3,8,-1","6,4,-6","3,8,-5","-1,0,-30","-1,6,7","3,1,-7","-2,10,-46","1,7,-5","6,8,-41","-3,7,-26","-3,7,7","0,-5,-39","6,1,-3","2,0,-39","6,6,-38","6,6,-35","0,8,9","0,8,-5","1,8,-5","8,0,-13","-8,0,-8","-8,0,-12","6,3,1","-8,3,-45","0,-4,3","2,8,-5","0,-3,5","6,3,-7","-2,8,-1","-1,8,-5","8,0,-7","8,4,-6","5,7,-7","-4,10,-41","0,10,-46","-4,11,-45","5,7,-6","-5,6,-29","-5,6,-28","8,0,-17","-5,6,-8","0,11,-44","-4,10,-42","-1,11,-45","-4,11,-43","4,11,-42","4,11,-44","0,7,-18","4,9,-40","-2,7,-38","0,6,-19","5,6,-10","-5,6,-30","0,6,-29","-6,6,-39","-8,0,-27","-6,6,-35","-6,6,-29","0,6,-11","-1,6,-15","0,6,-15","0,6,-7","-5,6,-36","-7,4,-36","-5,6,-10","-8,0,-22","-6,6,-28","-2,7,-27","-4,5,3","-1,7,-19","4,11,-41","4,7,-17","-2,11,-40","1,11,-40","-2,8,-39","2,8,-39","-2,9,-25","4,10,-44","-4,7,-37","-3,6,-45","-2,11,-41","-1,11,-40","2,6,-45","0,7,-46","-1,7,-46","1,7,-46","-7,3,-26","6,1,-17","-7,1,-27","-7,3,-45","5,7,-12","-4,7,-27","-4,7,-22","-2,9,-20","-5,7,-37","0,9,-19","-7,8,-42","-7,2,-26","-6,1,1","-2,6,-45","-4,10,-43","5,7,-37","5,2,0","-5,7,-7","4,6,-45","-7,4,-9","-3,6,-7","3,-1,1","-5,2,-4","-6,6,-8","3,6,-7","8,1,-32","5,7,-4","8,1,-27","2,-1,3","5,6,-18","5,6,-14","5,6,-19","8,0,-27","5,6,-36","-6,6,-31","-7,4,-39","-6,6,-9","6,6,-3","-8,4,-6","-8,1,-27","-5,6,-11","-8,1,-7","0,0,-39","1,0,-39","-8,0,-41","1,8,8","1,-1,1","-1,0,-39","8,1,-17","5,6,-32","7,5,-3","8,1,-7","-1,2,-7","-3,0,-43","6,6,-5","6,6,-4","4,8,-4","-6,6,-38","5,6,-13","-5,5,-2","5,5,-2","4,7,-6","-3,11,-45","8,0,-32","0,7,-6","0,6,-37","7,4,-36","5,6,-30","-5,6,-9","-6,6,-40","1,6,-19","5,6,-29","4,9,-45","0,6,-33","-2,8,-5","5,6,-2","5,6,-15","-5,6,-31","-6,6,-36","5,6,-16","5,6,-20","5,6,-17","5,6,-31","1,6,-15","-8,0,-37","-8,0,-32","0,7,10","8,0,-12","8,0,-37","-2,6,-7","8,5,-4","1,-3,1","-4,7,-6","5,6,-6","7,4,-11","3,0,-3","-5,4,-2","-5,4,-6","-3,0,-11","-3,4,3","5,0,-15","7,9,-46","-3,7,-22","1,0,-3","8,8,-46","7,7,-41","-7,1,-39","5,6,-39","4,8,-44","-4,7,-12","-5,6,-39","-7,1,-38","1,8,-38","-2,11,-42","-7,9,-46","7,8,-46","-7,8,-46","1,7,-38","5,4,-6","0,0,-3","2,-1,-27","4,8,-45","3,0,-11","-1,0,-3","3,8,-45","-2,11,-43","2,8,-46","-1,8,-38","-1,7,-38","-5,4,4","6,8,-45","4,2,-40","5,4,-2","-4,4,-40","1,2,-43","8,5,-38","2,-1,1","-8,1,-40","-8,5,-41","-4,1,-43","-3,2,-7","-1,-3,-11","1,-3,-11","6,2,-43","8,1,-41","-7,6,-41","7,1,-44","4,5,-40","4,4,-40","1,-3,-15","2,7,-43","-3,0,-3","2,0,-3","-2,0,-3","-3,8,-45","-4,8,-45","7,1,-38","-1,11,-44","8,3,-39","7,0,-39","8,1,-39","-4,-1,0","-1,-3,-15","4,8,2","6,-1,-40","4,0,-3","-4,8,-44","-3,0,-27","1,1,-43","2,0,-15","3,0,-27","-2,0,-15","6,0,-15","3,0,-15","2,0,-23","-1,0,7","0,0,-11","-6,4,-44","-7,1,-43","3,1,-43","-7,5,-3","2,1,-43","-7,4,-44","-1,2,-40","5,6,-27","-5,6,-27","-2,1,-43","3,4,-44","-1,0,-11","6,4,-44","4,4,-44","7,0,-19","4,0,-15","3,0,-19","-4,0,-3","7,0,-27","-7,0,-27","7,0,-11","-4,0,-35","2,0,-11","-2,0,-11","2,0,-31","-4,4,-44","-1,1,-43","-5,8,-45","-8,8,-46","7,7,-46","-2,8,-46","3,4,3","7,0,-15","-3,10,-45","-1,4,-44","5,8,-45","3,11,-43","7,1,-39","0,0,1","4,1,-7","-4,1,-7","-7,7,-41","-3,11,-43","1,4,-44","-6,8,-46","2,4,-44","-5,1,-43","1,11,-44","-3,2,7","1,2,-40","-3,1,-43","-6,8,-45","-8,4,-4","-5,3,6","2,0,-19","-7,5,-4","0,1,-43","-6,1,-43","7,1,-43","5,4,-44","0,4,-44","-2,4,-44","-1,7,-43","7,4,-44","-3,11,-42","1,7,-25","-8,5,-38","-8,4,-35","8,4,-20","2,2,-43","1,8,-21","-8,3,-40","1,7,-20","-1,1,-6","0,-4,-23","0,1,1","0,-4,-19","0,1,-1","-6,2,-41","-5,1,-37","0,2,-4","5,1,-7","6,7,-37","-3,-2,-3","6,7,-22","8,5,-32","-8,1,-12","5,1,-3","0,1,-2","0,2,-40","-7,0,-44","0,8,-20","1,1,-6","-5,7,-10","8,5,-37","-8,5,-32","-7,2,-44","-1,7,-22","8,0,-46","6,-1,-11","0,1,-3","6,2,-38","-6,2,-38","0,-4,-11","-1,-3,-43","-6,2,-43","7,5,-43","-4,4,3","8,1,-40","-6,2,-39","0,8,-24","1,0,5","1,9,-23","-7,4,-43","7,4,-43","0,-4,-15","-1,-3,-7","6,2,-41","-1,-1,-43","0,8,-25","-6,2,-42","-1,9,-21","0,2,7","0,9,-20","-7,6,-43","-1,9,-23","-2,2,-43","1,-3,-43","-7,6,-7","-2,7,4","-8,3,-39","-5,0,0","6,2,-42","-7,5,-43","8,1,-12","2,-1,-43","-6,-1,-11","4,2,-7","1,6,-23","-1,-3,-35","-1,8,-1","-8,5,-39","-8,2,-49","-6,7,-32","-2,2,-7","-4,7,0","-7,1,-44","7,0,-44","7,1,-27","8,3,-40","-8,5,-40","8,5,-40","-1,6,-41","-8,3,-38","-8,1,-39","-1,6,-21","-8,3,-41","6,7,-27","8,3,-41","-7,7,-43","7,6,-41","8,5,-39","3,11,-42","8,3,-38","-4,2,-40","3,-2,-3","-4,1,1","-1,-3,-27","-2,-1,-43","8,5,-27","-1,2,-43","1,-3,-7","4,-1,0","-8,1,-41","0,6,-24","7,0,-23","1,-3,-35","2,7,-26","2,9,-23","-4,2,-7","-1,2,-8","-3,8,3","-7,4,2","8,5,-17","0,7,-20","0,6,-41","0,1,-39","1,5,-26","6,1,-27","0,4,-4","0,5,-8","-1,-3,-31","-8,5,-37","0,2,-43","0,3,-4","8,5,-12","-8,5,-7","-8,5,-27","3,8,3","6,7,-17","2,7,-22","-2,-1,1","-2,7,-26","-2,7,-22","-1,-3,-19","-4,5,-40","6,7,-32","-1,-3,-23","1,6,-41","6,1,-43","2,9,-3","-5,6,-25","-2,6,6","-5,6,-24","5,6,-24","-6,5,-7","-3,4,-43","-3,3,-43","1,7,-18","0,7,-1","5,7,-3","-3,6,4","-7,5,-8","-3,7,3","-2,9,-3","-5,7,-3","8,7,-45","-2,-2,-39","3,4,-43","-6,-1,-40","-3,6,-43","0,7,-39","-6,-1,-43","6,-1,-43","-6,-1,-42","6,-1,-42","0,-1,-43","3,3,-43","0,-2,-43","6,-1,-7","3,6,-43","3,7,-43","-3,5,-43","-5,7,-2","7,2,-7","3,2,-43","-4,-2,-11","-1,6,-29","5,6,-34","6,-1,-31","-1,6,-37","6,5,-7","-1,6,-33","1,6,-33","1,6,-29","8,4,-45","-2,-3,-23","-5,6,-35","-6,-1,-7","0,7,-5","7,4,-41","8,6,-45","-8,4,-45","1,6,-37","-4,6,3","-1,9,-1","3,2,-5","-6,7,-46","7,5,-8","6,7,-46","2,7,-1","-2,7,-1","4,-2,-7","3,6,4","5,6,-33","2,1,-5","-1,9,3","5,6,-22","-3,2,-5","4,7,-5","0,7,3","3,7,3","2,-3,-43","-6,-1,-41","-2,9,-19","2,-2,1","6,6,-15","7,4,-16","2,-3,-27","7,5,-28","6,0,-1","3,1,1","7,4,-14","6,6,-10","-2,-3,-15","2,-3,-11","-2,-3,-11","2,-3,-7","-3,2,-43","-5,7,-40","7,5,-16","-2,1,3","5,6,-28","2,9,-24","6,6,-14","6,6,-6","6,6,-9","6,6,-8","4,7,-22","-1,7,-18","-4,9,-40","-3,-2,0","-2,-2,1","7,6,-6","6,6,-18","7,4,-19","3,7,-21","0,3,-3","3,-2,0","2,8,-26","-4,7,-7","3,5,-43","-2,-3,-7","2,-3,-19","2,-3,-35","-7,3,-7","-5,6,-33","4,7,-7","-7,3,-11","6,-1,-41","5,6,-25","-3,7,-43","2,-2,-39","-7,4,-6","2,1,3","6,-1,-39","7,3,-7","-7,2,-7","-4,8,-2","1,6,-11","6,-1,-27","-6,-1,-27","6,-1,-23","7,3,-11","-6,-1,-35","6,-1,-35","5,7,-40","2,-3,-15","7,2,-11","-6,-1,-31","-5,6,-34","-6,-1,-39","1,9,3","6,0,-35","1,0,-43","-1,0,-43","1,9,7","-1,9,7","1,2,-7","7,4,-34","4,-1,-43","-3,0,-39","-5,0,-31","8,0,-41","2,0,-43","-7,0,-39","3,-2,-39","-7,0,-43","3,0,-39","3,-1,-43","-2,0,-39","2,-1,-39","-6,0,-43","2,0,-35","-3,-1,-39","-2,-1,-23","3,0,-43","-3,-1,-23","-4,-1,-39","-5,-1,-43","5,6,-35","-4,0,-43","-8,0,-26","6,0,-43","-3,-2,-39","-7,0,-31","8,0,-31","-5,0,-43","5,-1,-43","3,-1,-15","-4,0,-31","1,7,-43","-3,4,-44","7,0,-31","1,0,-35","4,0,-43","-3,-1,-43","8,0,-21","8,0,-26","3,0,-23","1,0,-11","5,1,-43","5,0,-31","2,11,-43","3,0,-31","-3,0,-31","-6,0,-35","5,0,-43","7,0,-35","-8,0,-31","0,0,-35","8,0,-36","-8,0,-36","3,-2,-35","0,0,-43","3,0,-35","-3,0,-35","-3,-2,-35","-7,0,-35","-1,0,-35","-5,4,-44","5,0,-35","-5,0,-35","-3,-1,-11","6,8,-46","6,0,-31","-6,0,-31","-2,-1,-31","4,-1,-7","4,-1,-23","-6,5,-6","4,0,-35","4,-1,-15","-3,-1,-15","-2,-1,-7","-5,5,-6","3,-1,-11","2,-1,-11","-2,0,-35","-2,-1,-39","2,-1,-15","-3,-1,-27","2,-1,-19","-5,-1,-35","6,5,-6","5,5,-6","8,1,-22","6,-1,-19","6,-1,-15","-1,6,-11","-8,6,-45","-7,4,-41","7,4,-21","-8,5,-45","8,5,-45","4,0,-31","5,-1,-7","-5,-1,-7","-4,7,-5","-4,-1,-35","-5,6,-22","5,-1,-35","-2,7,-5","-3,6,8","2,-1,-7","3,-1,-35","-7,7,-46","3,-1,-27","2,8,7","3,-1,-23","-4,-1,-27","-2,0,-31","3,10,-45","4,-1,-35","2,-1,-35","-2,-1,-35","3,-1,-39","-3,-1,-7","-4,-1,-31","4,-1,-27","3,-1,-31","-3,-1,-31","4,-1,-31","-3,-1,-35","-2,-1,-15","4,-1,-11","3,-1,-7","7,0,-43","-4,-1,-7","2,-1,-31","-4,-1,-11","5,-1,-15","4,-1,-19","2,11,-42","-2,-1,-27","2,8,3","-2,0,-43","2,-1,-23","5,-1,-31","3,-1,-19","-5,-1,-31","-2,-1,-11","1,5,-2","0,0,-25","0,-1,-23","0,-3,-13","0,-3,-19","0,-3,-18","0,-3,-17","0,-3,-16","2,1,-11","2,2,-11","2,2,-13","2,2,-16","2,2,-19","2,2,-22","2,2,-25","-3,2,-13","-3,2,-16","-3,2,-19","-3,2,-22","-3,2,-25","-3,1,-31","-3,2,-31","-3,3,-31","-3,4,-31","0,4,-35","-3,1,-28","-3,1,-27","2,-4,-19","-2,-4,-19","2,-4,-22","-2,-4,-22","2,-4,-16","-2,-4,-16","2,8,-41","2,8,-42","-2,8,-42","0,1,-44","0,1,-45","0,1,-46","5,1,-44","-5,1,-44","5,1,-45","-5,1,-45","5,1,-46","-5,1,-46","2,-4,-13","-2,-4,-13","2,-4,-10","-2,-4,-10","5,-1,-1","-5,-1,-1","5,-1,-2","-5,-1,-2","5,-1,-3","-5,-1,-3","9,1,-3","-9,1,-3","8,1,0","-8,1,0","7,1,2","-7,1,2","6,1,5","-6,1,5","9,1,-54","-9,1,-54","9,1,-51","-9,1,-51","9,1,-48","-9,1,-48","9,1,-45","-9,1,-45","0,-1,9","0,-2,5","0,-2,7","0,-6,-45","0,-6,-42","8,-1,-20","-8,-1,-20","0,-4,-45","0,-4,-46","0,-4,-47","0,-4,-48","1,5,-9","2,5,-9","0,5,-9","1,4,-9","3,5,-9","2,4,-9","-1,5,-9","0,4,-9","1,3,-9","4,5,-9","3,4,-9","2,3,-9","-2,5,-9","-1,4,-9","0,3,-9","1,2,-9","5,5,-9","4,4,-9","3,3,-9","2,2,-9","-3,5,-9","-2,4,-9","-1,3,-9","0,2,-9","1,1,-9","6,5,-9","5,4,-9","4,3,-9","3,2,-9","2,1,-9","-4,5,-9","-3,4,-9","-2,3,-9","-1,2,-9","0,1,-9","6,4,-9","5,3,-9","4,2,-9","3,1,-9","-5,5,-9","-4,4,-9","-3,3,-9","-2,2,-9","-1,1,-9","6,3,-9","5,2,-9","4,1,-9","-6,5,-9","-5,4,-9","-4,3,-9","-3,2,-9","-2,1,-9","6,2,-9","5,1,-9","-6,4,-9","-5,3,-9","-4,2,-9","-3,1,-9","-6,3,-9","-5,2,-9","-4,1,-9","-6,2,-9","-5,1,-9","4,5,-21","5,5,-21","3,5,-21","4,4,-21","6,5,-21","5,4,-21","2,5,-21","3,4,-21","4,3,-21","6,4,-21","5,3,-21","2,4,-21","4,2,-21","6,3,-21","5,2,-21","1,4,-21","4,1,-21","6,2,-21","5,1,-21","0,4,-21","-1,4,-21","-2,4,-21","-3,4,-21","-2,5,-21","-4,4,-21","-3,5,-21","-5,4,-21","-4,5,-21","-6,4,-21","-5,5,-21","-5,3,-21","-6,5,-21","-6,3,-21","-5,2,-21","-6,2,-21","-5,1,-21","-2,-2,-37","2,-2,-37","1,-2,-37","0,8,-44","-3,1,8","-1,-2,-37"],"BLR":[4,0,0,3,1,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,11,0,0,0,0,0,10,18,3,0,0,0,0,21,0,0,0,0,10,1,0,18,9,11,0,0,0,16,9,1,1,3,0,0,0,0,16,3,0,13,16,0,9,0,18,0,0,11,11,3,0,16,0,6,9,1,0,0,10,6,0,0,0,1,0,0,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,3,0,1,0,0,15,0,0,0,3,3,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,0,3,0,18,1,0,1,2,0,0,0,3,1,3,2,0,0,0,10,0,8,14,2,3,0,2,10,12,0,2,18,0,0,0,0,2,9,0,2,0,0,12,2,2,10,9,18,0,0,0,3,2,0,20,3,6,3,1,3,9,1,0,1,1,6,17,0,6,1,6,3,3,3,10,0,16,1,11,6,12,6,10,19,0,3,1,1,1,0,0,3,2,10,6,16,9,0,1,0,0,6,2,0,1,0,14,18,10,0,0,18,1,0,22,0,0,0,0,9,16,16,18,1,0,21,20,16,2,14,16,19,3,14,1,18,11,16,0,0,18,0,9,10,11,9,0,0,0,16,9,18,2,0,3,2,2,2,6,7,5,6,0,0,14,2,0,0,0,0,18,0,18,0,11,0,16,2,0,11,0,11,9,11,0,0,0,2,0,0,1,3,11,0,9,0,10,0,11,0,0,0,11,2,2,0,0,0,0,0,0,18,12,12,0,13,0,2,0,18,0,0,0,0,11,0,15,0,0,23,0,2,11,0,0,0,2,9,0,3,9,1,18,11,0,0,0,0,16,0,0,0,0,16,0,0,0,0,0,15,15,10,0,0,15,9,0,10,0,0,13,0,0,0,15,0,0,0,10,2,0,18,11,0,0,0,0,23,0,10,0,0,0,0,4,0,4,3,3,10,13,0,0,0,10,3,0,0,0,13,0,0,0,0,18,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,10,3,3,0,0,0,0,0,21,0,0,15,0,3,0,0,0,0,2,0,0,0,18,0,0,0,1,11,0,16,9,0,0,0,3,0,0,0,0,0,0,16,0,10,8,0,0,9,9,11,0,0,0,0,10,0,21,10,0,12,10,9,10,18,0,16,0,0,0,14,10,8,0,0,0,0,0,0,0,0,0,0,0,3,0,9,0,16,9,0,0,13,15,0,0,0,0,0,0,16,0,10,0,0,22,10,0,0,18,1,6,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,9,0,1,3,1,3,1,3,1,0,11,9,11,9,11,9,11,9,0,1,5,7,5,7,5,7,0,0,7,13,15,13,15,13,15,13,5,0,1,3,1,3,1,3,1,3,3,0,0,0,0,0,0,0,0,0,3,1,1,0,0,18,11,0,1,11,16,0,9,0,0,18,3,0,3,3,16,1,1,3,3,16,3,16,3,0,1,3,0,2,3,3,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,3,0,0,3,0,16,0,16,16,0,0,1,3,0,3,3,3,11,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,9,11,9,15,13,0,11,1,3,1,3,11,9,11,9,0,7,5,7,5,7,5,9,0,5,0,0,13,15,7,5,7,5,7,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,5,7,5,7,5,7,1,5,0,0,0,0,10,5,7,5,7,3,0,16,0,12,0,0,12,10,0,0,0,0,1,0,0,0,12,0,16,11,2,16,18,2,12,3,0,12,16,16,16,3,0,0,0,0,1,3,6,6,18,0,1,0,3,0,0,0,6,16,3,0,0,6,3,3,0,0,0,0,18,3,3,0,0,0,0,3,0,0,6,1,2,0,16,1,6,6,6,16,9,1,16,10,3,0,18,18,0,3,10,16,12,0,1,6,1,9,3,0,22,18,20,12,0,0,1,6,6,3,0,0,0,0,0,1,0,9,0,18,0,10,9,9,3,0,16,0,6,9,3,0,1,9,10,6,0,0,10,0,0,3,1,9,15,1,12,3,0,0,0,16,18,0,0,2,0,1,16,0,0,11,3,16,23,0,0,0,0,16,1,1,0,0,13,0,13,10,0,18,0,3,16,11,0,0,16,16,1,3,0,1,3,0,16,0,0,9,0,0,0,2,0,0,8,9,0,16,9,16,9,18,13,16,16,16,0,18,4,0,6,11,0,18,0,0,1,0,0,16,0,0,9,16,0,0,3,0,0,0,0,4,3,0,4,0,11,0,0,0,0,3,18,0,0,9,0,21,0,0,11,8,0,0,0,0,11,18,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,11,18,0,3,1,0,2,18,2,18,1,1,12,2,19,18,9,1,9,10,1,0,18,8,1,3,2,10,9,10,1,3,16,9,5,0,18,1,3,0,0,1,2,11,0,1,0,8,9,6,3,6,11,1,16,2,6,1,1,0,6,17,0,1,1,2,1,9,1,1,6,0,0,0,1,1,1,0,0,0,11,0,3,11,0,1,0,14,1,11,0,0,0,9,0,19,0,0,0,3,11,3,3,0,0,0,0,2,2,2,3,1,2,0,0,9,11,0,10,0,0,6,14,18,2,20,3,0,0,0,11,3,9,1,0,3,1,0,0,0,0,0,9,9,0,11,9,3,2,0,0,3,12,12,12,21,12,2,12,12,0,0,0,12,12,20,8,8,0,3,1,0,0,1,17,1,2,19,1,12,0,12,9,0,12,10,10,18,0,1,7,0,1,12,1,8,0,18,0,0,18,18,18,16,0,1,0,0,12,0,0,12,9,12,12,18,0,18,0,18,0,0,0,0,0,16,6,14,0,6,16,3,0,0,1,1,0,3,0,0,0,9,6,6,18,1,4,0,11,3,14,0,1,11,10,6,14,0,9,2,1,12,2,3,0,0,6,12,3,3,3,0,10,0,20,0,1,12,3,3,2,3,1,20,12,6,6,0,6,6,0,6,0,6,6,12,12,6,0,4,0,0,0,10,21,0,3,0,3,0,1,16,0,3,3,7,0,8,0,0,0,18,0,4,4,7,4,1,2,2,0,14,0,0,7,11,4,3,9,3,3,0,3,3,2,1,11,3,1,1,3,3,3,7,0,0,11,10,9,0,11,3,0,3,1,3,1,6,2,7,2,18,0,0,3,3,0,1,0,0,8,0,0,0,0,2,0,0,0,8,0,0,1,0,0,2,0,0,0,0,0,0,4,0,0,0,0,0,21,0,0,0,0,1,0,0,0,0,7,0,0,0,0,0,11,18,0,0,0,1,1,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,5,0,1,0,2,2,1,1,0,1,0,1,2,3,1,1,8,16,21,0,3,1,0,3,0,3,3,0,0,0,10,1,3,1,0,3,10,0,1,0,3,3,0,21,20,0,3,1,6,3,0,6,14,14,14,0,11,11,0,0,1,1,0,0,0,3,0,18,6,1,0,0,0,6,3,10,16,0,3,10,9,1,9,16,3,3,3,0,3,3,3,3,9,7,11,1,11,0,0,0,0,0,0,9,3,1,9,10,0,3,0,1,3,3,0,0,3,2,0,0,0,1,3,1,3,0,3,17,0,0,0,3,1,3,3,3,3,3,0,0,0,0,0,0,10,0,16,1,0,1,0,0,0,0,0,0,0,11,0,9,3,1,3,0,1,1,1,8,10,0,0,0,0,0,0,0,14,0,0,1,10,3,8,0,0,0,2,0,0,0,1,0,3,0,0,10,0,0,3,0,1,19,0,0,0,12,0,0,0,3,14,3,0,5,0,1,18,0,1,21,0,0,0,0,0,0,0,0,0,0,18,0,9,0,0,3,0,9,10,3,1,0,11,0,11,11,0,0,0,0,0,0,0,0,0,0,0,9,0,0,11,14,0,0,0,15,9,0,10,3,0,0,0,1,10,11,1,11,0,0,18,10,0,0,4,18,0,0,0,0,0,11,9,9,12,11,10,3,3,6,6,0,2,7,9,1,0,0,0,0,1,20,0,0,1,0,1,9,11,0,0,8,17,2,3,3,9,11,17,20,14,12,0,3,1,0,0,1,0,0,1,1,2,0,10,10,10,0,0,3,0,10,1,10,0,10,0,10,0,0,1,0,7,18,3,0,9,0,12,10,18,0,1,3,0,3,10,0,17,19,9,5,3,1,0,7,3,18,12,1,12,1,3,1,10,5,2,0,0,0,0,9,0,0,16,0,0,0,0,16,0,10,10,19,18,9,0,0,2,16,11,2,0,0,11,0,0,9,11,11,17,1,16,0,18,18,0,0,1,0,0,0,3,20,0,20,21,0,2,2,8,0,0,0,0,0,0,0,0,0,2,20,2,0,20,21,20,21,0,2,0,12,2,2,2,0,0,2,12,0,3,12,0,0,0,0,0,0,12,1,12,0,1,0,0,0,0,0,0,22,0,23,0,0,12,0,3,0,0,21,0,0,0,0,12,20,0,16,1,1,12,0,20,0,1,1,12,12,12,12,2,0,0,0,3,1,1,0,1,1,3,8,18,18,18,1,1,1,9,0,16,0,1,2,12,12,12,0,1,3,0,21,21,2,0,12,0,12,0,0,0,0,12,12,12,0,12,12,0,12,0,12,1,12,0,0,0,0,0,0,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,12,9,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,12,12,0,0,3,1,0,0,0,0,0,0,0,20,0,0,18,0,0,14,0,16,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,2,2,3,3,3,3,0,0,2,2,2,2,2,2,1,1,1,1,1,5,5,5,5,15,12,12,8,8,8,8,8,8,0,6,6,2,2,0,2,2,2,2,0,0,8,8,8,8,21,20,21,20,21,20,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,8,14,8,8,8,8,8,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,1,1],"BP1":null,"BP2":null,"BCI":[0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,31,0,0,0,0,0,0,0,0,0,30,0,0,0,31,0,31,0,0,0,31,31,0,0,0,0,0,0,0,27,0,30,0,31,0,0,30,31,0,0,0,0,0,0,31,0,0,0,0,0,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,30,0,0,30,0,0,30,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,27,0,27,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,27,31,0,0,0,0,0,0,0,0,0,0,0,0,27,0,27,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,27,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,27,27,27,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,31,0,0,0,0,31,0,31,31,0,0,0,0,31,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,31,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,27,27,0,0,27,0,27,0,27,0,0,0,31,0,0,0,0,0,27,0,0,0,27,0,0,27,0,0,0,0,0,0,0,0,0,0,0,27,27,0,27,27,0,27,27,27,0,27,0,0,27,0,0,0,27,27,0,27,0,27,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,31,0,31,31,0,0,0,31,0,0,31,0,0,31,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,31,31,0,0,29,0,0,0,0,0,0,0,0,0,0,0,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,31,30,0,0,0,30,31,0,0,0,0,0,0,0,0,30,0,0,0,0,31,0,0,0,0,0,31,31,0,0,0,31,0,31,0,0,0,0,0,0,31,0,0,0,0,0,31,0,0,0,0,0,0,31,0,28,0,31,0,0,0,31,0,0,0,0,0,0,0,30,0,0,0,0,31,0,0,0,0,0,31,0,31,0,31,0,0,0,0,0,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,30,0,31,31,0,0,31,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,31,30,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,31,31,0,0,0,0,0,31,0,0,0,0,31,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,31,0,30,0,0,0,0,31,0,0,0,0,31,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,31,0,0,0,0,0,0,0,0,0,0,31,0,31,31,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,31,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,31,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,0,31,0,31,31,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,31,0,0,0,0,0,0,0,0,0,31,31,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,31,0,30,0,0,0,0,0,0,0,0,0,27,30,0,0,0,27,31,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,27,0,27,0,0,0,0,0,0,27,0,27,0,27,0,27,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,31,30,30,0,31,0,0,0,0,0,0,0,30,0,31,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,31,31,31,31,0,0,0,0,0,31,31,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAAVAAAAIQDDycAAAAAAKCGAQAABAEAAAAAAAQBAQAAAABEAQIAAAAAhAEDAAAAAMQBBAAAAAAEAgUAAAAARAIGAAAAAIQCBwAAAADEAggAAAAABAMJAAAAAEQDAAAQAAAAAAAAAAAAAAAAAAAAAAEABAAAAAACABAAAAAAAAAAAAAAAAAAAAAAAwAEAQAAAAQAEAAAAAAAAAAAAAAAAAAAAAAFAAQCAAAABgAQAAAAAAAAAAAAAAAAAAAAAAcABAMAAAAIABAAAAAAAAAAAAAAAAAAAAAACQAEBAAAAAoAEAAAAAAAAAAAAAAAAAAAAAALAAQFAAAADAAQAAAAAAAAAAAAAAAAAAAAAA0ABAYAAAAOABAAAAAAAAAAAAAAAAAAAAAADwAEBwAAABAAEAAAAAAAAAAAAAAAAAAAAAARAAQIAAAAEgAQAAAAAAAAAAAAAAAAAAAAABMABAkAAAAAABDsu3eETJe/RaHOSaSNW1MHAQAMYhCAP2IQgD9iEIA/AwAMAAAAgAAANEMAAIdDBQAMAgAAAAQAAAAMAAAAAAAQ7Lt3hEyXv0WhzkmkjVtTBwEADGIQgD9iEIA/YhCAPwMADAAAAIAAADRD/v+zQgUADP7///8EAAAADAAAAAAAEOy7d4RMl79Foc5JpI1bUwcBAAxiEIA/YhCAP2IQgD8DAAwAAACAAAA0QwAAh0MFAAwDAAAABAAAAAoAAAAAABDsu3eETJe/RaHOSaSNW1MHAQAMYhCAP2IQgD9iEIA/AwAMAAAAgAAANEP+/7NCBQAM/f///wQAAAAKAAAAAAAQfgNIVSiE+EO8ttcw280KeQEADGIQgD9iEIA/YhCAPwMADAAAAIAAADRDAACHQwUADAQAAAAEAAAACAAAAAAAEH4DSFUohPhDvLbXMNvNCnkBAAxiEIA/YhCAP2IQgD8DAAwAAACAAAA0Q/7/s0IFAAz8////BAAAAAgAAAAAABB+A0hVKIT4Q7y21zDbzQp5AQAMYhCAP2IQgD9iEIA/AwAMAAAAgAAANEMAAIdDBQAMBQAAAAQAAAAHAAAAAAAQfgNIVSiE+EO8ttcw280KeQEADGIQgD9iEIA/YhCAPwMADAAAAIAAADRD/v+zQgUADPv///8EAAAABwAAAAAAEOy7d4RMl79Foc5JpI1bUwcBAAxiEIA/YhCAP2IQgD8DAAwAAACAAAA0QwAAh0MFAAwGAAAABAAAAAYAAAAAABDsu3eETJe/RaHOSaSNW1MHAQAMYhCAP2IQgD9iEIA/AwAMAAAAgAAANEP+/7NCBQAM+v///wQAAAAGAAAARykBAAAAAAAHAAAAAAAAAAAAAAAAwX1WnwAAAAAHAAAABwAAAAAAAAAAAAAEDQAAADntBwAAAAAABwAAAAAAAQAAAAAAAD41FAAAAAAABwAAACMAAQAAAAAAAAoABM3MzD0LAATNzMw9DAAEzczMPQ0ABM3MzD0OAATNzMw9UkMAAAAAAAAHAAAAAAABAAAAAAAAxEoAAAAAAAAHAAAAFQAAAAAAAAAAAAAE2YDnRgEABAC0sEUDAAQBh4lGK94KAAAAAAAHAAAACAABAAAAAAAAAAABAQEAAQEyjlAAAAAAAAcAAAAAAAAAAAAAAADQq2UAAAAAAA4AAAAEAAAAAAAAAAABAAAAAAQAAAABAS7LBAAAAAAABwAAAAAAJIgAAAAAAMInYQAAAAAABwAAAF4AAAAAAAAAAAAABAAA8EEKAAQAAMjBCwABAQ8ABAAAgkIQAAEBFAAEAAD6QxUAAQEZAAQAQJxFGgABATIABABAHEY3AAQAQBxGHgAEAACAPx8AAQEjAAQAAIA/JAABASgABAAAoEES6AEAAAAAAA4AAAAAAA8nAAAAAACghgEAAAAA","designChanged":false,"blueprintVersion":129,"blueprintName":"Submarauder","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":621,"LocalPosition":"11996.62,-301.6841,13132.54","LocalRotation":"-0.002316141,0.4044655,0.001746497,0.9145486","ForceId":1304966904,"TotalBlockCount":2921,"MaxCords":"10,11,15","MinCords":"-10,-6,-55","BlockIds":[543,1617,1615,1355,1377,1614,1615,545,352,1615,1615,1615,1358,1615,1616,1615,1615,1615,1615,352,1615,1617,1259,1615,1617,1615,778,1630,1373,1615,1346,1617,1617,1631,1615,1615,1617,1616,1615,542,766,1616,1613,1345,1615,1615,1616,1617,1345,535,1614,1630,1615,1615,1613,1615,780,535,1617,1630,1617,1615,1345,1616,1616,1615,1616,1613,1613,1344,1615,1617,1615,1631,1615,535,1616,779,778,1625,1615,1615,1615,535,545,1615,1615,1614,288,1615,1615,766,1651,288,1615,1259,1630,1615,1615,1613,1616,1615,1614,1615,1630,1615,1344,1615,1615,1630,346,352,1617,1344,542,1615,1615,1615,1615,1615,1614,1617,1615,1615,1617,1615,1615,1617,1615,1616,542,766,542,1615,1631,1344,1615,778,1614,1615,1615,1615,1344,1344,1344,1614,1615,1259,1613,792,1346,797,545,1637,1350,1614,1640,770,1613,391,1640,1615,1259,1615,1259,1614,1660,783,1615,545,1615,1350,1613,1637,1659,1345,792,1616,391,1259,766,535,1656,391,1613,535,1626,535,535,535,783,535,779,535,535,1625,1349,1615,1625,535,1626,535,535,787,1345,1613,1615,535,797,1625,1345,1626,1344,1637,1615,535,535,535,535,1615,1615,1350,1660,770,1626,1378,1377,1615,1617,391,1613,1626,1637,778,535,1615,1631,1615,770,1616,1615,1613,1630,1615,1346,1613,1615,1615,1617,771,1617,1617,1616,535,1616,1613,1613,1613,1640,1631,1350,1349,535,1631,535,1374,1373,1613,1259,1615,1350,1350,783,770,797,783,779,766,1346,1615,783,1613,1636,1615,1615,1656,1659,1655,1626,347,347,1625,1259,777,1631,1656,1615,1259,1615,1613,1631,1346,1631,1614,1613,1614,1631,288,1615,307,1615,307,797,1350,543,1259,1615,288,771,259,270,270,1630,270,1630,1615,770,1615,307,288,1615,1615,1613,778,288,1615,1615,1615,1615,1615,1615,1630,1617,1616,1259,1630,1615,288,771,1630,1344,1615,1615,771,307,259,1349,1615,1259,1630,1613,288,307,1615,1615,1615,288,307,1615,1350,307,1350,1616,307,782,1615,1615,288,1630,1615,1615,1615,1615,1346,391,1346,1613,1613,391,1349,1349,1615,1615,1615,1349,1350,1346,1615,1613,1615,1349,288,288,1613,1349,1615,1615,1615,1615,542,1613,1630,307,1259,1615,1615,771,798,1615,1615,770,770,1615,1615,770,771,770,1615,1630,1615,1349,1615,766,1615,1615,1630,1615,1615,1613,1630,1615,1615,1615,1613,1631,1615,1615,1615,1615,1615,1349,1615,1615,1615,1615,1615,1613,1615,1615,1615,1615,1613,1615,1615,1615,1613,1615,1350,1615,797,1615,1344,766,1613,1614,1615,1614,1613,1615,1615,1630,1613,1346,1613,1615,1615,1615,545,1615,1613,1615,1631,1617,1615,1630,1614,771,1615,1617,1613,1615,1615,766,1345,1613,1615,1616,1615,1615,1615,1346,1636,1615,1615,766,1615,1613,1350,1350,766,771,1259,1615,770,766,1613,770,1615,1615,1615,1350,770,1346,766,1630,1615,1615,1615,1633,1615,1615,529,1615,1615,1615,1615,1617,766,1615,771,1615,1615,1615,766,1613,1615,1630,1350,1615,1615,1349,1349,1616,1615,1615,1615,1259,766,1630,1617,1617,1615,1616,1630,1616,1616,1615,1630,1630,1625,406,406,406,406,406,406,406,402,406,406,406,406,406,406,406,406,406,402,406,402,402,402,402,402,402,402,406,402,402,402,402,402,402,402,402,406,402,402,402,402,402,402,402,406,406,402,402,402,402,402,402,402,402,402,406,402,402,402,402,402,402,402,402,402,406,406,406,406,406,406,406,406,406,402,1615,1615,1615,1615,1630,1350,1615,1615,1350,1349,1617,307,1615,1615,1631,1631,1373,1631,232,1630,1615,1615,1631,232,1631,1631,1630,232,288,1615,1631,771,1615,1631,232,771,406,406,406,406,391,391,391,391,406,402,402,406,406,406,406,406,406,406,391,1631,1615,1615,1631,1615,1349,1647,1349,1350,391,1258,1350,1631,1615,1350,1350,1350,1346,402,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,403,403,403,403,403,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,403,402,402,402,402,402,402,402,391,402,402,402,402,402,402,402,402,402,391,402,402,402,402,402,402,402,406,402,391,391,402,402,402,402,402,402,402,402,396,396,396,396,396,396,396,396,396,403,403,403,403,403,403,403,396,396,396,402,402,402,402,402,402,402,402,402,396,396,396,396,390,402,402,402,402,232,1613,1631,1353,1617,1613,1615,1617,1615,1613,1615,1613,1615,1630,1615,1377,240,1617,288,1630,1346,1660,1631,1630,1635,1617,232,1615,1617,1630,1630,1631,535,1647,1615,1617,259,535,535,1625,1625,1350,1353,535,1615,535,240,1651,1615,1625,1350,535,1615,1615,1626,535,535,1373,1615,1346,1617,1350,535,535,1615,240,240,240,535,1615,771,1626,1615,770,1615,1631,535,1626,1626,1625,780,792,535,1345,770,535,777,1345,780,1355,535,1349,1631,1617,1614,535,1625,535,783,535,1615,1349,780,1615,307,779,1615,535,1625,1626,535,770,1615,1613,1615,1615,535,780,783,1615,780,787,1349,792,792,787,1615,780,1615,1625,783,535,1378,535,783,778,1625,780,1613,778,1615,1615,535,535,792,1630,535,1617,1350,1615,1615,288,1617,1616,1615,503,529,1617,1349,1631,1615,1615,1350,1631,1631,1349,1615,288,1613,1615,1630,1344,1344,1615,1615,1349,1615,1349,1613,766,1631,771,1631,1630,1631,1615,1615,1631,1631,1615,1631,1615,1615,1631,1615,1630,1373,1377,307,1346,1354,1346,1655,1615,1615,1346,307,1615,1631,307,1630,307,1631,1349,1631,1631,1631,1615,1631,770,240,1626,1345,1615,1616,1615,1615,1614,1615,1615,1630,1615,1615,1351,1630,1615,1615,1631,1615,1374,1358,388,770,535,1354,770,1615,1345,766,766,240,1615,232,1631,1615,1615,1351,1615,1630,1615,1615,1631,1631,1615,1615,1617,1613,1378,1616,1616,1614,1615,1615,1616,1615,1617,1615,1615,1614,1615,1616,1351,1616,1616,1345,1630,1615,1630,1631,1615,1651,1631,1647,1630,1631,1631,1617,770,1350,1631,1631,1631,1374,1374,1630,1615,1631,1631,1631,1349,1630,1631,1345,1631,1631,1374,1631,1631,1631,771,1631,1631,1615,1631,1615,1631,1630,1615,1615,1631,1615,1637,1615,1631,1615,1631,1350,1630,1350,1630,1631,1631,1631,1615,1631,1350,770,232,1631,1630,1631,1631,1631,232,1631,1615,766,240,1631,1631,232,1615,1615,1615,1351,1613,1349,1345,1615,1349,1615,1613,1630,1351,1615,1615,1615,1351,1615,1631,766,766,1659,1630,1350,770,1630,1615,1615,1615,1615,1631,1631,1631,770,770,770,1615,1344,1351,1351,1613,1351,1615,1615,1631,1613,1631,1660,1631,1349,1350,1615,1615,1345,1630,1345,1378,766,770,232,1615,1615,1615,352,1615,1345,1345,766,1350,1350,1349,1631,1615,1615,1630,1616,1617,1617,1615,1617,1647,1616,1616,1631,1615,1615,1617,1616,1630,1640,1660,1346,1615,1630,1659,766,1631,1631,1615,1630,1631,232,1617,1615,1617,1350,1655,1617,1631,1631,1630,1346,1660,1631,1346,1640,1617,1631,1346,1630,1631,1346,1377,1630,1631,1630,1631,1647,1660,1346,1346,1616,400,1615,1617,1350,1616,1616,1630,1615,1631,1346,1631,1346,1346,1346,1346,1346,1631,1631,1631,1655,1631,1630,1615,1615,1615,1630,1630,1615,1630,1631,1615,1615,1350,1631,1631,1350,1615,1656,1615,1615,1615,1630,240,1615,1631,1378,1631,1630,766,1615,1631,232,1616,1615,1630,1615,1659,1631,1616,1630,1630,1630,1636,1631,766,1630,766,1631,1616,1630,1630,1647,1630,1630,1631,1616,1631,1631,1615,1631,1631,1353,1631,770,1631,1631,1617,1616,1631,766,543,1615,1615,1615,1350,1631,543,310,1615,1631,771,1615,1631,1615,1615,310,770,1615,1656,1615,1615,766,1349,240,543,770,770,543,1631,1630,1630,1615,1631,1636,1615,770,1346,543,1631,1346,232,232,771,1631,1615,1630,1615,1346,1615,1615,1615,1615,1631,232,770,771,771,1350,1631,1346,1615,1346,1350,543,1615,1350,1349,1349,1631,1630,770,1651,1349,1346,1346,1656,1631,1615,1631,1615,1346,1615,1615,1615,1615,1346,1346,771,1615,1615,1615,1346,1346,1631,1346,1615,1615,1615,1615,1615,1615,1346,1615,543,1615,1615,1346,1615,1615,1630,1615,1615,240,771,1630,1615,1615,1615,1615,770,1615,1615,770,1615,1630,1631,1630,1346,1615,1615,1631,1631,240,1615,1615,1615,1615,771,1615,1615,240,1615,240,1615,1615,1615,771,1631,766,770,770,1656,1651,1615,1615,771,1615,1615,770,1631,1630,1630,1630,1350,1630,1631,1615,1615,1615,1615,1631,771,1631,1631,1615,1615,1615,1631,1615,232,1615,771,1631,1631,1615,1614,1655,1349,1656,1631,1350,1350,766,770,1349,1631,1637,1631,1631,1630,1630,1630,1615,1351,1345,1615,766,1349,1349,766,766,766,1631,1615,1630,1631,770,766,1615,766,1631,232,1631,1631,1615,1631,1631,1346,1630,1346,1631,1615,1615,1615,771,1615,1631,232,1631,1350,1631,1346,1615,1346,1615,1615,1615,1354,1615,1615,1346,1615,1349,1346,1346,1615,1630,1659,1630,1631,1615,1615,1615,1615,1631,771,771,1615,232,1615,1615,1631,1615,1615,1631,1615,1615,1615,1615,1615,1631,1615,1615,1615,1615,1615,771,771,240,771,771,1631,1655,1631,1615,1615,232,1615,1615,1615,1615,1615,1615,279,1350,1615,1630,1615,1615,1615,1615,1349,1615,1615,1631,770,279,259,259,766,1615,1615,1615,1635,1615,1615,485,770,1615,1631,766,1615,1615,543,1615,770,488,1630,1613,1630,1635,1615,1615,1259,1259,1630,1636,1615,1631,770,770,1259,1615,1615,1615,1615,526,1636,1615,1615,1630,1615,1630,1630,1259,1630,547,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1631,1615,1615,1615,1615,1349,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1630,307,771,1615,1615,529,1615,1615,770,1615,1615,1615,1615,1615,770,1615,1615,1615,1615,1615,1631,1615,1615,1615,1660,1630,1615,1635,1615,1615,1615,1615,1615,1615,1615,1615,770,778,1630,1626,1626,488,778,1630,797,1630,1259,391,1259,391,1630,1613,391,1615,1350,1614,1350,1350,1346,1615,391,1615,1631,778,1630,535,1350,1350,1640,798,1633,1616,391,1630,1630,1259,1259,1630,1345,1613,1630,1630,778,1613,770,307,307,1259,1259,1630,1615,797,1630,770,1344,770,1613,770,488,1259,1346,1615,1630,1630,1630,1345,1346,1615,1617,1615,777,1259,1614,1630,1615,1350,1615,1615,1631,1631,1345,1630,1630,1630,1615,1630,1630,777,1636,1350,1635,1615,1615,1630,770,1630,543,1614,1613,1259,1615,1350,488,1259,1630,1635,779,1615,1259,1615,1344,1615,1615,1636,1346,1350,780,1615,545,1617,1351,307,770,1259,1350,487,288,1350,1350,1350,1635,1350,1615,1613,1615,1615,1259,770,1350,1259,1615,1615,1346,1615,1615,1615,1615,766,202,202,1631,1615,766,1615,1346,1615,766,766,1615,352,202,547,202,199,547,547,547,547,1615,202,1615,1616,202,202,202,1616,1615,202,1617,1615,1615,1616,1615,766,1615,1615,1615,1615,1617,1615,1617,1615,232,1615,1615,1615,1615,1346,766,1617,1346,1616,1615,1615,1616,1615,1615,766,1346,1615,766,1615,1615,1615,1616,547,1651,1631,1631,232,1616,1346,1631,1615,232,1631,1617,1616,1617,1616,202,766,1346,1615,1615,1630,1631,1635,1631,1631,1349,1631,1630,1630,1631,1630,1631,232,1631,387,1630,1615,1349,202,1617,1616,1616,1615,1615,1349,1615,547,1615,202,352,1345,1615,1616,1615,1615,1616,1615,1616,1617,1616,1615,1617,1616,766,1616,1615,1617,1615,1617,1346,1615,1615,1615,1354,1353,1346,232,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,770,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1346,1615,1615,1615,1615,1346,1615,1615,1615,1615,1615,1615,1615,1615,1346,1346,1346,1616,1616,1615,1615,232,232,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1631,1615,1615,307,1615,1630,1615,1615,1615,529,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,1615,770,1615,1615,1615,1615,1615,1615,1615,1615,397,1614,771,310,310,310,310,766,765,629,625,625,625,625,625,632,632,632,632,632,646,643,643,647,194,665,665,551,551,551,551,551,551,260,255,490,656,635,633,656,656,635,635,633,633,551,551,551,551,547,547,547,547,547,547,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,551,1345,551,551,551,551,551,765,656,635,633,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,544,472,310,484,548,310],"BlockState":"=0,2527","AliveCount":2527,"BlockStringData":["\r\n-- V7\r\n\r\n\r\n-- User-friendly settings:\r\n\r\n\r\n\r\n\r\n--      1. Select AI type on your craft:\r\n--                        '1' for Standard/Hybrid AI. Will take control from AI.\r\n--                        '2' for Breadboard AI. Will send commands via complex controls.\r\n--                        '3' use both for whatever unholy reasons.\r\n            TypeOfAiOnTheCraft = 2\r\n\r\n\r\n--      2. Run integration test and don't forget to set this to 0 after:\r\n--                        Set this to some time in seconds to run integration test. 10 seconds will do.\r\n--                        Set this to '0' to disable it afterwards.\r\n            IntegrationTestDuration = 0\r\n\r\n\r\n\r\n\r\n\r\n--  The end of user-friendly settings! \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--  Dimensions and margins\r\n            MaximumSizeOfEnemyShips = 300\r\n            MaximumSizeOfEnemyPlanes = 100\r\n            MaximumSizeOfEnemySubmarines = 100\r\n            MaximumSizeOfEnemyLandUnits = 50\r\n\r\n            SafeDistanceForShips = 350\r\n            SafeDistanceForPlanes = 100\r\n            SafeDistanceForSubmarines = 200\r\n            SafeDistanceForLandUnits = 100\r\n\r\n            ExtraDistanceForBeingFriendly = 25\r\n            \r\n            MaximumTimeForCoursePrediction = 15\r\n            ObstacleExclusionDistance = 1000                -- Only crafts closer than this will be considered for possible collision.\r\n\r\n\r\n-- Map and terrain\r\n            DoAvoidMapBorders = true               -- Set this to 'true' if your craft will be fighting on a map with limited area. \r\n                                                    -- Map will be scanned to find its borders, where terrain ends with the sharp drop to the seabed level.\r\n                                                    -- This feature intended for Arena-style maps.\r\n            MinimumDistanceFromBorder = 500\r\n            TimeToPredictBorderViolation = 5\r\n\r\n            ProbeAheadForTerrain = true             -- 'true' for you craft to bounce away from walls on arena or from slopes of regular terrain. 'false' to disable.\r\n            TimeToPredictTerrain = 10\r\n            AltitudeDifferenceToPanic = -30         -- Craft will turn away if the difference between CoM and terrain ahead are this big.\r\n                                                    -- E.g. >0 - hill/wall for tanks, <0 - safe depth for ship.\r\n            ProbeForTerrainIfPlane = true\r\n            SendPitchUpIfTerrainAhead = true         -- In addition to turning left/right, will try to go up if 'true'. 'false' to disable.\r\n            \r\n            MinimumTerrainAltitudeToBeLandMap = -10     -- If altitude around center of the map is more than this - map will be treated as \"Land map\"\r\n                                                        --      and everything that is too low for \"Plane\" and too high for \"Submarine\"\r\n                                                        --      will be treated as \"Land Unit\", instead of being \"Ship\".\r\n\r\n\r\n--  Definition for Classes\r\n            AltitudeToBePlane = 20                -- Altitude (above average height of map center) at which crafts will be treated as planes.\r\n            \r\n            AltitudeToBeSubmarine = -11           -- Altitude at which crafts will be treated as submarines.\r\n            \r\n            TypeOfTheCraft = 1                    -- Type of the craft. Default - '1'.\r\n                                                  -- '1' for Automatic/Universal. Appropriate class will chosen based on current altitude.\r\n                                                  -- '2' for Surface: Ships, Water skimmers, Land units, etc.\r\n                                                  -- '3' for Planes.                \r\n                                                  -- '4' for Submarines.    \r\n\r\n\r\n-- Class segregation rules:\r\n            ShouldYourPlaneAvoidSurfaceCrafts = false\r\n            ShouldYourSurfaceCraftAvoidPlanes = false\r\n            ShouldYourSurfaceCraftAvoidSubmarines = false\r\n            ShouldYourSubmarineAvoidSurfaceCrafts = true\r\n            \r\n            DoCheckForCollisionWithEnemy = true             --  Leave this as 'true', unless you are building melee craft\r\n            DoCheckForCollisionWithFriendlies = true        --  or hate your own fleet\r\n            \r\n\r\n\r\n-- \"Gant\" algorithm tuning (by default it will be used on Planes and Submarines):\r\n            DisableUpAndDownCourseChange = false    -- If set to 'true' - craft will not change its altitude to avoid collision.\r\n            \r\n            UsePitchAltitudeLimit = true            -- If set to 'true' - craft will not change its altitude to avoid collision, \r\n                                                    --      if its altitude will be predicted outside of set safe limits.\r\n            \r\n            MinimumAltitudeForPlanePitchDown = 200\r\n            MaximumAltitudeForPlanePitchUp = 350\r\n            \r\n            MinimumAltitudeForSubmarinePitchDown = -200\r\n            MaximumAltitudeForSubmarinePitchUp = -100\r\n            \r\n            DownwardsSafetyFactor = 0.5             -- Multipliers for perceived safety for maneuvers. Set to '1' for fair assessment.\r\n            LeftSafetyFactor = 0.95\r\n\r\n\r\n--  Delays, in frames (1/40 of a second)\r\n            DelayBeforeTakingControlFromStandardAI = 10  -- To prevent small corrections to interfere with standard AI.\r\n            StartupDelay = 0         -- Increase it if you need more control after spawn.             \r\n\r\n\r\n--  Values for control axies, useful for standard AI\r\n            PropulsionRequestWhileAvoiding = 1\r\n            PropulsionRequestToStopOrReverse = 0.1\r\n            PropulsionRequestForYawRight = -1               -- Set this to '0' to disable the use of the control axis. \r\n            PropulsionRequestForPitchUp = 1                 -- Will not be overridden by roll-remap!\r\n\r\n            ChangeToYawDirectionWhileInReverse = 1              -- Set to -1 to invert yaw. Using reverse are not recommended!\r\n            MinimumDistanceToKeepReversing = 200                -- You craft will continue to reverse until it get this far from obstacle. \r\n\r\n--  Meaning of complex controls for commands, used for breadboard\r\n            CCCForYawRight = 8       -- K\r\n            CCCForYawLeft = 4        -- H\r\n            \r\n            CCCForPitchUp = 10       -- L\r\n            CCCForPitchDown = 9      -- O\r\n\r\n            CCCWhileAvoiding = 5     -- U\r\n            CCCToStopOrReverse = 6   -- J\r\n\r\n-- \"Don't mess with\" section (and i mean it!)\r\n            ActiveCraftsPerFrame = 3        -- This must be the same for all crafts in your fleet!\r\n                                            -- Defines how many instances of the script can be active on the crafts in your fleet during each frame.\r\n\r\n            ShowMessageForRunningAndWarnings = false\r\n\r\n            CourseChangeDegreesToLookForSafety = 30\r\n            \r\n            ForceUsageOfAlgorithm = \"Auto\"      --  'Auto' - Based on current class.\r\n                                                --  'Big Boy' - will use recorded turn rate to predict movement of obstacles.\r\n                                                --      Expensive, but capable of preventing pile-ups.\r\n                                                --      Intended for big ships and other not too wobbly or too pitchy crafts.\r\n                                                --  'Gnat' - will prob at the sides for less dangerous position, assuming instant turn.\r\n                                                --      Cheap, but good enough for maneuverable crafts.\r\n            AlgorithmForShip = \"Big Boy\"\r\n            AlgorithmForPlane = \"Gnat\"\r\n            AlgorithmForSubmarine = \"Gnat\"\r\n            AlgorithmForLandUnit = \"Big Boy\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--[[\r\n\r\n\r\n\r\n\r\nFirst shalt thou set type of AI, be that bread or standard.\r\nThen, shalt thou do no more, but do no less.\r\nSetting of the type shalt be the change thou shalt do,\r\n and the only change to the script shall be setting of the AI type.\r\nAny functions shalt thou not change, nor either unknown variables,\r\n excepting that thou set the AI type.\r\nAny change to the any function is right out.\r\nOnce the type of AI, being in the beginning of the script, be set,\r\n then all changes shall be ceased and no naughty collisions thou shalt suffer.\r\n \r\n \r\n\r\n\r\n\r\n]]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--                                      Don't touch the rest!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nCounterForDelayBeforeTakingControlFromStandardAI = 0\r\n\r\nFrameCounter = 0\r\nLastActiveFrame = 0\r\nNumberOfSkippedFrames = 1\r\n\r\nPreferredRight = true\r\nAggressiveForward = true\r\n\r\n--MaximumRateOfRotation = 25\r\n--MinimumRateOfRotation = 1\r\n\r\n--YawCommandMultiplier = 1\r\n--TryToOversaturateControlAxies = false\r\n\r\n\r\nDoInitializationOnStart = true\r\n\r\nConstructDimensions = Vector3(1, 1, 1)\r\nConstructSphericalHalfSize = 0\r\n\r\nFallBackForEnemySphericalHalfSize = MaximumSizeOfEnemyShips / 2\r\nDimensionsOfFriendlies = {}\r\nDimensionsOfEnemies = {}\r\nConstantForConstructId = -99\r\nConstantForEnemyId = -77\r\n\r\nLastFrameConstructVelocity = Vector3(0, 0, 0)\r\nLastFrameConstructPosition = Vector3(0, 10000, 0)\r\nConstructCurrentSpeed = 10\r\nConstructCurrentCourse = 0\r\nConstructMaxTurnRate = 10\r\nTimeNeededForConstructToReactSafely = 3\r\nLastFramePositionsAndVectors = {}\r\nRateOfRotationAndSpeed = {}\r\nDeclineOfRateOfRotation = 0.999        -- Redo\r\nDeclineOfSpeed = 0.9992\r\nEmaNumber = 0.1\r\nEmaNumberForConstructSpeed = 0.1\r\nEmaNumberForCourse = 0.15           -- As function of speed or something !!!\r\nEmaNumberForMaxCourse = 0.01\r\nEmaNumberForTurnRate = 0.1\r\nConstantForBigNumber = 999999\r\n\r\nConstantForFramesPerSecond = 40\r\n\r\nNumberOfFramesToPredictWith = 10\r\n\r\nConstructForwardsVelocityMagnitude = 0\r\n\r\nConstructHealthFractionWhenMaxSpeed = 1\r\nConstructHealthFractionWhenMaxTurnRate = 1\r\nConstructMaxSpeed = 0\r\nChangeInConstructHealthBeforeEvaluation = 0.98\r\n\r\nConstructMaxTurnRateLongAverage = 0\r\n\r\nPreviousCountForEnemiesAndFriendlies = 0\r\nPreviousCountForFriendlies = 0\r\nConstructPriorityNumber = 0\r\n\r\nDesiredYaw = 0\r\nDesiredForward = 0\r\nDesiredPitch = 0\r\n\r\nCounterForPollDelay = -99\r\nPollResultForPreviousFrame = 0\r\nVictoryInThePoll = false\r\nVictoryInThePollForPreviousFrame = false\r\n\r\n\r\nMapBorderPointX1 = -10000\r\nMapBorderPointZ1 = 10000\r\nMapBorderPointX2 = 10000\r\nMapBorderPointZ2 = -10000\r\n\r\nHasTheWorldMovedOn = false\r\n\r\nCurrentSafeDistance = SafeDistanceForShips\r\nCurrentTypeOfTheCraft = TypeOfTheCraft\r\nHeightOfMapCenter = 0\r\nIsItALandMap = false\r\n\r\nCurrentAlgorithm = \"Gnat\"\r\n\r\nfunction UpdateRotationAndSpeed(constructVelocity, newPositionsAndVectors)                             -- Need fix for angle at low speed?\r\n    local constructHealthFraction = I:GetHealthFraction()\r\n    \r\n    if constructVelocity.magnitude < 5 or (constructVelocity-LastFrameConstructVelocity).magnitude < 1 then\r\n        constructVelocity = LastFrameConstructVelocity\r\n    end\r\n\r\n    if constructVelocity.magnitude >= ConstructMaxSpeed then\r\n        ConstructMaxSpeed = ConstructMaxSpeed * (1 - EmaNumberForConstructSpeed) + constructVelocity.magnitude * EmaNumberForConstructSpeed\r\n        ConstructHealthFractionWhenMaxSpeed = constructHealthFraction\r\n    elseif constructHealthFraction <= ConstructHealthFractionWhenMaxSpeed * ChangeInConstructHealthBeforeEvaluation then\r\n        ConstructMaxSpeed = ConstructMaxSpeed - ConstructMaxSpeed * constructHealthFraction / ConstructHealthFractionWhenMaxSpeed / ConstantForFramesPerSecond * NumberOfSkippedFrames / 10\r\n    end    \r\n    \r\n    ConstructCurrentSpeed = math.max(1, ConstructCurrentSpeed * (1 - EmaNumber) + constructVelocity.magnitude * EmaNumber)            -- Reverse ??\r\n    \r\n    local constructTurnRate = Vector3.SignedAngle(constructVelocity, LastFrameConstructVelocity, Vector3.up) / NumberOfSkippedFrames\r\n    ConstructCurrentCourse = ConstructCurrentCourse * (1 - EmaNumberForCourse)\r\n            + constructTurnRate * ConstantForFramesPerSecond * EmaNumberForCourse\r\n    \r\n    ConstructMaxTurnRateLongAverage = ConstructMaxTurnRateLongAverage * (1 - EmaNumberForMaxCourse) + math.abs(constructTurnRate * ConstantForFramesPerSecond) * EmaNumberForMaxCourse\r\n    if ConstructMaxTurnRateLongAverage >= ConstructMaxTurnRate then\r\n        ConstructMaxTurnRate = ConstructMaxTurnRate * (1 - EmaNumberForCourse) + ConstructMaxTurnRateLongAverage * EmaNumberForCourse\r\n        ConstructHealthFractionWhenMaxTurnRate = constructHealthFraction\r\n    elseif (constructHealthFraction <= ConstructHealthFractionWhenMaxTurnRate * ChangeInConstructHealthBeforeEvaluation)\r\n            or (ConstructMaxTurnRate > ConstructMaxTurnRateLongAverage * 2) then\r\n        ConstructMaxTurnRate = ConstructMaxTurnRate - ConstructMaxTurnRate * constructHealthFraction / ConstructHealthFractionWhenMaxTurnRate / ConstantForFramesPerSecond * NumberOfSkippedFrames / 10\r\n    end\r\n\r\n    if math.abs(ConstructCurrentCourse) > ConstructMaxTurnRate then\r\n        ConstructCurrentCourse = ConstructCurrentCourse * 0.9\r\n    end\r\n\r\n    TimeNeededForConstructToReactSafely = math.min(math.max(90 / ConstructMaxTurnRate, 1), MaximumTimeForCoursePrediction)\r\n    \r\n    local newRateOfRotationAndSpeed = {}\r\n    for id, data in pairs(newPositionsAndVectors) do\r\n        if not LastFramePositionsAndVectors[id] then\r\n            RateOfRotationAndSpeed[id] = {Id = data.Id, CurrentCourse = 0, MaxSpeed = 1}\r\n            LastFramePositionsAndVectors[id] = {Id = data.Id, Position = data.Position, Velocity = data.Velocity}\r\n        end        \r\n        newRateOfRotationAndSpeed[id] = {\r\n            Id = data.Id,           \r\n            CurrentCourse = RateOfRotationAndSpeed[id].CurrentCourse * (1 - EmaNumberForCourse)\r\n                    + Vector3.SignedAngle(data.Velocity, LastFramePositionsAndVectors[id].Velocity, Vector3.up) * ConstantForFramesPerSecond * EmaNumberForCourse,\r\n            MaxSpeed = math.max(1, RateOfRotationAndSpeed[id].MaxSpeed * DeclineOfSpeed,\r\n                    RateOfRotationAndSpeed[id].MaxSpeed * (1 - EmaNumber) + data.Velocity.magnitude * EmaNumber)\r\n        }\r\n    end\r\n    RateOfRotationAndSpeed = newRateOfRotationAndSpeed\r\n    LastFrameConstructVelocity = constructVelocity\r\nend\r\n\r\n\r\nfunction GetSphericalHalfSize(id)\r\n    if id == ConstantForConstructId then\r\n        return ConstructSphericalHalfSize\r\n    end\r\n\r\n    if DimensionsOfEnemies[id] ~= nil then\r\n       -- DBG(\"DimensionsOfEnemies[id]: \".. DimensionsOfEnemies[id])\r\n        return DimensionsOfEnemies[id]                   \r\n    end    \r\n\r\n    if DimensionsOfFriendlies[id] ~= nil then\r\n      --  DBG(\"DimensionsOfFriendlies[id].MaxSphericalHalfSize: \".. DimensionsOfFriendlies[id].MaxSphericalHalfSize ..\"  id: \"..id)        \r\n        return DimensionsOfFriendlies[id].MaxSphericalHalfSize               \r\n    end\r\n\r\n    if id == ConstantForEnemyId then\r\n       -- DBG(\"Wrong size. id: \"..id)\r\n        return FallBackForEnemySphericalHalfSize                                           \r\n    end\r\n\r\n    UpdateFriendlySizes()\r\n    if DimensionsOfFriendlies[id] ~= nil then\r\n      --  DBG(\"New DimensionsOfFriendlies[id].MaxSphericalHalfSize: \".. DimensionsOfFriendlies[id].MaxSphericalHalfSize ..\"  id: \"..id)\r\n        return DimensionsOfFriendlies[id].MaxSphericalHalfSize                   \r\n    end    \r\n    \r\n    DBG(\"No Size! for  \"..id)\r\n    return FallBackForEnemySphericalHalfSize\r\nend\r\n\r\n\r\nfunction GetDistanceToObstacleSphere (constructPosition, obstaclePosition, obstacleId) \r\n    return (constructPosition - obstaclePosition).magnitude - ConstructSphericalHalfSize - GetSphericalHalfSize(obstacleId)\r\nend\r\n\r\n\r\nfunction CalculateFlybyDistanceAndTime(constructPosition, constructVelocity, obstaclePosition, obstacleVelocity, obstacleId)   \r\n    local currentSphericalDistance = GetDistanceToObstacleSphere(constructPosition, obstaclePosition, obstacleId)           -- Add id for frd     \r\n    local distanceVector = constructPosition - obstaclePosition    \r\n    local velocityProjection = Vector3.Dot(constructVelocity - obstacleVelocity, distanceVector) / distanceVector.magnitude\r\n    local timeToCloseTheDistance = (currentSphericalDistance / velocityProjection) * -1 \r\n    local predictedPositionForObstacle = obstaclePosition + obstacleVelocity * timeToCloseTheDistance            \r\n    local predictedPositionForConstruct = constructPosition + constructVelocity * timeToCloseTheDistance\r\n    local predictedDistance = GetDistanceToObstacleSphere(predictedPositionForConstruct, predictedPositionForObstacle, obstacleId)\r\n    return predictedDistance, timeToCloseTheDistance, currentSphericalDistance, predictedPositionForConstruct.y\r\nend\r\n\r\n\r\nfunction FindMinimalFlybyDistanceAndTime(constructPosition, constructVelocity, positionsAndVectors)\r\n    local minDistancePredicted = ConstantForBigNumber\r\n    local minTimePredicted = ConstantForBigNumber\r\n    local minDistance = ConstantForBigNumber\r\n    local constructNewAltitudeForClosest = 0\r\n    local closestObstacleId = 0 \r\n    \r\n    for id, data in pairs(positionsAndVectors) do\r\n            local distancePrediction, timePrediction, currentSphericalDistance, constructNewAltitude = CalculateFlybyDistanceAndTime(\r\n                                                            constructPosition, constructVelocity,\r\n                                                            data.Position, data.Velocity, data.Id)\r\n        if timePrediction < minTimePredicted and timePrediction > 0 then\r\n            minDistancePredicted = distancePrediction\r\n            minTimePredicted = timePrediction\r\n            constructNewAltitudeForClosest = constructNewAltitude\r\n        end\r\n        if currentSphericalDistance < minDistance then\r\n            minDistance = currentSphericalDistance\r\n            closestObstacleId = id\r\n        end\r\n     --   DBG(\"FB: id: \"..id..\" distancePrediction: \"..distancePrediction..\" timePrediction:\"..timePrediction..\" currentSphericalDistance: \"..currentSphericalDistance)\r\n    end\r\n    return minDistancePredicted, minTimePredicted, minDistance, closestObstacleId, constructNewAltitudeForClosest                  \r\nend\r\n\r\n\r\nfunction PredictFutureCircularPosition(travelTime, currentPosition, velocityVector, speed, rateOfTurn, currentCourse)           -- V3 math are FUUUCKING SLOOOOW!\r\n    local timeToChangeCourse = math.abs((currentCourse - rateOfTurn) / rateOfTurn)\r\n    local partialCourseChange = (rateOfTurn * (travelTime / timeToChangeCourse) + currentCourse) / 2\r\n\r\n    if travelTime < timeToChangeCourse then\r\n      --  return currentPosition + Quaternion.AngleAxis(medianCourse, Vector3.up) * velocityVector * (travelTime * 0.8)       -- Am i happy with this? \r\n        return currentPosition + Quaternion.AngleAxis(partialCourseChange, Vector3.up) * velocityVector.normalized * speed * (travelTime * 0.8)\r\n    end\r\n    \r\n    local medianCourse = (rateOfTurn + currentCourse) / 2\r\n    \r\n    travelTime = travelTime - timeToChangeCourse\r\n    local vectorFromStartToCenter = Quaternion(0, 0.70710676908493, 0, 0.70710676908493) * velocityVector.normalized * (speed * 180 / rateOfTurn /  math.pi)\r\n    local vectorFromCenterToPredictionPoint = Quaternion.AngleAxis(rateOfTurn * travelTime, Vector3.up) * (vectorFromStartToCenter * -1)\r\n    return currentPosition + Quaternion.AngleAxis(medianCourse, Vector3.up) * velocityVector * timeToChangeCourse\r\n            + vectorFromStartToCenter + vectorFromCenterToPredictionPoint\r\nend\r\n\r\n\r\nfunction CompareSafetyOfManeuversAndChooseDirectionOfTurn (timeNeededToReactSafely, numberOfFrames, constructPosition, constructVelocity, currentPositionsAndVectors)\r\n    local constructSpeed = ConstructCurrentSpeed\r\n    local constructCurrentCourse = ConstructCurrentCourse * -0.7\r\n    local constructHardRightCourse = ConstructMaxTurnRate * 0.7\r\n    local constructHardLeftCourse = ConstructMaxTurnRate * -0.7\r\n\r\n   -- DBG(\"L: \"..constructHardLeftCourse..\" C: \"..constructCurrentCourse..\" R: \"..constructHardRightCourse)\r\n\r\n    local minCurrentDistanceCurrentCourse, minFinalCurrentDistanceCurrentCourse = ConstantForBigNumber, ConstantForBigNumber\r\n    local minCurrentDistanceHardRightCourse, minFinalCurrentDistanceHardRightCourse = ConstantForBigNumber, ConstantForBigNumber\r\n    local minCurrentDistanceHardLeftCourse, minFinalCurrentDistanceHardLeftCourse = ConstantForBigNumber, ConstantForBigNumber\r\n\r\n    local averageDistanceCC, averageDistanceHR, averageDistanceHL = 0, 0, 0\r\n    \r\n    for currentFrame = 1, numberOfFrames do\r\n        local timeFrame = timeNeededToReactSafely / numberOfFrames * currentFrame\r\n\r\n        local constructPositionCurrentCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructCurrentCourse, constructCurrentCourse)\r\n        local constructPositionHardRightCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructHardRightCourse, constructCurrentCourse)\r\n        local constructPositionHardLeftCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructHardLeftCourse, constructCurrentCourse)\r\n\r\n        for id, data in pairs(currentPositionsAndVectors) do\r\n            local currentCourse = Get_TurnRate(id)\r\n            local obstaclePosition = PredictFutureCircularPosition (timeFrame, data.Position, data.Velocity, Get_Speed(id), currentCourse, currentCourse)\r\n            local fakeId = data.Id\r\n\r\n            local currentDistanceCurrentCourse = GetDistanceToObstacleSphere(constructPositionCurrentCourse, obstaclePosition, fakeId)\r\n            local currentDistanceHardRightCourse = GetDistanceToObstacleSphere(constructPositionHardRightCourse, obstaclePosition, fakeId)\r\n            local currentDistanceHardLeftCourse = GetDistanceToObstacleSphere(constructPositionHardLeftCourse, obstaclePosition, fakeId)\r\n\r\n            averageDistanceCC = averageDistanceCC + currentDistanceCurrentCourse                        -- Ignore by distance\r\n            averageDistanceHR = averageDistanceHR + currentDistanceHardRightCourse\r\n            averageDistanceHL = averageDistanceHL + currentDistanceHardLeftCourse\r\n            \r\n            if currentFrame == numberOfFrames then\r\n                if currentDistanceCurrentCourse < minFinalCurrentDistanceCurrentCourse then\r\n                    minFinalCurrentDistanceCurrentCourse = currentDistanceCurrentCourse\r\n                end\r\n                if currentDistanceHardRightCourse < minFinalCurrentDistanceHardRightCourse then\r\n                    minFinalCurrentDistanceHardRightCourse = currentDistanceHardRightCourse\r\n                end\r\n                if currentDistanceHardLeftCourse < minFinalCurrentDistanceHardLeftCourse then\r\n                    minFinalCurrentDistanceHardLeftCourse = currentDistanceHardLeftCourse\r\n                end\r\n            else\r\n                if currentDistanceCurrentCourse < minCurrentDistanceCurrentCourse then\r\n                    minCurrentDistanceCurrentCourse = currentDistanceCurrentCourse\r\n                end\r\n                if currentDistanceHardRightCourse < minCurrentDistanceHardRightCourse then\r\n                    minCurrentDistanceHardRightCourse = currentDistanceHardRightCourse\r\n                end\r\n                if currentDistanceHardLeftCourse < minCurrentDistanceHardLeftCourse then\r\n                    minCurrentDistanceHardLeftCourse = currentDistanceHardLeftCourse\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n    end\r\n\r\n    averageDistanceCC = averageDistanceCC / numberOfFrames\r\n    averageDistanceHR = averageDistanceHR / numberOfFrames\r\n    averageDistanceHL = averageDistanceHL / numberOfFrames\r\n--[[\r\n    DBG(\"minCurrentDistanceHardLeftCourse: \"..minCurrentDistanceHardLeftCourse\r\n            ..\" minCurrentDistanceCurrentCourse: \"..minCurrentDistanceCurrentCourse\r\n            ..\" minCurrentDistanceHardRightCourse: \"..minCurrentDistanceHardRightCourse)\r\n    DBG(\"minFinalCurrentDistanceHardLeftCourse: \"..minFinalCurrentDistanceHardLeftCourse\r\n            ..\" minFinalCurrentDistanceCurrentCourse: \"..minFinalCurrentDistanceCurrentCourse\r\n            ..\" minFinalCurrentDistanceHardRightCourse: \"..minFinalCurrentDistanceHardRightCourse)\r\n    DBG(\"averageDistanceHL: \"..averageDistanceHL\r\n            ..\" averageDistanceCC: \"..averageDistanceCC\r\n            ..\" averageDistanceHR: \"..averageDistanceHR)\r\n\r\n    ]]\r\n    local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n    local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n    local YawDirectionSign = 1\r\n    if ConstructForwardsVelocityMagnitude < 0 then                                          -- Redo!\r\n        propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n        PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n        YawDirectionSign = ChangeToYawDirectionWhileInReverse\r\n    end\r\n    \r\n    if AggressiveForward \r\n            and minFinalCurrentDistanceCurrentCourse > CurrentSafeDistance and (minCurrentDistanceCurrentCourse > CurrentSafeDistance\r\n            or (minCurrentDistanceCurrentCourse > 0 and averageDistanceCC > averageDistanceHL and averageDistanceCC > averageDistanceHR))\r\n       --     and minCurrentDistanceCurrentCourse > minCurrentDistanceHardLeftCourse and minCurrentDistanceCurrentCourse > minCurrentDistanceHardRightCourse \r\n    then    \r\n        DBG(\"It's fine!\")\r\n        return 0, 0, 0\r\n    end\r\n    \r\n    if PreferredRight and minFinalCurrentDistanceHardRightCourse > CurrentSafeDistance and minCurrentDistanceHardRightCourse > 0 \r\n        and averageDistanceHR > averageDistanceHL\r\n    then\r\n        DBG(\"Preferred Right.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse and\r\n            minFinalCurrentDistanceHardRightCourse > CurrentSafeDistance and\r\n            minCurrentDistanceHardRightCourse > 0 then\r\n        DBG(\"Go right. Safe.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardLeftCourse > minFinalCurrentDistanceHardRightCourse and\r\n            minFinalCurrentDistanceHardLeftCourse > CurrentSafeDistance and\r\n            minCurrentDistanceHardLeftCourse > 0 then\r\n        DBG(\"Go left. Safe.\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardRightCourse < 0 and minFinalCurrentDistanceHardLeftCourse < 0 then\r\n        if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse then\r\n        --if minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse then\r\n            DBG(\"Right. Unsafe!\")\r\n            return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n        else\r\n            DBG(\"Left. Unsafe!\")\r\n            return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0  \r\n        end\r\n    end\r\n \r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse\r\n            and minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse\r\n    then\r\n        DBG(\"Right. Unsafe 2!\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n    if minFinalCurrentDistanceHardLeftCourse > minFinalCurrentDistanceHardRightCourse\r\n            and minCurrentDistanceHardLeftCourse > minCurrentDistanceHardRightCourse\r\n    then    \r\n        DBG(\"Left. Unsafe 2!\")\r\n         return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n        \r\n    end\r\n\r\n    if  averageDistanceHR > averageDistanceHL\r\n            and minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse then\r\n        DBG(\"Right. Unsafe 3 !\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0    \r\n    end\r\n    if averageDistanceHL > averageDistanceHR\r\n            and minCurrentDistanceHardLeftCourse > minCurrentDistanceHardRightCourse then\r\n        DBG(\"Left. Unsafe 3 !\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n    \r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse then\r\n        DBG(\"Attaque! Right.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\n    else\r\n        DBG(\"Attaque! Left.\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, PropulsionRequestReverse, 0\r\n    end\r\n\r\n    return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\nend\r\n\r\n\r\nfunction GetConstructRoll(constructForwardVector, constructUpVector)\r\n    local constructYawRaw = math.atan2(constructForwardVector.z, constructForwardVector.x);\r\n    local constructRoll = math.asin(constructUpVector.x * math.sin(constructYawRaw) - constructUpVector.z * math.cos(constructYawRaw));\r\n    if(constructUpVector.y < 0) then\r\n        if constructRoll < 0 then\r\n            constructRoll = -1 * math.pi - constructRoll\r\n        else\r\n            constructRoll = 1 * math.pi - constructRoll\r\n        end\r\n    end\r\n    return constructRoll * 180 / math.pi * -1  \r\nend\r\n\r\n\r\nfunction CompareSafetyOfManeuversAndChooseDirectionOfTurnForPlane(constructPosition, constructVelocity, newPositionsAndVectors, timeToCollision)\r\n    local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n    local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n    local YawDirectionSign = 1\r\n    if ConstructForwardsVelocityMagnitude < 0 then                                          -- Redo!\r\n        propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n        PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n        YawDirectionSign = ChangeToYawDirectionWhileInReverse\r\n    end\r\n\r\n   -- DBG(\"YawDirectionSign: \"..YawDirectionSign)\r\n    \r\n    local desiredYaw, desiredForward, desiredPitch = 0, 0, 0\r\n\r\n    local constructRightVector = I:GetConstructRightVector()\r\n    local constructUpVector = I:GetConstructUpVector()\r\n    local constructForwardVector = I:GetConstructForwardVector()\r\n    \r\n\r\n    local constructRollRounded = Mathf.Round(GetConstructRoll(constructForwardVector, constructUpVector) / 90) * 90\r\n    \r\n    local angleStep = CourseChangeDegreesToLookForSafety    \r\n    local angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight = 1, 1, 1, 1\r\n\r\n    if constructRollRounded == 0 then\r\n        angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight\r\n            = -1, DownwardsSafetyFactor, -1 * LeftSafetyFactor, 1\r\n    end\r\n    if constructRollRounded == -90 then\r\n        angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight\r\n        = -1, 1 * LeftSafetyFactor, -1, DownwardsSafetyFactor\r\n    end\r\n    if constructRollRounded == 90 then\r\n        angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight\r\n        = -1 * LeftSafetyFactor, 1, -1 * DownwardsSafetyFactor, 1\r\n    end    \r\n    if constructRollRounded == -180 or constructRollRounded == 180 then\r\n        angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight\r\n        = -1 * DownwardsSafetyFactor, 1, -1, 1 * LeftSafetyFactor\r\n    end\r\n    \r\n    local minDistancePredictedUp, minTimePredictedUp, currentDistanceUp, closestObstacleIdUp, constructNewAltitudeUp\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * angleStepRemapMultiplierUp, constructRightVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedDown, minTimePredictedDown, currentDistanceDown, closestObstacleIdDown, constructNewAltitudeDown\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * angleStepRemapMultiplierDown, constructRightVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedLeft, minTimePredictedLeft, currentDistanceLeft, closestObstacleIdLeft, constructNewAltitudeLeft\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * angleStepRemapMultiplierLeft, constructUpVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedRight, minTimePredictedRight, currentDistanceRight, closestObstacleIdRight, constructNewAltitudeRight\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * angleStepRemapMultiplierRight, constructUpVector) * constructVelocity, newPositionsAndVectors)\r\n    \r\n    local MinimumAltitudeForPitchDown = MinimumAltitudeForSubmarinePitchDown\r\n    local MaximumAltitudeForPitchUp = MaximumAltitudeForPlanePitchUp\r\n    if CurrentTypeOfTheCraft == 3 then\r\n        MinimumAltitudeForPitchDown = MinimumAltitudeForPlanePitchDown\r\n        MaximumAltitudeForPitchUp = MaximumAltitudeForPlanePitchUp      \r\n    end\r\n    if CurrentTypeOfTheCraft == 4 then\r\n        MinimumAltitudeForPitchDown = MinimumAltitudeForSubmarinePitchDown\r\n        MaximumAltitudeForPitchUp = MaximumAltitudeForSubmarinePitchUp\r\n    end\r\n\r\n    if DisableUpAndDownCourseChange then\r\n        MinimumAltitudeForPitchDown = 10000\r\n        MaximumAltitudeForPitchUp = -10000\r\n        UsePitchAltitudeLimit = true\r\n    end\r\n    \r\n    \r\n    if desiredPitch == 0 then\r\n        if minDistancePredictedDown > minDistancePredictedUp then\r\n            desiredPitch = PropulsionRequestForPitchUp * -1\r\n            DBG(\"Down.\")\r\n            if UsePitchAltitudeLimit\r\n                and ( (constructRollRounded == 0 and constructNewAltitudeDown < MinimumAltitudeForPitchDown)\r\n                    or ((constructRollRounded == -180 or constructRollRounded == 180) and constructNewAltitudeDown > MaximumAltitudeForPitchUp) ) then\r\n                desiredPitch = 0\r\n           --     DBG(\"Pitch limit.  constructNewAltitudeDown: \"..constructNewAltitudeDown)\r\n            end\r\n        else\r\n            desiredPitch = PropulsionRequestForPitchUp\r\n            DBG(\"Up.\")\r\n            if UsePitchAltitudeLimit\r\n                and ( (constructRollRounded == 0 and constructNewAltitudeUp > MaximumAltitudeForPitchUp)\r\n                    or ((constructRollRounded == -180 or constructRollRounded == 180) and constructNewAltitudeUp < MinimumAltitudeForPitchDown) ) then\r\n                desiredPitch = 0\r\n        --        DBG(\"Pitch limit.  constructNewAltitudeUp: \"..constructNewAltitudeUp)\r\n            end\r\n        end\r\n        if minTimePredictedUp < timeToCollision and minTimePredictedDown < timeToCollision then\r\n            desiredForward = PropulsionRequestReverse\r\n       --     DBG(\"Close U/D.\")\r\n        else\r\n            desiredForward = propulsionRequestForward        \r\n        end\r\n    end\r\n    \r\n    if desiredYaw == 0 then\r\n        if minDistancePredictedRight > minDistancePredictedLeft then\r\n            desiredYaw = PropulsionRequestForYawRight * YawDirectionSign\r\n            DBG(\"Right\")\r\n            if UsePitchAltitudeLimit\r\n                and ( (constructRollRounded == 90 and constructNewAltitudeRight > MaximumAltitudeForPitchUp)\r\n                    or (constructRollRounded == -90 and constructNewAltitudeRight < MinimumAltitudeForPitchDown) ) then\r\n                desiredYaw = 0\r\n            --    DBG(\"Yaw limit.  constructNewAltitudeRight: \"..constructNewAltitudeRight)\r\n            end\r\n        else\r\n            desiredYaw = PropulsionRequestForYawRight * YawDirectionSign * -1\r\n            DBG(\"Left\")\r\n            if UsePitchAltitudeLimit\r\n                and ( (constructRollRounded == 90 and constructNewAltitudeLeft < MinimumAltitudeForPitchDown)\r\n                    or (constructRollRounded == -90 and constructNewAltitudeLeft > MaximumAltitudeForPitchUp) ) then\r\n                desiredYaw = 0\r\n           --     DBG(\"Yaw limit.  constructNewAltitudeLeft: \"..constructNewAltitudeLeft)\r\n            end\r\n        end\r\n        if minTimePredictedLeft < timeToCollision and minTimePredictedRight < timeToCollision then\r\n            desiredForward = PropulsionRequestReverse\r\n           -- DBG(\"Close L/R.\")\r\n        else\r\n            desiredForward = propulsionRequestForward\r\n        end\r\n    end\r\n    \r\n    return desiredYaw, desiredForward, desiredPitch\r\nend\r\n\r\n\r\nfunction SetPriorityNumberAndCountFriendlies ()\r\n    local result = 0\r\n    local count = 1\r\n    local FriendlyIds = {}\r\n    local constructId = I:GetUniqueId()\r\n    table.insert (FriendlyIds, constructId)\r\n    for i = 0, I:GetFriendlyCount() - 1, 1 do\r\n        table.insert (FriendlyIds, I:GetFriendlyInfo(i).Id)\r\n        count = count + 1\r\n    end\r\n    \r\n    table.sort(FriendlyIds, function(a,b) return a<b end)\r\n\r\n    for _, data in pairs(FriendlyIds) do\r\n        if constructId == data then\r\n            break\r\n        end        \r\n        result = result + 1\r\n    end\r\n\r\n    PreviousCountForFriendlies = count\r\n    ConstructPriorityNumber = result\r\nend\r\n\r\n\r\nfunction ShouldItBeAvoided(constructPosition, position)\r\n\r\n    local typeOfEnemy = GetTypeOfUnitFromAltitude (position)\r\n\r\n  --  DBG(\"ShouldItBeAvoided. \"..PV(position-constructPosition))\r\n\r\n    if (position - constructPosition).magnitude < ObstacleExclusionDistance then\r\n        \r\n        if typeOfEnemy == CurrentTypeOfTheCraft then\r\n            return true\r\n        end\r\n        \r\n        if CurrentTypeOfTheCraft == 2 and ShouldYourSurfaceCraftAvoidPlanes and typeOfEnemy == 3 then\r\n            return true\r\n        end\r\n\r\n        if CurrentTypeOfTheCraft == 2 and ShouldYourSurfaceCraftAvoidSubmarines and typeOfEnemy == 4 then\r\n            return true\r\n        end\r\n\r\n        if CurrentTypeOfTheCraft == 3 and ShouldYourPlaneAvoidSurfaceCrafts and typeOfEnemy == 2 then\r\n            return true\r\n        end\r\n\r\n        if CurrentTypeOfTheCraft == 4 and ShouldYourSubmarineAvoidSurfaceCrafts and typeOfEnemy == 2 then\r\n            return true\r\n        end\r\n    end\r\n    \r\n --   DBG(\"ShouldItBeAvoided. false !!\")\r\n    \r\n    return false\r\nend\r\n\r\n\r\nfunction GetBorderViolationMetric  (constructPosition, constructVelocity)\r\n    local newPosition = constructPosition + constructVelocity * TimeToPredictBorderViolation\r\n    local north = newPosition.z - MapBorderPointZ1\r\n    local south = (newPosition.z - MapBorderPointZ2) * -1\r\n    local west = (newPosition.x - MapBorderPointX1) * -1\r\n    local east = newPosition.x - MapBorderPointX2\r\n\r\n  --  DBG(\"north: \"..north..\" south: \"..south..\" west: \"..west..\" east: \"..east)    \r\n    \r\n    return math.max(north, south, west, east)    \r\nend\r\n\r\n\r\nfunction CheckForBorderViolation (constructPosition, constructVelocity)\r\n  --  local newPosition = constructPosition + constructVelocity * TimeToPredictBorderViolation\r\n\r\n --   DBG(\"I:GetConstructYaw(): \"..I:GetConstructYaw())\r\n    local currentViolation = GetBorderViolationMetric(constructPosition, constructVelocity)\r\n    \r\n --   DBG(\"currentViolation: \"..currentViolation)\r\n\r\n\r\n    if currentViolation>0 then\r\n        local angleStep = CourseChangeDegreesToLookForSafety\r\n\r\n       -- local constructRightVector = I:GetConstructRightVector()\r\n      --  local constructUpVector = I:GetConstructUpVector()        \r\n        \r\n        \r\n        local rightTurnViolation = GetBorderViolationMetric(constructPosition, Quaternion.AngleAxis(angleStep --[[ *angleStepRemapMultiplierUp]], Vector3.up) * constructVelocity)\r\n        local leftTurnViolation = GetBorderViolationMetric(constructPosition, Quaternion.AngleAxis(angleStep * -1--[[ *angleStepRemapMultiplierUp]], Vector3.up) * constructVelocity)\r\n        DBG(\"rightTurnViolation: \"..rightTurnViolation..\" leftTurnViolation: \"..leftTurnViolation)\r\n\r\n        local turnDirectionSign = 1\r\n        \r\n        if rightTurnViolation < leftTurnViolation then\r\n            DBG(\"Turning right from border!\")\r\n            turnDirectionSign = 1\r\n        else\r\n            DBG(\"Turning left from border!\")\r\n            turnDirectionSign = -1\r\n        end\r\n\r\n        \r\n        local constructUpVector = I:GetConstructUpVector()\r\n        local constructForwardVector = I:GetConstructForwardVector()\r\n        local constructRollRounded = Mathf.Round(GetConstructRoll(constructForwardVector, constructUpVector) / 90) * 90\r\n\r\n        if constructRollRounded == 0 then\r\n            return PropulsionRequestForYawRight * turnDirectionSign, 0\r\n        end\r\n        if constructRollRounded == -90 then\r\n            return 0, PropulsionRequestForPitchUp * turnDirectionSign                                       -- check roll sign!\r\n        end\r\n        if constructRollRounded == 90 then\r\n            return 0, PropulsionRequestForPitchUp * turnDirectionSign * -1\r\n        end\r\n        if constructRollRounded == -180 or constructRollRounded == 180 then\r\n            return PropulsionRequestForYawRight * turnDirectionSign * -1, 0\r\n        end\r\n        \r\n    end\r\n    \r\n    return 0, 0\r\nend\r\n\r\n\r\nfunction CheckForWorldShift (constructPosition, lastFrameConstructPosition, constructVelocity)\r\n    if (constructPosition - lastFrameConstructPosition).magnitude / (constructVelocity.magnitude * NumberOfSkippedFrames / 40 ) > 100 then\r\n      --  I:LogToHud(\"World Shift! Xc:\" .. Mathf.Round((MapBorderPointX1+MapBorderPointX2)/2)..\" Zc: \"..Mathf.Round((MapBorderPointZ1+MapBorderPointZ2)/2))\r\n        return true\r\n    else    \r\n        return false\r\n    end\r\nend\r\n\r\n\r\n\r\nfunction FindMapBorderPoints(anyTerrainX, anyTerrainZ, farFarAway)\r\n\r\n    function FindBorderLine(lastTerrainPoint, lastSeabedPoint, seabedDepth, direction, otherCoordinate)\r\n        --local lastTerrainPoint-lastSeabedPoint\r\n        --  I:Log(\"lastTerrainPoint: \"..lastTerrainPoint..\"  lastSeabedPoint: \"..lastSeabedPoint)\r\n        if (lastSeabedPoint - lastTerrainPoint) <= 1 and (lastSeabedPoint - lastTerrainPoint) >= -1 then\r\n            return lastTerrainPoint\r\n        else\r\n            local newPoint = lastTerrainPoint + (lastSeabedPoint - lastTerrainPoint)/2\r\n            local depth = 0\r\n            if direction == \"NS\" then\r\n                depth = I:GetTerrainAltitudeForPosition(otherCoordinate, 0, newPoint)\r\n            else\r\n                depth = I:GetTerrainAltitudeForPosition(newPoint, 0, otherCoordinate)\r\n            end\r\n\r\n            if depth == seabedDepth then\r\n                return FindBorderLine(lastTerrainPoint, newPoint, seabedDepth, direction, otherCoordinate)\r\n            else\r\n                return FindBorderLine(newPoint, lastSeabedPoint, seabedDepth, direction, otherCoordinate)\r\n            end\r\n\r\n        end\r\n    end\r\n\r\n    local seabedDepth = I:GetTerrainAltitudeForPosition(farFarAway, 0, farFarAway)\r\n  --  I:Log(\"seabedDepth: \"..seabedDepth)\r\n    --[[ I:Log(\"zE: \"..FindBorderLine(anyTerrainX, farFarAway, seabedDepth, \"WE\", anyTerrainZ))\r\n     I:Log(\"zW: \"..FindBorderLine(anyTerrainX, -farFarAway, seabedDepth, \"WE\", anyTerrainZ))\r\n     I:Log(\"zN: \"..FindBorderLine(anyTerrainZ, farFarAway, seabedDepth, \"NS\", anyTerrainX))\r\n     I:Log(\"zS: \"..FindBorderLine(anyTerrainZ, -farFarAway, seabedDepth, \"NS\", anyTerrainX))\r\n     ]]\r\n    return FindBorderLine(anyTerrainX, -farFarAway, seabedDepth, \"WE\", anyTerrainZ) + MinimumDistanceFromBorder,\r\n    FindBorderLine(anyTerrainZ, farFarAway, seabedDepth, \"NS\", anyTerrainX) - MinimumDistanceFromBorder,\r\n    FindBorderLine(anyTerrainX, farFarAway, seabedDepth, \"WE\", anyTerrainZ) - MinimumDistanceFromBorder,\r\n    FindBorderLine(anyTerrainZ, -farFarAway, seabedDepth, \"NS\", anyTerrainX) + MinimumDistanceFromBorder\r\n\r\nend\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction CheckForTerrainAhead (constructPosition, constructVelocity)\r\n   -- local newPosition = constructPosition + constructVelocity * TimeToPredictBorderViolation\r\n    \r\n    local constructForwardVector = I:GetConstructForwardVector()\r\n  \r\n\r\n    local altitudeOfTerrainAhead = I:GetTerrainAltitudeForPosition(constructPosition + constructVelocity * TimeToPredictTerrain)\r\n    local altitudeOfTerrainCloseAhead = I:GetTerrainAltitudeForPosition(constructPosition + constructVelocity * 1)  \r\n\r\n --   DBG(\"constructPosition.y: \"..constructPosition.y..\"  altitudeOfTerrainAhead: \"..altitudeOfTerrainAhead..\"  altitudeOfTerrainCloseAhead: \"..altitudeOfTerrainCloseAhead)\r\n\r\n\r\n    if ((altitudeOfTerrainAhead - AltitudeDifferenceToPanic) > constructPosition.y)\r\n            or ((altitudeOfTerrainCloseAhead - AltitudeDifferenceToPanic) > constructPosition.y) then\r\n        \r\n        local angleStep = CourseChangeDegreesToLookForSafety\r\n\r\n        local rightTurnTerrainAltitude = I:GetTerrainAltitudeForPosition(constructPosition + Quaternion.AngleAxis(angleStep, Vector3.up) * constructVelocity * TimeToPredictTerrain)\r\n        local leftTurnTerrainAltitude = I:GetTerrainAltitudeForPosition(constructPosition + Quaternion.AngleAxis(angleStep * -1, Vector3.up) * constructVelocity * TimeToPredictTerrain)\r\n        DBG(\"rightTurnTerrainAltitude: \"..rightTurnTerrainAltitude..\" leftTurnTerrainAltitude: \"..leftTurnTerrainAltitude)\r\n\r\n        \r\n        local turnDirectionSign = 1\r\n        local desiredPitch = 0\r\n        \r\n        if SendPitchUpIfTerrainAhead then\r\n            desiredPitch = PropulsionRequestForPitchUp\r\n        end\r\n        \r\n        if rightTurnTerrainAltitude < leftTurnTerrainAltitude then\r\n            DBG(\"Turning right from terrain!\")\r\n            turnDirectionSign = 1\r\n        else\r\n            DBG(\"Turning left from terrain!\")\r\n            turnDirectionSign = -1            \r\n        end\r\n\r\n\r\n        local constructUpVector = I:GetConstructUpVector()\r\n\r\n        local constructRollRounded = Mathf.Round(GetConstructRoll(constructForwardVector, constructUpVector) / 90) * 90\r\n\r\n        if constructRollRounded == 0 then\r\n            return PropulsionRequestForYawRight * turnDirectionSign, desiredPitch\r\n        end\r\n        if constructRollRounded == -90 then\r\n            return PropulsionRequestForYawRight * -1, PropulsionRequestForPitchUp * turnDirectionSign                                       -- check roll sign!\r\n        end\r\n        if constructRollRounded == 90 then\r\n            return PropulsionRequestForYawRight, PropulsionRequestForPitchUp * turnDirectionSign * -1\r\n        end\r\n        if constructRollRounded == -180 or constructRollRounded == 180 then\r\n            return PropulsionRequestForYawRight * turnDirectionSign * -1, desiredPitch * -1\r\n        end\r\n\r\n    end\r\n\r\n    return 0, 0\r\nend\r\n\r\n\r\n\r\nfunction GetTypeOfUnitFromAltitude(constructPosition)\r\n    local altitude = constructPosition.y\r\n    \r\n --   DBG(\"altitude: \"..altitude..\"  HeightOfMapCenter: \"..HeightOfMapCenter..\"  AltitudeToBePlane: \"..AltitudeToBePlane..\"  AltitudeToBeSubmarine: \"..AltitudeToBeSubmarine)\r\n    \r\n    if altitude > AltitudeToBePlane + HeightOfMapCenter then\r\n        return 3\r\n    elseif altitude < AltitudeToBeSubmarine then\r\n        return 4    \r\n    else    \r\n        return 2\r\n    end\r\nend\r\n\r\n\r\nfunction DetectAndAvoidCollision()\r\n\r\n\r\n    local constructPosition = I:GetConstructCenterOfMass()\r\n    local constructVelocity = I:GetVelocityVector()\r\n    --constructVelocity.y=0                                                             -- Should it stay or should it go ??\r\n\r\n    HasTheWorldMovedOn = CheckForWorldShift(constructPosition, LastFrameConstructPosition, constructVelocity)                       -- remove for borderless maps??\r\n\r\n    if TypeOfTheCraft == 1 then\r\n        CurrentTypeOfTheCraft = GetTypeOfUnitFromAltitude (constructPosition)\r\n        UpdateCurrentSafeDistance (CurrentTypeOfTheCraft)\r\n    end\r\n\r\n    if ForceUsageOfAlgorithm == \"Auto\" then\r\n        if CurrentTypeOfTheCraft == 2 and IsItALandMap then\r\n            CurrentAlgorithm = AlgorithmForLandUnit            \r\n        else    \r\n            CurrentAlgorithm = AlgorithmForShip\r\n        end\r\n        if CurrentTypeOfTheCraft == 3 then\r\n            CurrentAlgorithm = AlgorithmForPlane\r\n        end\r\n        if CurrentTypeOfTheCraft == 4 then\r\n            CurrentAlgorithm = AlgorithmForSubmarine\r\n        end        \r\n    end\r\n    \r\n    \r\n --   DBG(\"CurrentTypeOfTheCraft: \"..CurrentTypeOfTheCraft)\r\n\r\n    if HasTheWorldMovedOn and DoAvoidMapBorders then\r\n        MapBorderPointX1, MapBorderPointZ1, MapBorderPointX2, MapBorderPointZ2 = FindMapBorderPoints(constructPosition.x, constructPosition.z, 20000)\r\n    end\r\n\r\n  --  DBG(\"X1: \"..MapBorderPointX1..\" Z1: \"..MapBorderPointZ1..\"   X2: \"..MapBorderPointX2..\" Z2: \"..MapBorderPointZ2)\r\n    --DBG(\"Xc:\" .. Mathf.Round((MapBorderPointX1+MapBorderPointX2)/2)..\" Zc: \"..Mathf.Round((MapBorderPointZ1+MapBorderPointZ2)/2))\r\n  --  DBG(\"Xc:\" .. Mathf.Round((MapBorderPointX1+MapBorderPointX2)/2)..\" Zc: \"..Mathf.Round((MapBorderPointZ1+MapBorderPointZ2)/2)..\"   X1: \"..MapBorderPointX1..\" Z1: \"..MapBorderPointZ1..\"   X2: \"..MapBorderPointX2..\" Z2: \"..MapBorderPointZ2)\r\n    local friendlyCount = I:GetFriendlyCount()\r\n    local enemyCount = I:GetNumberOfTargets(0)\r\n\r\n    if (friendlyCount + 1) ~= PreviousCountForFriendlies then\r\n        SetPriorityNumberAndCountFriendlies()        \r\n    end\r\n\r\n    \r\n    ConstructForwardsVelocityMagnitude = I:GetForwardsVelocityMagnitude()\r\n    local newPositionsAndVectors = {}                                 \r\n                                                                        \r\n    if DoCheckForCollisionWithFriendlies then\r\n        for i = 0, friendlyCount - 1, 1 do\r\n            local infoForObstacle = I:GetFriendlyInfo(i)\r\n            if ShouldItBeAvoided(constructPosition, infoForObstacle.CenterOfMass) then\r\n                newPositionsAndVectors[infoForObstacle.Id] = {\r\n                    Id = infoForObstacle.Id,\r\n                    Position = infoForObstacle.CenterOfMass,\r\n                    Velocity = infoForObstacle.Velocity\r\n                }\r\n            end\r\n        end\r\n    end\r\n\r\n    local enemyType = 0\r\n    if DoCheckForCollisionWithEnemy then\r\n        for i = 0, enemyCount - 1, 1 do\r\n            local infoForObstacle = I:GetTargetInfo(0, i)\r\n            if ShouldItBeAvoided(constructPosition, infoForObstacle.Position) then\r\n                \r\n                enemyType = GetTypeOfUnitFromAltitude (infoForObstacle.Position)\r\n                if enemyType == 2 then\r\n                    DimensionsOfEnemies[infoForObstacle.Id] = MaximumSizeOfEnemyShips / 2 \r\n                elseif enemyType == 3 then\r\n                    DimensionsOfEnemies[infoForObstacle.Id] = MaximumSizeOfEnemyPlanes / 2\r\n                elseif enemyType == 4 then\r\n                    DimensionsOfEnemies[infoForObstacle.Id] = MaximumSizeOfEnemySubmarines / 2                    \r\n                else\r\n                    DimensionsOfEnemies[infoForObstacle.Id] = MaximumSizeOfEnemyShips / 2\r\n                end\r\n                \r\n                newPositionsAndVectors[infoForObstacle.Id] = {                                \r\n                   -- Id = ConstantForEnemyId, --infoForObstacle.Id,                           -- Deplorable! \r\n                    Id = infoForObstacle.Id,\r\n                    Position = infoForObstacle.Position,\r\n                    Velocity = infoForObstacle.Velocity\r\n                }\r\n            end            \r\n        end\r\n    end\r\n\r\n    --DBG(\"Obstacles in play: \"..GetLengthOfTable(newPositionsAndVectors))\r\n\r\n    UpdateRotationAndSpeed(constructVelocity, newPositionsAndVectors)                                       -- Need some love\r\n    LastFramePositionsAndVectors = newPositionsAndVectors\r\n    LastFrameConstructPosition = constructPosition\r\n\r\n\r\n    if DoAvoidMapBorders then\r\n        local yawFromBorder, pitchFromBorder = CheckForBorderViolation(constructPosition, constructVelocity)\r\n        if yawFromBorder ~= 0 or pitchFromBorder ~= 0 then                                                           -- reverse?!?\r\n            \r\n            return yawFromBorder, PropulsionRequestWhileAvoiding, pitchFromBorder\r\n        end\r\n    end\r\n    \r\n\r\n    if ProbeAheadForTerrain and ((CurrentTypeOfTheCraft ~= 3) or (ProbeForTerrainIfPlane and CurrentTypeOfTheCraft == 3)) then\r\n        local yawFromTerrain, pitchFromTerrain = CheckForTerrainAhead(constructPosition, constructVelocity)\r\n        if yawFromTerrain ~= 0 or pitchFromTerrain ~= 0 then                                                        -- reverse?!?\r\n           -- DBG('Terrain Ahead!')\r\n            return yawFromTerrain, PropulsionRequestWhileAvoiding, pitchFromTerrain\r\n        end      \r\n    end\r\n\r\n\r\n    local minDistancePredicted, minTimePredicted, currentDistance, closestObstacleId\r\n        =  FindMinimalFlybyDistanceAndTime(constructPosition, constructVelocity, newPositionsAndVectors)\r\n    \r\n    local timeNeededToReactSafely = TimeNeededForConstructToReactSafely * 2\r\n    local distanceNeededToReactSafely = ConstructCurrentSpeed * TimeNeededForConstructToReactSafely * 2                -- wrong !!!\r\n    local numberOfFrames = NumberOfFramesToPredictWith\r\n    DBG(\"timeNeededToReactSafely: \"..timeNeededToReactSafely..\" distanceNeededToReactSafely: \"..distanceNeededToReactSafely..\" ConstructCurrentSpeed: \"..ConstructCurrentSpeed)\r\n    DBG(\"minDistancePredicted: \"..minDistancePredicted..\"  minTimePredicted: \"..minTimePredicted..\" currentDistance: \"..currentDistance)\r\n\r\n    if currentDistance < 0 then    \r\n        local obstacleRelativePosition = constructPosition - newPositionsAndVectors[closestObstacleId].Position\r\n                + newPositionsAndVectors[closestObstacleId].Velocity.normalized * (GetSphericalHalfSize(newPositionsAndVectors[closestObstacleId].Id) * 0.0)\r\n        local signForSide = constructVelocity.x * obstacleRelativePosition.z - constructVelocity.z * obstacleRelativePosition.x\r\n    \r\n        local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n        local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n        local YawDirectionSign = 1\r\n        if ConstructForwardsVelocityMagnitude < 0 then                                   --And again - Redo!\r\n           -- propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n           -- PropulsionRequestReverse = PropulsionRequestWhileAvoiding                 --                      !!!!\r\n            YawDirectionSign = ChangeToYawDirectionWhileInReverse\r\n        end\r\n\r\n        if signForSide > 0 then\r\n            DBG (\"All is lost! Left! \"..currentDistance..\"  signForSide: \"..signForSide)\r\n            return PropulsionRequestForYawRight * -1 * YawDirectionSign, PropulsionRequestReverse, 0                            -- Add pitch\r\n        else\r\n            DBG (\"All is lost! Right! \"..currentDistance..\"  signForSide: \"..signForSide)\r\n            return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\n        end\r\n        \r\n    elseif CurrentAlgorithm == \"Big Boy\" then\r\n\r\n         if (currentDistance < CurrentSafeDistance )\r\n            or (currentDistance < distanceNeededToReactSafely and minTimePredicted > 0 and minTimePredicted < timeNeededToReactSafely)\r\n            or (minDistancePredicted < CurrentSafeDistance and minTimePredicted > 0 and minTimePredicted < timeNeededToReactSafely) then        \r\n  \r\n            return CompareSafetyOfManeuversAndChooseDirectionOfTurn (timeNeededToReactSafely, numberOfFrames, constructPosition, constructVelocity, newPositionsAndVectors)\r\n        \r\n         elseif currentDistance < MinimumDistanceToKeepReversing and DesiredForward == PropulsionRequestToStopOrReverse then \r\n             \r\n            return DesiredYaw, DesiredForward, 0\r\n             \r\n         end\r\n    else\r\n        if (currentDistance < CurrentSafeDistance )\r\n                or (minTimePredicted < timeNeededToReactSafely / 3 and minDistancePredicted < distanceNeededToReactSafely / 3) then\r\n\r\n            return CompareSafetyOfManeuversAndChooseDirectionOfTurnForPlane (constructPosition, constructVelocity, newPositionsAndVectors, minTimePredicted)\r\n\r\n        end\r\n    end\r\n    \r\n    DBG (\"All good. \"..currentDistance) \r\n\r\n    return 0, 0, 0\r\nend\r\n\r\n\r\nFramesSinceLastControlRequest = 0\r\n\r\nfunction DoStuff (desiredYaw, desiredForward, desiredPitch)\r\n    if TypeOfAiOnTheCraft == 1 or TypeOfAiOnTheCraft == 3 then\r\n        if CounterForDelayBeforeTakingControlFromStandardAI <= 0 then\r\n            \r\n            if desiredYaw ~= 0 or desiredPitch ~= 0 or desiredForward ~= 0 then\r\n                if FramesSinceLastControlRequest == 0 or FramesSinceLastControlRequest >= ConstantForFramesPerSecond then\r\n                    I:TellAiThatWeAreTakingControl()\r\n                    FramesSinceLastControlRequest = NumberOfSkippedFrames\r\n                end\r\n                \r\n                I:RequestControl(0, 0, desiredYaw)\r\n                I:RequestControl(0, 4, desiredPitch)\r\n                I:RequestControl(0, 8, desiredForward)\r\n                \r\n            end\r\n            \r\n        end        \r\n        CounterForDelayBeforeTakingControlFromStandardAI = CounterForDelayBeforeTakingControlFromStandardAI - NumberOfSkippedFrames        \r\n        \r\n    end\r\n\r\n    if TypeOfAiOnTheCraft == 2 or TypeOfAiOnTheCraft == 3 then\r\n\r\n        if desiredYaw == PropulsionRequestForYawRight * -1 then I:RequestComplexControllerStimulus(CCCForYawLeft) end\r\n        if desiredYaw == PropulsionRequestForYawRight then I:RequestComplexControllerStimulus(CCCForYawRight) end\r\n\r\n        if desiredForward == PropulsionRequestWhileAvoiding then I:RequestComplexControllerStimulus(CCCWhileAvoiding) end\r\n        if desiredForward == PropulsionRequestToStopOrReverse then I:RequestComplexControllerStimulus(CCCToStopOrReverse) end\r\n\r\n        if desiredPitch == PropulsionRequestForPitchUp then I:RequestComplexControllerStimulus(CCCForPitchUp) end\r\n        if desiredPitch == PropulsionRequestForPitchUp * -1 then I:RequestComplexControllerStimulus(CCCForPitchDown) end\r\n        \r\n    end\r\n\r\n    DBG(FrameCounter..\": DesiredYaw = \"..desiredYaw..\" desiredForward: \"..desiredForward..\"  desiredPitch: \"..desiredPitch)\r\nend\r\n\r\n\r\nfunction DoInputSanityCheck()\r\n    local msg = \"\"\r\n    if CurrentSafeDistance < 0 then\r\n        CurrentSafeDistance = 10\r\n        msg = msg .. \" CurrentSafeDistance! \"\r\n    end\r\n    if MaximumSizeOfEnemyShips < 50 then\r\n        MaximumSizeOfEnemyShips = 50\r\n        msg = msg .. \" MaximumSizeOfEnemyShips! \"\r\n    end\r\n    if CCCForYawRight == CCCForYawLeft then\r\n        msg = msg .. \" CCCForYawRight==CCCForYawLeft - not fixed! \"\r\n    end\r\n    if MaximumTimeForCoursePrediction < 0 then\r\n        MaximumTimeForCoursePrediction = 10\r\n        msg = msg .. \" MaximumTimeForCoursePrediction! \"\r\n    end\r\n    if ConstantForConstructId == ConstantForEnemyId then\r\n        msg = msg .. \" Nuts - not fixed! \"\r\n    end\r\n    return msg\r\nend\r\n\r\nfunction UpdateFriendlySizes()\r\n    for i = 0, I:GetFriendlyCount() - 1, 1 do\r\n        local FriendlyInfo = I:GetFriendlyInfo(i)\r\n        local friendlySize = FriendlyInfo.PositiveSize - FriendlyInfo.NegativeSize + Vector3(1, 1, 1)\r\n        DimensionsOfFriendlies[FriendlyInfo.Id] = {\r\n            Id = FriendlyInfo.Id,\r\n            BoundingBox = friendlySize,\r\n            MaxSphericalHalfSize = math.max(friendlySize.x, friendlySize.y, friendlySize.z) / 2 + ExtraDistanceForBeingFriendly\r\n        }\r\n    end \r\nend\r\n\r\nfunction UpdateCurrentSafeDistance (currentTypeOfTheCraft)\r\n\r\n    if currentTypeOfTheCraft == 1 or currentTypeOfTheCraft == 2 then\r\n        if IsItALandMap then\r\n            CurrentSafeDistance = SafeDistanceForLandUnits\r\n        else\r\n            CurrentSafeDistance = SafeDistanceForShips\r\n        end\r\n    elseif currentTypeOfTheCraft == 3 then\r\n        CurrentSafeDistance = SafeDistanceForPlanes\r\n    elseif currentTypeOfTheCraft == 4 then\r\n        CurrentSafeDistance = SafeDistanceForSubmarines\r\n    end\r\n    \r\n    \r\nend\r\n\r\nfunction StartupInitialization()\r\n    DoInitializationOnStart = false    \r\n    I:ClearLogs()\r\n\r\n    SetPriorityNumberAndCountFriendlies()\r\n    \r\n    if InTheFightWithCornHollio then\r\n        desiredSpeed = 0\r\n        EngageSelfDestruct(true)\r\n    end \r\n    \r\n    ConstructDimensions = ConstructDimensions + I:GetConstructMaxDimensions() - I:GetConstructMinDimensions()\r\n    ConstructSphericalHalfSize = math.max(ConstructDimensions.x, ConstructDimensions.y, ConstructDimensions.z) / 2\r\n\r\n    LastFrameConstructVelocity = I:GetVelocityVector()\r\n\r\n    UpdateFriendlySizes()\r\n\r\n  --  local msg = DoInputSanityCheck()\r\n\r\n    local constructPosition = I:GetConstructPosition()    \r\n    MapBorderPointX1, MapBorderPointZ1, MapBorderPointX2, MapBorderPointZ2 = FindMapBorderPoints(constructPosition.x, constructPosition.z, 20000)\r\n    local mapCenterX = (MapBorderPointX1 + MapBorderPointX2) / 2\r\n    local mapCenterZ = (MapBorderPointZ1 + MapBorderPointZ2) / 2\r\n    \r\n  --  I:LogToHud(\"mapCenterX: \"..mapCenterX..\"  mapCenterZ: \"..mapCenterZ)\r\n    \r\n    CurrentTypeOfTheCraft = TypeOfTheCraft\r\n    HeightOfMapCenter = ( I:GetTerrainAltitudeForPosition(mapCenterX, 0, 0)\r\n                        + I:GetTerrainAltitudeForPosition(mapCenterX + 500, 0, mapCenterZ + 500)\r\n                        + I:GetTerrainAltitudeForPosition(mapCenterX + 500, 0, mapCenterZ - 500)\r\n                        + I:GetTerrainAltitudeForPosition(mapCenterX - 500, 0, mapCenterZ + 500)\r\n                        + I:GetTerrainAltitudeForPosition(mapCenterX - 500, 0, mapCenterZ - 500) ) / 5\r\n    if HeightOfMapCenter > MinimumTerrainAltitudeToBeLandMap then                                                        \r\n        IsItALandMap = true\r\n    end\r\n    HeightOfMapCenter = math.max(0, HeightOfMapCenter)\r\n\r\n    UpdateCurrentSafeDistance (TypeOfTheCraft)\r\n    CurrentTypeOfTheCraft = TypeOfTheCraft\r\n\r\n    if ForceUsageOfAlgorithm ~= \"Auto\" then\r\n        CurrentAlgorithm = ForceUsageOfAlgorithm     \r\n    end\r\n    \r\n    \r\n    if ShowMessageForRunningAndWarnings then\r\n        I:LogToHud(\"CornBox is running on \".. I:GetBlueprintName()..\" (Id: \".. I:GetUniqueId()..\"). \"..msg)        \r\n    end\r\n    \r\nend\r\n\r\n\r\nfunction IsThisFrameActive(frameCounter, activeCraftsPerFrame, previousCountForFriendlies, constructPriorityNumber)\r\n    local FirstPriorityNumberForThisFrame = frameCounter * activeCraftsPerFrame % previousCountForFriendlies\r\n    local FirstPriorityNumberForNextFrame = (frameCounter + 1) * activeCraftsPerFrame % previousCountForFriendlies\r\n\r\n    if (previousCountForFriendlies<activeCraftsPerFrame)\r\n            or (constructPriorityNumber >= FirstPriorityNumberForThisFrame and constructPriorityNumber < (FirstPriorityNumberForThisFrame + activeCraftsPerFrame))\r\n            or (constructPriorityNumber < FirstPriorityNumberForNextFrame and  constructPriorityNumber >= (FirstPriorityNumberForNextFrame - activeCraftsPerFrame)) then\r\n       -- DBG(\"Run on frame: \"..frameCounter)\r\n        NumberOfSkippedFrames = FrameCounter - LastActiveFrame\r\n        LastActiveFrame = FrameCounter\r\n        return true\r\n    end\r\n    return false\r\nend\r\n\r\n\r\nfunction IsThisBoxActive()\r\n    --local poll = Mathf.Round(I:GetInput(0, 8)*10)\r\n    local poll = Mathf.Round(I:GetCustomAxis(\"CornBoxPoll\")*10)\r\n\r\n    if (poll == 0 and VictoryInThePollForPreviousFrame) or (poll == 1 and VictoryInThePoll) then\r\n        --I:RequestControl(0, 8, 0.1)\r\n        I:RequestCustomAxis(\"CornBoxPoll\", 0.1)\r\n        VictoryInThePollForPreviousFrame = true \r\n        return true\r\n    end \r\n    \r\n    if CounterForPollDelay == -99 then\r\n        CounterForPollDelay = math.random(0, 20)\r\n    end\r\n    \r\n    if poll ~= 1 and PollResultForPreviousFrame ~= 1 then\r\n        CounterForPollDelay = CounterForPollDelay - 1\r\n        VictoryInThePoll = false\r\n        VictoryInThePollForPreviousFrame = false\r\n        \r\n        if CounterForPollDelay <= 0 then\r\n            --I:RequestControl(0, 8, 0.1)\r\n            I:RequestCustomAxis(\"CornBoxPoll\", 0.1)\r\n            VictoryInThePoll = true\r\n            CounterForPollDelay = math.random(0, 20)\r\n        end\r\n    end\r\n\r\n    PollResultForPreviousFrame = poll    \r\n    return false\r\nend\r\n\r\n\r\nIntegrationModeCycleCounter = 0\r\nIntegrationModeCurrentStep = 0\r\n\r\n\r\nfunction RunIntegrationTest()\r\n    IntegrationModeHudRepeatNumber = (IntegrationTestDuration * 40) / (Mathf.Round((IntegrationTestDuration * 40) / (3*40*2))*2)\r\n    IntegrationModeCycleCounter = IntegrationModeCycleCounter - NumberOfSkippedFrames\r\n\r\n    if IntegrationModeCycleCounter <=0 then\r\n        IntegrationModeCurrentStep = IntegrationModeCurrentStep + 1\r\n        IntegrationModeCycleCounter = IntegrationTestDuration * 40\r\n    end\r\n                                                                                        --DesiredYaw, DesiredForward, DesiredPitch = RunIntegrationTest()\r\n    \r\n    local msg = \"Integration test for [\"..I:GetBlueprintName()..\"].\"\r\n    if IsItALandMap then\r\n        msg = msg..\" Land map (\"..HeightOfMapCenter..\"m).\"\r\n    else\r\n        msg = msg..\" Water map.\"       \r\n    end\r\n\r\n    local currentTypeOfTheCraft = GetTypeOfUnitFromAltitude(I:GetConstructCenterOfMass())\r\n\r\n    if TypeOfTheCraft == 1 then \r\n        if currentTypeOfTheCraft == 2 then msg = msg..\" Type: Surface (Auto).\" end\r\n        if currentTypeOfTheCraft == 3 then msg = msg..\" Type: Plane (Auto).\" end\r\n        if currentTypeOfTheCraft == 4 then msg = msg..\" Type: Submarine (Auto).\" end        \r\n    elseif TypeOfTheCraft == currentTypeOfTheCraft then\r\n        if currentTypeOfTheCraft == 2 then msg = msg..\" Type: Surface.\" end\r\n        if currentTypeOfTheCraft == 3 then msg = msg..\" Type: Plane.\" end\r\n        if currentTypeOfTheCraft == 4 then msg = msg..\" Type: Submarine.\" end\r\n    else\r\n\r\n        if TypeOfTheCraft == 2 then msg = msg..\" Type: Surface\" end\r\n        if TypeOfTheCraft == 3 then msg = msg..\" Type: Plane\" end\r\n        if TypeOfTheCraft == 4 then msg = msg..\" Type: Submarine\" end\r\n\r\n        if currentTypeOfTheCraft == 2 then msg = msg..\", expected: Surface!\" end\r\n        if currentTypeOfTheCraft == 3 then msg = msg..\", expected: Plane!\" end\r\n        if currentTypeOfTheCraft == 4 then msg = msg..\", expected: Submarine!\" end\r\n        \r\n    end\r\n\r\n    if IntegrationModeCurrentStep > 10 then\r\n        IntegrationModeCurrentStep = 1\r\n    end\r\n\r\n    if IntegrationModeCurrentStep == 1 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward and Yaw right.\")\r\n        end\r\n        return PropulsionRequestForYawRight, PropulsionRequestWhileAvoiding, 0\r\n    elseif IntegrationModeCurrentStep == 2 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    elseif IntegrationModeCurrentStep == 3 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward and Yaw left.\")\r\n        end\r\n        return PropulsionRequestForYawRight * -1, PropulsionRequestWhileAvoiding, 0\r\n    elseif IntegrationModeCurrentStep == 4 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    elseif IntegrationModeCurrentStep == 5 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward and Pitch up.\")\r\n        end\r\n        return 0, PropulsionRequestWhileAvoiding, PropulsionRequestForPitchUp\r\n    elseif IntegrationModeCurrentStep == 6 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    elseif IntegrationModeCurrentStep == 7 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward and Pitch down.\")\r\n        end\r\n        return 0, PropulsionRequestWhileAvoiding, PropulsionRequestForPitchUp * -1\r\n    elseif IntegrationModeCurrentStep == 8 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    elseif IntegrationModeCurrentStep == 9 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward slow or stop or reverse.\")\r\n        end\r\n        return 0, PropulsionRequestToStopOrReverse, 0        \r\n    elseif IntegrationModeCurrentStep == 10 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    end\r\n    \r\nend\r\n\r\n\r\n\r\nfunction Update(ILocal)\r\n    if StartupDelay <= 0 then\r\n        I=ILocal\r\n        I:ClearLogs()\r\n\r\n        local activeFrame = IsThisFrameActive(FrameCounter, ActiveCraftsPerFrame, PreviousCountForFriendlies, ConstructPriorityNumber)\r\n    --    DBG(\"FrameCounter: \"..FrameCounter..\"  activeFrame: \"..tostring(activeFrame))\r\n\r\n        local successForPoll, activeBox = pcall(IsThisBoxActive)\r\n        if not successForPoll then\r\n          --  DBG(\"Unsuccessful poll.\")\r\n            activeBox = true\r\n        end\r\n        --local activeBox = IsThisBoxActive()\r\n     --   DBG(\"FrameCounter: \"..FrameCounter..\"  successForPoll: \"..tostring(successForPoll)..\"  activeBox: \"..tostring(activeBox))\r\n\r\n\r\n\r\n       -- DBG(\"GTF: \"..I:GetGameTime()/0.025)\r\n\r\n\r\n\r\n        if activeFrame and activeBox then\r\n            local success = false\r\n            \r\n            if DoInitializationOnStart then                         -- add support for new spawns and test for sanity\r\n                StartupInitialization()                                 -- And where are missing friendly size come from?\r\n            end\r\n\r\n            if IntegrationTestDuration == 0 then\r\n                success, DesiredYaw, DesiredForward, DesiredPitch = pcall(DetectAndAvoidCollision)\r\n                --success = true  DesiredYaw, DesiredForward, DesiredPitch = DetectAndAvoidCollision()\r\n            else\r\n                success = true\r\n                DesiredYaw, DesiredForward, DesiredPitch = RunIntegrationTest()\r\n            end\r\n                            \r\n\r\n            if not success or DesiredYaw == nil or DesiredForward == nil or DesiredPitch == nil then\r\n                DBG(\"!!Error!!\")\r\n                DesiredYaw = 0\r\n                DesiredForward = 0\r\n                DesiredPitch = 0\r\n            end\r\n        else\r\n            DBG(\"Skipping of the frame. FrameCounter: \"..FrameCounter..\"  activeFrame: \"..tostring(activeFrame)..\"  activeBox: \"..tostring(activeBox))\r\n        end\r\n\r\n        if DesiredYaw ~= 0 or DesiredForward ~= 0 or DesiredPitch ~= 0 then\r\n            DoStuff(DesiredYaw, DesiredForward, DesiredPitch)\r\n        else\r\n            CounterForDelayBeforeTakingControlFromStandardAI = DelayBeforeTakingControlFromStandardAI\r\n            DBG(FrameCounter..\": No collision to avoid.\")\r\n        end\r\n        FramesSinceLastControlRequest = FramesSinceLastControlRequest + NumberOfSkippedFrames\r\n    else\r\n        StartupDelay = StartupDelay - 1\r\n    end\r\n    FrameCounter = FrameCounter + 1\r\nend\r\n\r\n\r\nfunction DBG(string)\r\n    I:Log(string)\r\nend\r\n\r\n\r\nfunction PV(v)\r\n    return \" x: \"..v.x..\"  y: \"..v.y..\"  z: \"..v.z..\"   mg: \"..v.magnitude\r\nend\r\n\r\n\r\nfunction GetLengthOfTable(table)\r\n    local count = 0\r\n    for _ in pairs(table) do\r\n        count = count + 1\r\n    end\r\n    return count\r\nend\r\n\r\n\r\nfunction Get_Speed (id)\r\n    return RateOfRotationAndSpeed[id].MaxSpeed\r\nend                                                                         -- Kill it?\r\nfunction Get_TurnRate (id)\r\n    return RateOfRotationAndSpeed[id].CurrentCourse\r\nend\r\n\r\n"],"BlockStringDataIds":[1574],"GameVersion":"3.4.8.0","PersistentSubObjectIndex":16,"PersistentBlockIndex":1768,"AuthorDetails":{"Valid":false,"ForeignBlocks":0,"CreatorId":"00000000-0000-0000-0000-000000000000","ObjectId":"00000000-0000-0000-0000-000000000000","CreatorReadableName":"","HashV1":"b84624206a654c82d83dd439ab9c5677"},"BlockCount":2527}}