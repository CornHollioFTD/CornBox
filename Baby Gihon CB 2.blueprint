{"FileModelVersion":{"Major":1,"Minor":0},"Name":"Baby Gihon CB 2","Version":42,"SavedTotalBlockCount":1686,"SavedMaterialCost":26561.9,"ContainedMaterialCost":20.0,"ItemDictionary":{"1301":"a7f5d8de-4882-4111-9d01-436493e5b2d8","281":"9a3f63f4-48b6-4fe0-9f59-9fac3d073750","292":"19945f75-8353-45e1-938f-a548fa05e05e","296":"64109192-fd8e-422b-a9e8-74295d3d74ea","756":"a3d914e9-697d-425f-abda-a6b21b4de952","343":"26a604f0-071c-49ca-8a0e-e1d9c959b1c5","339":"edd65760-896f-4f6a-ba8c-eb2b072635f4","280":"ec49b6a2-244f-4cfa-b49e-8dd19213b280","392":"a56e0dcf-94e4-48a0-b8b9-5e33e0ab69cf","344":"9d2ff3d6-abc2-4378-b47c-cad42d4af1bc","680":"ab699540-efc8-4592-bc97-204f6a874b3a","1299":"2a22f176-01c2-42f2-a7d2-2c7054504aa9","277":"a97e03b0-e8da-49e2-9913-ad8c1826d869","274":"ce494e45-5ff6-48a7-8936-30163c58ed99","371":"ef545d00-c22d-4eed-bd76-74d6432e2974","390":"e6bb2b09-daee-432d-9aff-45fc63d24fca","1526":"1515cb7e-56cf-4802-a33e-7c984d6cd93c","1522":"58a13b46-73a4-45f8-8bc0-0cc250ffd813","1":"275b820d-dd55-49aa-9b09-48b58e8ab5da","0":"75a78e48-0848-45ee-9df2-e2b328c1933d","1261":"c30ac9c4-8fa1-4812-a56a-1926d2119dc5","1287":"de7aab07-7fec-438f-872a-d66b0e942b42","1263":"576586fc-3938-4ae9-93a7-6cf74b8efbf2","1333":"369eefd9-0c39-412e-a294-d0bb2251c509","1308":"de50f4f6-3d7e-4d6b-ae34-e6a34b24b104","1295":"5a0d6e26-7939-437f-ba35-33d9b3cf193f","1324":"6f820954-63e4-4bc9-a299-8266e712d838","1264":"0a0754e4-024e-4622-9a06-506a7f4a6ca3","1527":"61c573f4-b67e-4159-9aec-22bddf355770","559":"82b2446e-c12e-436a-8340-76d38372ead1","1266":"8ae14459-075e-4384-bd95-1fef61b4021f","1304":"5548037e-8428-43f8-bcb6-d730dbcd0a79","1306":"a09be1c6-93fd-4b54-b9ca-62e60efbc818","960":"9411e401-27da-4546-b805-3334f200f055","1337":"f07f759c-41d1-4095-8054-dc471687884b","1305":"8477bbec-974c-45bf-a1ce-49a48d5b5307","1294":"a2983545-008e-4926-a54a-89cc56de8f48","1286":"0358dee0-2d87-4b29-bb73-5c9e3399fd4e","1265":"4035532b-9d7b-4570-8ede-68ebfe42418d","1262":"6d3e8b3f-b945-47e9-a77d-e0fcd1c61b69","1320":"2f5f91c0-bebf-4de2-bf70-8d9bc1816997","1329":"40659614-1b34-497a-b745-78497e4b2025","1309":"442f3ea3-c7cd-4759-84ee-a0d2fac5a711","16":"8a075da2-c74c-4129-8c89-a8c2dba21a45","37":"bbe92c52-4eb0-44e7-a1cf-119266d3d8e5","19":"655b4a78-f193-4da9-82bd-6f0c9b4560f1","611":"949d3fba-3b60-49ed-a83b-7180822d6bc0","863":"60bc1939-6207-4b3e-9f31-444ed626c775","1328":"bcaf33a4-98c3-41d7-b416-438670e97d53","1332":"ee18a848-1319-4ff9-b5e5-3f3710635dbf","1302":"0d554a9d-7d06-48b3-8aea-ffaeaa30380a","1303":"e5d065f6-907b-450d-b998-213cdc54eec1","854":"1fa6e1a9-83fb-4efc-b9bc-19ea0d1005cb","853":"195e0661-21dc-4fba-88f1-81481f3bf409","446":"51f8afc5-b071-4639-9f96-693b952fdf80","58":"fd13443a-1f2e-45e1-8978-9b02541a8174","13":"5e236eef-c91e-45bc-afc4-bff4d133ac14","1300":"46f54639-5f91-4731-93eb-e5c0a7460538","852":"5dc0032d-d532-4766-b081-4204947bcaa0","48":"d62b91f6-8356-4fbc-8415-6405e04cba92","443":"f675b19a-4a67-41de-bd60-651bac2cfe17","44":"35d7b71f-0247-4e73-8307-5199180d1cbb","39":"a31d4438-03b8-4cf2-ad7d-ff7c07fbf60c","857":"2eca89e0-5c2f-4b1c-a5bf-df5190e13ef4","293":"2ae437c8-afe6-4d6d-9562-0423227878b2","285":"47c8ddc8-9dca-4363-a39e-95dd28008e30","287":"4bd38234-b485-4a94-bc2d-d3fc80d89955","279":"379c94e6-7f27-42ab-ab45-66e3533ecde8","768":"2e715d3f-349f-41e1-bd89-7f685939d5aa","966":"2a3905ff-2030-421d-a2bf-90fba71c1c5e","387":"2c557c38-4136-436a-bae2-c5cd1102690c","592":"4f87eff7-616b-4663-8f11-cd7a7ddd3649","422":"bfb82ee6-345a-44a4-84e1-d6706cc8b29d","419":"b1ef236a-9ecb-406c-b4f0-6ef0fbb50bd1","394":"310a7a9a-8d4e-4365-a877-1a8e2bac2a81","395":"86a6eb4b-cb64-4451-9dc5-94efff6b8ed6","679":"3cc75979-18ac-46c4-9a5b-25b327d99410","774":"d3924bae-be5a-43a0-be19-64fc7c8d6059","545":"87bd3e7e-16f0-4f0c-99b9-34ddfa032a87","594":"9413049d-a4f7-4c1c-8b8a-d2f1f4c18e53","338":"5ef97d26-1196-4b1a-ba1d-fd539c26b684","672":"e63040c9-0027-4fd3-be30-67fe3e950140"},"Blueprint":{"ContainedMaterialCost":20.0,"CSI":[0.0,0.0,-1.0,0.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8185.45557,22.8708611,1.0,1.0,0.0,1.0,129.915329,1847.27209,-1.0,0.0,9000.0,1.0,1.0,0.0,0.0,0.0,0.0,447.562,0.0,0.1,0.1,1.0,1.0,3.0,-1.0,22.6845226,-1.0,0.0,-1.0,1.0,0.186338991,-1.0,0.0,0.0,-1.0,0.0,0.0,0.0,432.0,-1.0,1702.84619,263.665619,1.8,0.0,0.0,500.0,-1.0,12.0,0.0,0.0,0.0,25.7382488,0.0,0.0,0.0,0.0,0.163915232,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0],"COL":["0.011764,0,0,0","0.02745,1,0,0.99","0,1,0,0.5","0,0,1,0.5","0.1,0.1,0.1,0.5","0.3,0.3,0.3,0.5","0.5,0.5,0.5,0.5","1,1,1,0.1","1,1,1,0.5","1,1,1,0.99","0.654902,0.06,0.12,0.99","0,0.52,0.53,0.99","0.407843,0.44,0.45,0.99","0.838653,0.989834,0.502558,0.1046","0,1,1,0.99","0.259038,0.21854,0.933373,0.708192","0.535671,0.377534,0.449194,0.851398","0.367114,0.22481,0.152779,0.334713","0.46332,0.87948,0.502976,0.011328","1,0.921568,0.015686,0.99","0.709885,0.941275,0.064448,0.718668","0.954239,0.295095,0.011557,0.043301","0.044338,0.401917,0.885935,0.25907","0.222428,0.56301,0.298616,0.500089","0.098382,0.076064,0.551384,0.221225","0.272792,0.102524,0.886438,0.511525","0.231146,0.750684,0.140713,0.948622","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0"],"SCs":[],"BLP":["-4,-1,9","-4,-1,10","-3,-1,10","-3,3,11","-3,3,12","-3,3,13","-3,3,14","-3,3,15","-2,-1,10","-2,-1,11","-2,-1,13","-2,-1,15","-2,-1,17","-2,-1,19","-2,-1,21","-2,-1,22","-2,-1,23","-2,0,12","-2,0,13","-2,0,14","-2,0,16","-2,0,17","-2,0,18","-2,0,20","-2,0,21","-2,0,22","-2,0,23","-2,1,11","-2,1,13","-2,1,15","-2,1,17","-2,1,19","-2,1,21","-2,1,22","-2,1,23","-2,2,12","-2,2,13","-2,2,14","-2,2,16","-2,2,17","-2,2,18","-2,2,20","-2,2,21","-2,2,22","-2,2,23","-2,3,11","-2,3,13","-2,3,15","-2,3,17","-2,3,19","-2,3,21","-2,3,22","-2,3,23","-1,-1,10","-1,-1,11","-1,-1,12","-1,-1,13","-1,-1,14","-1,-1,15","-1,-1,16","-1,-1,17","-1,-1,18","-1,-1,19","-1,-1,20","-1,-1,21","-1,0,11","-1,0,13","-1,0,15","-1,0,17","-1,0,19","-1,0,21","-1,1,11","-1,1,12","-1,1,13","-1,1,14","-1,1,15","-1,1,16","-1,1,17","-1,1,18","-1,1,19","-1,1,20","-1,1,21","-1,2,11","-1,2,13","-1,2,15","-1,2,17","-1,2,19","-1,2,21","-1,3,9","-1,3,10","-1,3,11","-1,3,12","-1,3,13","-1,3,14","-1,3,15","-1,3,16","-1,3,17","-1,3,18","-1,3,19","-1,3,20","-1,3,21","0,-1,8","0,-1,10","0,-1,11","0,-1,12","0,-1,13","0,-1,14","0,-1,15","0,-1,16","0,-1,17","0,-1,18","0,-1,19","0,-1,20","0,-1,21","0,0,11","0,0,12","0,0,14","0,0,15","0,0,16","0,0,18","0,0,19","0,0,20","0,1,11","0,1,12","0,1,13","0,1,14","0,1,15","0,1,16","0,1,17","0,1,18","0,1,19","0,1,20","0,1,21","0,1,22","0,2,11","0,2,12","0,2,14","0,2,15","0,2,16","0,2,18","0,2,19","0,2,20","0,2,22","0,3,11","0,3,12","0,3,13","0,3,14","0,3,15","0,3,16","0,3,17","0,3,18","0,3,19","0,3,20","0,3,21","0,3,22","1,-1,10","1,-1,11","1,-1,12","1,-1,13","1,-1,14","1,-1,15","1,-1,16","1,-1,17","1,-1,18","1,-1,19","1,-1,20","1,-1,21","1,0,11","1,0,13","1,0,15","1,0,17","1,0,19","1,0,21","1,1,11","1,1,12","1,1,13","1,1,14","1,1,15","1,1,16","1,1,17","1,1,18","1,1,19","1,1,20","1,1,21","1,1,22","1,2,11","1,2,13","1,2,15","1,2,17","1,2,19","1,2,21","1,2,22","1,3,11","1,3,12","1,3,13","1,3,14","1,3,15","1,3,16","1,3,17","1,3,18","1,3,19","1,3,20","1,3,21","1,3,22","2,-1,10","2,-1,11","2,-1,13","2,-1,15","2,-1,17","2,-1,19","2,-1,21","2,-1,22","2,-1,23","2,0,12","2,0,13","2,0,14","2,0,16","2,0,17","2,0,18","2,0,20","2,0,21","2,0,22","2,1,11","2,1,13","2,1,15","2,1,17","2,1,19","2,1,21","2,1,22","2,2,12","2,2,13","2,2,14","2,2,16","2,2,17","2,2,18","2,2,20","2,2,21","2,2,22","2,3,11","2,3,13","2,3,15","2,3,17","2,3,19","2,3,21","2,3,22","2,3,23","3,-1,10","3,3,9","3,3,10","3,3,11","3,3,12","3,3,13","3,3,14","3,3,15","4,-1,9","4,-1,10","4,3,9","0,-2,17","0,-3,17","0,-2,19","0,-2,15","0,-2,14","0,-2,20","5,-1,26","5,-1,25","5,-1,24","5,-1,23","5,-1,22","5,-1,21","5,0,24","5,0,23","5,0,22","5,0,21","5,1,23","5,1,22","5,1,21","5,2,22","5,2,21","4,-2,23","4,-1,27","4,-1,26","4,-1,25","4,-1,24","4,-1,23","4,-1,22","4,-1,21","4,0,25","4,0,24","4,0,23","4,0,22","4,0,21","4,1,24","4,1,23","4,1,22","4,1,21","4,2,23","4,2,22","4,2,21","4,3,22","4,3,21","3,-2,24","3,-2,23","3,-1,28","3,-1,27","3,-1,26","3,-1,25","3,-1,24","3,-1,23","3,-1,22","3,-1,21","3,0,26","3,0,25","3,0,24","3,0,23","3,0,22","3,0,21","3,1,25","3,1,24","3,1,23","3,1,22","3,1,21","3,2,25","3,2,24","3,2,23","3,2,22","3,2,21","3,3,23","3,3,22","2,-3,21","2,-2,25","2,-2,24","2,-2,23","2,-1,29","2,-1,28","2,-1,27","2,-1,26","2,-1,25","2,-1,24","2,0,27","2,0,26","2,0,25","2,0,24","2,1,27","2,1,26","2,1,25","2,1,24","2,2,25","2,2,24","2,3,24","1,-3,22","1,-2,26","1,-2,25","1,-2,24","1,-2,23","1,-1,30","1,-1,29","1,-1,28","1,-1,27","1,-1,26","1,-1,25","1,-1,24","1,0,28","1,0,26","1,0,25","1,0,24","1,1,27","1,1,26","1,1,25","1,1,24","1,2,26","1,2,25","1,2,24","1,3,25","1,3,24","0,-2,27","0,-2,26","0,-2,25","0,-2,24","0,-1,30","0,-1,27","0,0,28","0,1,27","0,2,26","0,3,25","-1,-3,22","-1,-2,26","-1,-2,25","-1,-2,24","-1,-2,23","-1,-1,30","-1,-1,29","-1,-1,28","-1,-1,27","-1,-1,26","-1,-1,25","-1,-1,24","-1,0,28","-1,0,26","-1,0,25","-1,0,24","-1,1,27","-1,1,26","-1,1,25","-1,1,24","-1,2,26","-1,2,25","-1,2,24","-1,3,25","-1,3,24","-2,-3,21","-2,-2,25","-2,-2,24","-2,-2,23","-2,-1,29","-2,-1,28","-2,-1,27","-2,-1,26","-2,-1,25","-2,-1,24","-2,0,27","-2,0,26","-2,0,25","-2,0,24","-2,1,27","-2,1,26","-2,1,25","-2,1,24","-2,2,25","-2,2,24","-2,3,24","-3,-2,24","-3,-2,23","-3,-1,28","-3,-1,27","-3,-1,26","-3,-1,25","-3,-1,24","-3,-1,23","-3,-1,22","-3,-1,21","-3,0,26","-3,0,25","-3,0,24","-3,0,23","-3,0,22","-3,0,21","-3,1,25","-3,1,24","-3,1,23","-3,1,22","-3,1,21","-3,2,25","-3,2,24","-3,2,23","-3,2,22","-3,2,21","-3,3,23","-3,3,22","-4,-2,23","-4,-1,27","-4,-1,26","-4,-1,25","-4,-1,24","-4,-1,23","-4,-1,22","-4,-1,21","-4,0,25","-4,0,24","-4,0,23","-4,0,22","-4,0,21","-4,1,24","-4,1,23","-4,1,22","-4,1,21","-4,2,23","-4,2,22","-4,2,21","-4,3,22","-4,3,21","-5,-1,26","-5,-1,25","-5,-1,24","-5,-1,23","-5,-1,22","-5,-1,21","-5,0,24","-5,0,23","-5,0,22","-5,0,21","-5,1,23","-5,1,22","-5,1,21","-5,2,22","-5,2,21","-1,-2,9","1,-2,9","-1,-2,10","1,-2,10","-1,-2,11","1,-2,11","-1,-2,12","1,-2,12","-1,-2,13","1,-2,13","-1,-2,17","1,-2,17","-1,-2,15","1,-2,15","-1,-2,14","1,-2,14","0,-2,18","4,-2,18","3,-2,16","0,-2,10","0,-2,2","2,0,8","-2,0,8","2,0,4","-2,0,4","3,2,8","-3,2,8","1,2,8","-1,2,8","-1,-2,20","1,-2,20","-1,-2,19","1,-2,19","-4,-2,18","4,-2,16","-4,-1,8","4,-1,8","-4,-1,7","4,-1,7","-4,-1,6","4,-1,6","-4,-1,5","4,-1,5","-4,-1,4","4,-1,4","-4,-1,3","4,-1,3","-4,-1,2","4,-1,2","-4,-1,1","4,-1,1","-4,-1,0","4,-1,0","-1,-2,16","-3,3,21","3,3,21","3,3,20","-3,3,20","3,3,19","-3,3,19","3,3,18","-3,3,18","3,3,17","-3,3,17","3,3,16","-3,3,16","3,2,15","3,2,16","3,2,14","3,1,15","3,2,17","3,1,16","3,2,13","3,1,14","3,0,15","3,2,18","3,1,17","3,0,16","3,2,12","3,1,13","3,0,14","3,-1,15","3,2,19","3,1,18","3,0,17","3,-1,16","3,2,11","3,1,12","3,0,13","3,-1,14","3,2,20","3,1,19","3,0,18","3,-1,17","3,1,11","3,0,12","3,-1,13","3,1,20","3,0,19","3,-1,18","3,0,11","3,-1,12","3,0,20","3,-1,19","3,-1,20","-3,2,15","-3,2,16","-3,2,14","-3,1,15","-3,2,17","-3,1,16","-3,2,13","-3,1,14","-3,0,15","-3,2,18","-3,1,17","-3,0,16","-3,2,12","-3,1,13","-3,0,14","-3,-1,15","-3,2,19","-3,1,18","-3,0,17","-3,-1,16","-3,2,11","-3,1,12","-3,0,13","-3,-1,14","-3,2,20","-3,1,19","-3,0,18","-3,-1,17","-3,1,11","-3,0,12","-3,-1,13","-3,1,20","-3,0,19","-3,-1,18","-3,0,11","-3,-1,12","-3,0,20","-3,-1,19","-3,-1,11","-3,-1,20","1,2,2","-1,2,2","1,2,3","-1,2,3","1,2,4","-1,2,4","1,2,5","-1,2,5","1,2,6","-1,2,6","2,2,7","-2,2,7","2,2,6","-2,2,6","2,2,5","-2,2,5","2,2,4","-2,2,4","2,2,3","-2,2,3","2,2,2","-2,2,2","3,2,2","-3,2,2","3,2,3","-3,2,3","3,2,4","-3,2,4","3,2,5","-3,2,5","3,2,6","-3,2,6","3,2,7","-3,2,7","0,1,4","0,1,5","0,1,3","0,1,2","5,-1,9","-5,-1,9","5,0,9","-5,0,9","5,1,9","-5,1,9","5,2,9","-5,2,9","4,-1,11","4,-1,12","4,-1,13","-4,-1,13","4,-1,14","-4,-1,14","4,-1,15","-4,-1,15","4,-1,16","-4,-1,16","4,-1,17","-4,-1,17","4,-1,18","-4,-1,18","4,-1,19","-4,-1,19","4,-1,20","-4,-1,20","1,-2,8","-1,-2,8","1,-2,7","-1,-2,7","1,-2,6","-1,-2,6","1,-2,5","-1,-2,5","1,-2,4","-1,-2,4","1,-2,3","-1,-2,3","1,-2,2","-1,-2,2","1,-2,1","-1,-2,1","1,-2,0","-1,-2,0","1,-2,-1","-1,-2,-1","5,3,22","-5,3,22","5,3,21","-5,3,21","5,3,17","-5,3,17","5,3,13","-5,3,13","5,3,9","-5,3,9","5,3,5","-5,3,5","3,-3,20","-3,-3,20","4,-3,19","-5,-2,22","2,2,8","-2,2,8","4,3,18","4,3,19","4,3,17","4,3,20","4,3,16","4,3,15","4,3,14","4,3,13","4,3,12","4,3,11","-4,3,18","-4,3,19","-4,3,17","-4,3,20","-4,3,16","-4,3,15","-4,3,14","-4,3,13","-4,3,12","-4,3,11","2,3,8","-2,3,8","4,3,2","-4,3,2","3,3,2","-3,3,2","2,3,2","-2,3,2","1,3,2","-1,3,2","-1,3,3","-1,3,4","-2,3,3","-1,3,5","-2,3,4","1,3,3","-3,3,3","1,3,4","-3,3,4","2,3,3","-4,3,3","1,3,5","2,3,4","-3,3,5","-4,3,4","3,3,3","1,3,6","3,3,4","-3,3,6","-4,3,5","4,3,3","3,3,5","4,3,4","-3,3,7","-4,3,6","3,3,6","4,3,5","-4,3,7","3,3,7","4,3,6","-4,3,8","4,3,7","4,3,8","0,-3,18","-4,-3,18","-4,-3,17","4,-3,17","-2,-3,16","-2,-3,15","-2,-3,14","-1,-3,19","-4,-3,13","4,-3,13","-4,-3,12","4,-3,12","-4,-3,11","4,-3,11","-4,-3,10","4,-3,10","-4,-3,9","4,-3,9","-4,-3,8","4,-3,8","-4,-3,7","4,-3,7","-4,-3,6","4,-3,6","-4,-3,5","4,-3,5","-4,-3,4","4,-3,4","-4,-3,3","4,-3,3","-4,-3,2","4,-3,2","-4,-3,1","4,-3,1","-4,-3,0","4,-3,0","-4,-3,-1","4,-3,-1","0,-3,13","0,-3,5","-3,-3,16","3,-3,16","-4,-3,16","4,-3,16","2,-3,16","-2,-3,20","2,-3,20","-1,3,8","1,3,8","-3,3,8","3,3,8","2,0,-1","-2,0,-1","0,-1,-1","4,-1,-1","-4,-1,-1","3,2,0","-3,2,0","3,1,0","-3,1,0","3,0,0","-3,0,0","3,-1,0","-3,-1,0","1,-1,0","-1,-1,0","1,0,0","-1,0,0","1,1,0","-1,1,0","2,2,0","-2,2,0","2,1,0","-2,1,0","1,2,0","-1,2,0","-2,0,0","2,0,0","-4,3,1","4,3,1","-3,3,1","3,3,1","-2,3,1","2,3,1","-1,3,1","1,3,1","0,3,1","1,2,1","2,2,1","1,1,1","3,2,1","2,1,1","1,0,1","3,1,1","2,0,1","1,-1,1","3,0,1","2,-1,1","3,-1,1","-1,2,1","-2,2,1","-1,1,1","-3,2,1","-2,1,1","-1,0,1","-3,1,1","-2,0,1","-1,-1,1","-3,0,1","-2,-1,1","-3,-1,1","-4,3,0","-3,3,0","-2,3,0","-1,3,0","1,3,0","2,3,0","3,3,0","4,3,0","0,3,0","0,-2,23","0,-3,22","4,-2,22","-4,-2,22","4,-2,21","-4,-2,21","1,-3,20","-1,-3,20","3,-3,19","4,-3,18","0,-3,23","2,0,2","-2,0,2","2,0,3","-2,0,3","2,0,5","-2,0,5","0,-1,2","3,-1,11","1,2,-1","-3,2,-1","5,-1,-1","-5,-1,-1","5,3,1","-5,3,1","5,3,0","-5,3,0","5,3,-1","-5,3,-1","4,3,-1","-4,3,-1","0,3,-1","-2,-1,0","2,-1,0","0,-2,-1","0,-3,-1","-6,-1,22","6,-1,21","-6,-1,21","7,-1,19","-7,-1,19","8,-1,17","-8,-1,17","9,-1,15","-9,-1,15","10,-1,13","-10,-1,13","11,-1,11","-11,-1,11","21,-1,-1","-21,-1,-1","21,-1,-3","-21,-1,-3","20,-1,-3","-20,-1,-3","20,-1,-4","-20,-1,-4","19,-1,-4","-19,-1,-4","19,-1,-5","-19,-1,-5","18,-1,-6","-18,-1,-6","18,-1,-5","-18,-1,-5","17,-1,-5","-17,-1,-5","17,-1,-4","-17,-1,-4","16,-1,-4","-16,-1,-4","15,-1,-4","-15,-1,-4","15,-1,-3","-15,-1,-3","14,-1,-3","-14,-1,-3","14,-1,-2","-14,-1,-2","13,-1,-2","-13,-1,-2","12,-1,-2","-12,-1,-2","12,-1,-1","-12,-1,-1","11,-1,-1","-11,-1,-1","10,-1,-1","-10,-1,-1","10,-1,0","-10,-1,0","9,-1,0","-9,-1,0","7,-1,1","7,-1,2","8,-1,1","7,-1,3","8,-1,2","6,-1,2","9,-1,1","7,-1,4","8,-1,3","6,-1,3","9,-1,2","10,-1,1","7,-1,5","8,-1,4","6,-1,4","9,-1,3","10,-1,2","11,-1,1","7,-1,6","8,-1,5","6,-1,5","9,-1,4","10,-1,3","11,-1,2","11,-1,0","12,-1,1","7,-1,7","8,-1,6","6,-1,6","9,-1,5","10,-1,4","11,-1,3","12,-1,2","12,-1,0","13,-1,1","7,-1,8","8,-1,7","6,-1,7","9,-1,6","10,-1,5","11,-1,4","12,-1,3","13,-1,2","13,-1,0","14,-1,1","7,-1,9","8,-1,8","6,-1,8","9,-1,7","10,-1,6","11,-1,5","12,-1,4","13,-1,3","14,-1,2","13,-1,-1","14,-1,0","15,-1,1","7,-1,10","8,-1,9","6,-1,9","9,-1,8","10,-1,7","11,-1,6","12,-1,5","13,-1,4","14,-1,3","15,-1,2","14,-1,-1","15,-1,0","16,-1,1","7,-1,11","8,-1,10","6,-1,10","9,-1,9","10,-1,8","11,-1,7","12,-1,6","13,-1,5","14,-1,4","15,-1,3","16,-1,2","15,-1,-1","16,-1,0","17,-1,1","7,-1,12","8,-1,11","6,-1,11","9,-1,10","10,-1,9","11,-1,8","12,-1,7","13,-1,6","14,-1,5","15,-1,4","16,-1,3","17,-1,2","15,-1,-2","16,-1,-1","17,-1,0","18,-1,1","7,-1,13","8,-1,12","6,-1,12","9,-1,11","10,-1,10","11,-1,9","12,-1,8","13,-1,7","14,-1,6","15,-1,5","16,-1,4","17,-1,3","18,-1,2","16,-1,-2","17,-1,-1","18,-1,0","19,-1,1","7,-1,14","8,-1,13","6,-1,13","9,-1,12","10,-1,11","11,-1,10","12,-1,9","16,-1,-3","17,-1,-2","18,-1,-1","19,-1,0","7,-1,15","8,-1,14","6,-1,14","9,-1,13","5,-1,13","10,-1,12","17,-1,-3","18,-1,-2","19,-1,-1","20,-1,0","7,-1,16","8,-1,15","6,-1,15","9,-1,14","5,-1,14","18,-1,-3","19,-1,-2","20,-1,-1","7,-1,17","8,-1,16","6,-1,16","5,-1,15","18,-1,-4","19,-1,-3","7,-1,18","6,-1,17","5,-1,16","6,-1,18","5,-1,17","6,-1,19","5,-1,18","6,-1,20","5,-1,19","5,-1,20","-7,-1,1","-7,-1,2","-8,-1,1","-7,-1,3","-6,-1,2","-8,-1,2","-9,-1,1","-7,-1,4","-6,-1,3","-8,-1,3","-9,-1,2","-10,-1,1","-7,-1,5","-6,-1,4","-8,-1,4","-9,-1,3","-10,-1,2","-11,-1,1","-7,-1,6","-6,-1,5","-8,-1,5","-9,-1,4","-10,-1,3","-11,-1,2","-11,-1,0","-12,-1,1","-7,-1,7","-6,-1,6","-8,-1,6","-9,-1,5","-10,-1,4","-11,-1,3","-12,-1,2","-12,-1,0","-13,-1,1","-7,-1,8","-6,-1,7","-8,-1,7","-9,-1,6","-10,-1,5","-11,-1,4","-12,-1,3","-13,-1,2","-13,-1,0","-14,-1,1","-7,-1,9","-6,-1,8","-8,-1,8","-9,-1,7","-10,-1,6","-11,-1,5","-12,-1,4","-13,-1,3","-14,-1,2","-13,-1,-1","-14,-1,0","-15,-1,1","-7,-1,10","-6,-1,9","-8,-1,9","-9,-1,8","-10,-1,7","-11,-1,6","-12,-1,5","-13,-1,4","-14,-1,3","-15,-1,2","-14,-1,-1","-15,-1,0","-16,-1,1","-7,-1,11","-6,-1,10","-8,-1,10","-9,-1,9","-10,-1,8","-11,-1,7","-12,-1,6","-13,-1,5","-14,-1,4","-15,-1,3","-16,-1,2","-15,-1,-1","-16,-1,0","-17,-1,1","-7,-1,12","-6,-1,11","-8,-1,11","-9,-1,10","-10,-1,9","-11,-1,8","-12,-1,7","-13,-1,6","-14,-1,5","-15,-1,4","-16,-1,3","-17,-1,2","-15,-1,-2","-16,-1,-1","-17,-1,0","-18,-1,1","-7,-1,13","-6,-1,12","-8,-1,12","-9,-1,11","-10,-1,10","-11,-1,9","-12,-1,8","-13,-1,7","-14,-1,6","-15,-1,5","-16,-1,4","-17,-1,3","-18,-1,2","-16,-1,-2","-17,-1,-1","-18,-1,0","-19,-1,1","-7,-1,14","-6,-1,13","-8,-1,13","-9,-1,12","-10,-1,11","-11,-1,10","-12,-1,9","-16,-1,-3","-17,-1,-2","-18,-1,-1","-19,-1,0","-7,-1,15","-6,-1,14","-8,-1,14","-5,-1,13","-9,-1,13","-10,-1,12","-17,-1,-3","-18,-1,-2","-19,-1,-1","-20,-1,0","-7,-1,16","-6,-1,15","-8,-1,15","-5,-1,14","-9,-1,14","-18,-1,-3","-19,-1,-2","-20,-1,-1","-7,-1,17","-6,-1,16","-8,-1,16","-5,-1,15","-18,-1,-4","-19,-1,-3","-7,-1,18","-6,-1,17","-5,-1,16","-6,-1,18","-5,-1,17","-6,-1,19","-5,-1,18","-6,-1,20","-5,-1,19","-5,-1,20","18,-1,-7","-18,-1,-7","17,-1,-6","-17,-1,-6","16,-1,-5","-16,-1,-5","13,-1,-3","-13,-1,-3","11,-1,-2","-11,-1,-2","14,-1,-4","-14,-1,-4","15,-1,-5","-15,-1,-5","16,-1,-6","-16,-1,-6","17,-1,-7","-17,-1,-7","18,-1,-8","-18,-1,-8","20,-1,-5","-20,-1,-5","-2,0,6","2,0,6","-2,0,7","2,0,7","19,-1,-8","-19,-1,-8","19,-1,-7","-19,-1,-7","19,-1,-6","-19,-1,-6","-1,4,21","1,4,21","0,4,21","2,4,20","-2,4,20","3,4,19","-3,4,19","2,4,8","-2,4,8","1,4,20","-1,4,20","1,4,19","-1,4,19","1,4,18","-1,4,18","-1,3,6","-2,1,16","2,1,16","-2,1,20","2,1,20","-2,-1,16","-2,-1,18","-2,1,18","2,3,16","2,3,18","2,1,18","2,-1,16","2,-1,18","-2,3,16","-2,3,14","2,3,14","-2,3,12","-2,1,12","-2,1,14","2,-1,12","2,-1,14","2,1,12","2,1,14","2,3,12","-2,-1,12","-2,-1,14","-2,3,18","-2,3,20","2,3,20","2,-1,20","-2,-1,20","-2,2,11","-2,0,11","2,0,11","2,2,11","0,2,21","0,0,21","0,0,17","-2,0,15","-2,0,19","0,2,17","-2,2,15","-2,2,19","2,2,15","2,2,19","2,0,15","2,0,19","0,2,13","0,0,13","-1,0,18","-1,0,16","-1,2,16","-1,2,18","1,2,18","1,2,16","1,0,16","1,0,18","-1,2,14","1,2,14","-1,2,12","-1,0,12","-1,0,14","1,0,14","1,0,12","1,2,12","-1,2,20","1,2,20","-1,0,20","1,0,20","0,0,2","0,0,3","0,0,4","0,0,5","0,-1,4","0,-1,3","-1,3,7","1,3,7","0,0,1","0,1,1","0,2,1","0,-1,1","5,-2,1","-5,-2,1","5,-2,2","-5,-2,2","5,-2,3","-5,-2,3","5,-2,4","-5,-2,4","5,-2,5","-5,-2,5","5,-2,6","-5,-2,6","5,-2,7","-5,-2,7","5,-2,8","-5,-2,8","5,-2,9","-5,-2,9","5,-2,10","-5,-2,10","5,-2,11","-5,-2,11","5,-2,12","-5,-2,12","5,-2,13","-5,-2,13","5,-2,14","-5,-2,14","5,-2,15","-5,-2,15","5,-2,16","-5,-2,16","5,-2,17","-5,-2,17","5,-2,18","-5,-2,18","5,-2,19","-5,-2,19","5,-2,20","-5,-2,20","5,-2,21","-5,-2,21","4,4,15","4,4,14","-4,4,14","4,4,13","-4,4,13","4,4,12","-4,4,12","4,4,11","-4,4,11","4,4,10","-4,4,10","4,4,9","-4,4,9","4,4,8","-4,4,8","4,4,7","-4,4,7","4,4,6","-4,4,6","4,4,5","-4,4,5","4,4,4","-4,4,4","4,4,3","-4,4,3","4,4,2","-4,4,2","4,4,1","-4,4,1","0,4,17","0,4,16","0,4,15","0,4,14","0,4,13","0,4,12","0,4,11","0,4,10","0,4,9","0,4,7","0,4,5","0,4,4","0,4,3","0,4,2","0,4,1","-3,4,1","-3,4,2","-3,4,3","-3,4,4","-3,4,5","-3,4,6","-3,4,7","-3,4,9","-3,4,10","-3,4,11","-3,4,12","-3,4,13","-3,4,14","-3,4,15","-3,4,16","-3,4,17","0,4,18","-4,4,15","-4,4,16","-4,4,17","-4,4,18","-4,4,19","-4,4,20","-4,4,21","4,4,21","4,4,20","4,4,19","4,4,18","4,4,17","4,4,16","5,-2,22","5,-2,-1","-5,-2,-1","5,-2,0","-5,-2,0","-4,-3,19","-2,-3,19","-4,4,0","-3,4,0","0,4,0","4,4,0","0,-1,28","0,-1,0","5,-1,0","-5,-1,0","5,-1,1","-5,-1,1","5,-1,2","-5,-1,2","5,-1,3","-5,-1,3","5,-1,4","-5,-1,4","5,-1,5","-5,-1,5","5,-1,6","-5,-1,6","5,-1,7","-5,-1,7","5,-1,8","-5,-1,8","-4,-1,12","-4,-1,11","-1,3,22","-3,0,9","-3,1,9","-3,2,9","-2,0,9","-2,1,9","-1,0,9","-1,2,9","0,-1,9","1,-1,9","3,-1,9","3,0,9","3,2,9","2,1,9","3,1,9","2,2,9","0,2,24","0,2,25","0,-1,29","0,3,24","0,3,4","0,3,3","0,3,2","0,2,2","0,2,3","0,2,4","0,2,5","0,-1,6","0,0,6","0,1,6","0,2,6","0,3,6","0,4,6","1,4,6","0,-2,6","0,-1,7","0,-1,5","0,3,5","0,2,7","0,1,7","0,0,7","-1,2,7","1,2,7","0,-3,9","0,3,7","0,-2,7","0,2,9","1,-1,22","0,-1,22","-1,-1,22","1,0,22","0,0,22","-1,0,22","-1,1,22","-20,-1,-2","-21,-1,-2","21,-1,-2","20,-1,-2","0,4,-1","0,3,26","-1,-1,9","-2,-1,9","-3,-1,9","0,0,9","0,1,9","0,2,-2","-1,2,22"],"BLR":[8,8,10,0,0,0,0,0,10,10,4,10,4,10,4,18,1,17,4,18,17,4,18,17,4,18,1,12,4,14,4,14,4,18,1,17,4,18,17,4,18,17,4,18,1,6,4,6,4,6,4,18,1,10,4,15,4,15,4,15,4,15,4,15,4,23,22,23,22,23,22,4,15,4,15,4,15,4,15,4,15,4,23,22,23,22,23,22,23,23,4,3,4,3,4,3,4,3,4,3,4,8,10,4,4,4,4,4,4,4,4,4,4,4,4,16,19,4,16,19,4,16,4,4,12,4,4,4,12,4,4,4,12,17,4,18,17,4,18,17,4,18,0,4,4,4,4,4,4,4,4,4,4,4,14,10,4,13,4,13,4,13,4,13,4,13,4,22,23,22,23,22,23,4,13,4,13,4,13,4,13,4,13,4,4,22,23,22,23,22,23,17,4,1,4,1,4,1,4,1,4,1,4,0,10,10,4,10,4,10,4,18,11,19,4,16,19,4,16,19,4,18,12,4,14,4,14,4,18,19,4,16,19,4,16,19,4,18,6,4,6,4,6,4,18,0,10,23,23,0,0,0,0,0,8,8,18,4,4,0,0,10,8,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,12,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,16,16,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,16,1,0,0,0,0,0,12,12,0,0,16,16,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,12,12,0,0,0,16,16,2,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,10,10,10,18,10,0,0,0,0,12,12,0,0,0,18,18,2,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,0,0,18,18,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,12,0,18,18,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,18,3,0,0,0,0,0,12,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,0,0,0,0,0,0,10,10,10,10,3,1,3,1,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,18,16,18,16,18,16,18,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,0,0,2,2,2,2,2,2,2,2,2,2,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,15,13,13,13,13,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,14,14,14,14,14,14,14,15,13,10,10,10,10,2,2,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,15,13,15,13,12,12,12,12,12,0,0,0,0,0,0,1,1,1,1,9,11,9,11,9,11,10,10,3,1,2,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,12,12,12,12,0,0,0,0,0,0,0,0,0,1,3,1,3,1,3,1,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,5,7,1,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,3,3,3,3,3,3,3,1,1,1,1,1,1,12,5,7,5,7,12,15,3,1,1,1,0,8,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,8,8,0,0,16,0,12,0,14,3,3,10,23,23,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,10,8,8,8,8,8,1,10,8,10,0,0,0,0,0,0,14,12,0,0,0,0,0,0,0,0,0,1,1,1,1,5,5,0,0,0,0,0,4,7],"BP1":null,"BP2":nullnull,"BlockData":"","VehicleData":"","designChanged":false,"blueprintVersion":42,"blueprintName":"Baby Gihon CB 2","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":672,"LocalPosition":"19979.69,379.3171,16819.52","LocalRotation":"-0.001404281,0.9789667,0.01358945,0.2035626","ForceId":1839788628,"TotalBlockCount":1686,"MaxCords":"21,4,31","MinCords":"-21,-3,-8","BlockIds":[1301,1301,1301,281,281,281,281,281,1301,292,296,292,296,292,296,281,1301,292,296,292,292,296,292,292,296,281,1301,292,296,292,296,292,296,281,1301,292,296,292,292,296,292,292,296,281,1301,292,296,292,296,292,296,281,1301,1301,296,292,296,292,296,292,296,292,296,292,296,292,292,292,292,292,292,296,292,296,292,296,292,296,292,296,292,296,292,292,292,292,292,292,1301,1301,296,292,296,292,296,292,296,292,296,292,296,1301,1301,296,296,296,296,296,296,296,296,296,296,296,296,292,292,296,292,292,296,292,296,296,292,296,296,296,292,296,296,296,292,756,296,292,292,296,292,292,296,292,343,296,296,296,296,296,296,296,296,296,296,296,339,1301,296,292,296,292,296,292,296,292,296,292,296,292,292,292,292,292,292,296,292,296,292,296,292,296,292,296,292,296,280,292,292,292,292,292,292,392,296,292,296,292,296,292,296,292,296,292,296,344,1301,292,296,292,296,292,296,281,1301,292,296,292,292,296,292,292,296,281,292,296,292,296,292,296,281,292,296,292,292,296,292,292,296,281,292,296,292,296,292,296,281,680,1301,1301,1301,281,281,281,281,281,1301,1301,1299,277,274,371,371,390,390,1526,1522,1,0,1,0,1261,0,1,0,1261,1,0,1261,0,1287,1526,1522,0,1,0,1,0,1261,1,0,1,0,1261,0,1,0,1261,1,0,1261,0,1287,1,1526,1522,0,1,0,1,0,1,1261,1,0,1,0,1,1263,0,1,0,1,1333,1308,1,0,1,1261,0,1295,1287,0,1,1526,1522,680,0,1,0,1261,0,1,0,1324,0,1,0,1264,0,1261,1295,1287,1,0,1,1527,1522,559,1299,0,1,0,1266,0,1,0,1304,0,1,0,1304,1,0,1304,0,1306,1301,960,960,1337,1299,1305,1304,1304,1304,1294,1286,1,0,1,1527,1522,559,1299,0,1,0,1265,0,1,0,1304,0,1,0,1304,1,0,1304,0,1294,1286,0,1,1526,1522,680,0,1,0,1262,0,1,0,1320,0,1,0,1263,0,1262,1286,1,1526,1522,0,1,0,1,0,1,1262,1,0,1,0,1,1264,0,1,0,1,1329,1309,1,0,1,1262,0,1286,1526,1522,0,1,0,1,0,1262,1,0,1,0,1262,0,1,0,1262,1,0,1262,0,1526,1522,1,0,1,0,1262,0,1,0,1262,1,0,1262,0,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,16,16,37,37,19,19,19,19,1301,1301,1301,1301,611,611,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,863,863,863,863,863,863,863,863,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1301,1328,1332,1302,1303,1302,1303,1302,1303,1302,1303,1302,1303,1295,1294,1295,1286,680,680,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1301,1301,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,853,853,853,853,853,446,446,58,58,58,58,13,13,1301,1301,1301,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1300,853,1301,1301,1301,1301,852,852,446,446,863,48,48,37,37,37,37,756,756,1300,1300,1302,1303,1304,1304,1304,1304,1328,1332,1302,1303,1304,0,0,1300,853,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,443,44,44,39,39,559,559,559,559,857,857,863,863,863,863,863,863,863,446,446,446,446,852,852,853,853,0,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,285,285,285,285,285,287,287,287,287,287,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,1,1,1,1,1,1,0,0,1,1,1,1,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,857,854,854,854,854,854,854,854,854,854,854,854,854,854,854,854,853,853,853,853,853,853,853,853,853,853,853,853,853,853,853,853,853,857,857,857,857,857,857,857,857,857,857,857,857,857,1287,1328,1332,857,857,1294,852,857,853,854,857,768,960,966,966,966,966,966,966,966,966,966,966,966,966,966,966,966,966,966,966,960,960,387,344,339,387,392,343,756,756,756,1301,592,592,559,559,680,680,0,0,0,0,0,0,0,0,0,0,0,422,419,419,419,419,419,853,394,395,395,0,0,0,0,0,0,854,1299,1300,679,679,679,679,679,679,679,774,545,545,545,545,545,545,756,756,756,756,756,594,338],"BlockState":"=0,1686","AliveCount":1686,"BlockStringData":["-- V5\r\n\r\n\r\n\r\n\r\n-- User-friendly settings:\r\n\r\n\r\n--  1. Is it a ship or a plane? Set this to 'true' for plane.\r\n            IsConstructPlane = true \r\n\r\n--  2. Choose your AI type:\r\n--      'true' for standard AI, 'false' for breadboard\r\n            DoTakeControlFromAiAndSendYawCommand = false\r\n\r\n--      'true' for full breadboard AI, 'false' for standard AI\r\n            DoSendComplexControlCommand = true\r\n\r\n\r\n\r\n\r\n\r\n--  The end of user-friendly settings! \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--  Behavior\r\n            DisablePitchControlForPlanes = false\r\n            ShouldYourPlaneAvoidEnemyShips = false\r\n\r\n            ShowMessageForRunningAndWarnings = false\r\n\r\n--  Dimensions and margins\r\n            SafeDistance = 100\r\n            SafeDistanceForPlanes = 30\r\n            ExtraDistanceForBeingFriendly = 20\r\n\r\n            MaximumSizeOfEnemyShip = 300\r\n            MaximumSizeOfEnemyPlane = 100\r\n\r\n            MaximumTimeForCoursePrediction = 15\r\n\r\n            UsePitchAltitudeLimit = true\r\n            MinimumAltitudeForPlanePitchDown = 150\r\n            MaximumAltitudeForPlanePitchUp = 450\r\n\r\n            ActiveCraftsPerFrame = 3\r\n\r\n--  Delays, in frames (1/40 of a second)\r\n            DelayBeforeTakingControlFromStandardAI = 5\r\n            StartupDelay = 5\r\n\r\n--  Leave this as 'true', unless you are building illegal melee craft or hate your own fleet\r\n            DoCheckForCollisionWithEnemy = true\r\n            DoCheckForCollisionWithFriendlies = true\r\n\r\n--  Values for control axies, useful for standard AI\r\n            PropulsionRequestWhileAvoiding = 1\r\n            PropulsionRequestToStopOrReverse = 0.1\r\n            PropulsionRequestForYawRight = -1\r\n            PropulsionRequestForPitchUp = 1\r\n\r\n--  Meaning of complex controls for commands, used for breadboard\r\n            CCCForYawRight = 8  -- K\r\n            CCCForYawLeft = 4  -- H\r\n            CCCWhileAvoiding = 5 -- U\r\n            CCCToStopOrReverse = 6 -- J\r\n            \r\n            CCCForPitchUp = 5 -- U\r\n            CCCForPitchDown = 6 -- J\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--[[\r\n\r\n\r\n\r\n\r\nFirst shalt thou set type of AI and craft, be that bread or standard, ship or plane.\r\nThen, shalt thou do no more, but do no less.\r\nSetting of the types shalt be the change thou shalt do,\r\n and the only change to the script shall be setting of the AI and craft type.\r\nAny functions shalt thou not change, nor either unknown variables,\r\n excepting that thou set the AI type and craft.\r\nAny change to the any function is right out.\r\nOnce the type of AI and craft, being in the beginning of the script, be set,\r\n then all changes shall be ceased and no naughty collisions thou shalt suffer.\r\n \r\n \r\n\r\n\r\n\r\n]]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--                                      Don't touch the rest!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nCounterForDelayBeforeTakingControlFromStandardAI = 0\r\n\r\nFrameCounter = 0\r\nLastActiveFrame = 0\r\nNumberOfSkippedFrames = 1\r\n\r\nPreferredRight = true\r\nAggressiveForward = true\r\n\r\n--MaximumRateOfRotation = 25\r\n--MinimumRateOfRotation = 1\r\n\r\n--YawCommandMultiplier = 1\r\n--TryToOversaturateControlAxies = false\r\n\r\n\r\nDoInitializationOnStart = true\r\n\r\nConstructDimensions = Vector3(1, 1, 1)\r\nConstructSphericalHalfSize = 0\r\n\r\n--EnemySphericalHalfSize = MaximumSizeOfEnemyShip/2 \r\nEnemySphericalHalfSize = MaximumSizeOfEnemyShip/2\r\nDimensionsOfFriendlies = {}\r\nConstantForConstructId = -99\r\nConstantForEnemyId = -77\r\n\r\nLastFrameConstructVelocity = Vector3(0, 0, 0)\r\nConstructCurrentSpeed = 10\r\nConstructCurrentCourse = 0\r\nConstructMaxTurnRate = 10\r\nTimeNeededForConstructToReactSafely = 3\r\nLastFramePositionsAndVectors = {}\r\nRateOfRotationAndSpeed = {}\r\nDeclineOfRateOfRotation = 0.999        -- Redo\r\nDeclineOfSpeed = 0.9992\r\nEmaNumber = 0.1\r\nEmaNumberForConstructSpeed = 0.1\r\nEmaNumberForCourse = 0.15           -- As function of speed or something !!!\r\nEmaNumberForMaxCourse = 0.01\r\nEmaNumberForTurnRate = 0.1\r\nConstantForBigNumber = 999999\r\n\r\nConstantForFramesPerSecond = 40\r\n\r\nNumberOfFramesToPredictWith = 10\r\n\r\nConstructForwardsVelocityMagnitude = 0\r\n\r\nConstructHealthFractionWhenMaxSpeed = 1\r\nConstructHealthFractionWhenMaxTurnRate = 1\r\nConstructMaxSpeed = 0\r\nChangeInConstructHealthBeforeEvaluation = 0.98\r\n\r\nConstructMaxTurnRateLongAverage = 0\r\n\r\nPreviousCountForEnemiesAndFriendlies = 0\r\nPreviousCountForFriendlies = 0\r\nConstructPriorityNumber = 0\r\n\r\nDesiredYaw = 0\r\nDesiredForward = 0\r\nDesiredPitch = 0\r\n\r\nCounterForPollDelay = -99\r\nPollResultForPreviousFrame = 0\r\nVictoryInThePoll = false\r\nVictoryInThePollForPreviousFrame = false\r\n\r\nCourseChangeDegreesForPlane = 30\r\n\r\nfunction UpdateRotationAndSpeed(constructVelocity, newPositionsAndVectors)                             -- Need fix for angle at low speed?\r\n    local constructHealthFraction = I:GetHealthFraction()\r\n    \r\n    if constructVelocity.magnitude < 5 or (constructVelocity-LastFrameConstructVelocity).magnitude < 1 then\r\n        constructVelocity = LastFrameConstructVelocity\r\n    end\r\n\r\n    if constructVelocity.magnitude >= ConstructMaxSpeed then\r\n        ConstructMaxSpeed = ConstructMaxSpeed * (1 - EmaNumberForConstructSpeed) + constructVelocity.magnitude * EmaNumberForConstructSpeed\r\n        ConstructHealthFractionWhenMaxSpeed = constructHealthFraction\r\n    elseif constructHealthFraction <= ConstructHealthFractionWhenMaxSpeed * ChangeInConstructHealthBeforeEvaluation then\r\n        ConstructMaxSpeed = ConstructMaxSpeed - ConstructMaxSpeed * constructHealthFraction / ConstructHealthFractionWhenMaxSpeed / ConstantForFramesPerSecond * NumberOfSkippedFrames / 10\r\n    end    \r\n    \r\n    ConstructCurrentSpeed = math.max(1, ConstructCurrentSpeed * (1 - EmaNumber) + constructVelocity.magnitude * EmaNumber)            -- Reverse ??\r\n    \r\n    local constructTurnRate = Vector3.SignedAngle(constructVelocity, LastFrameConstructVelocity, Vector3.up) / NumberOfSkippedFrames\r\n    ConstructCurrentCourse = ConstructCurrentCourse * (1 - EmaNumberForCourse)\r\n            + constructTurnRate * ConstantForFramesPerSecond * EmaNumberForCourse\r\n    \r\n    ConstructMaxTurnRateLongAverage = ConstructMaxTurnRateLongAverage * (1 - EmaNumberForMaxCourse) + math.abs(constructTurnRate * ConstantForFramesPerSecond) * EmaNumberForMaxCourse\r\n    if ConstructMaxTurnRateLongAverage >= ConstructMaxTurnRate then\r\n        ConstructMaxTurnRate = ConstructMaxTurnRate * (1 - EmaNumberForCourse) + ConstructMaxTurnRateLongAverage * EmaNumberForCourse\r\n        ConstructHealthFractionWhenMaxTurnRate = constructHealthFraction\r\n    elseif (constructHealthFraction <= ConstructHealthFractionWhenMaxTurnRate * ChangeInConstructHealthBeforeEvaluation)\r\n            or (ConstructMaxTurnRate > ConstructMaxTurnRateLongAverage * 2) then\r\n        ConstructMaxTurnRate = ConstructMaxTurnRate - ConstructMaxTurnRate * constructHealthFraction / ConstructHealthFractionWhenMaxTurnRate / ConstantForFramesPerSecond * NumberOfSkippedFrames / 10\r\n    end\r\n\r\n    if math.abs(ConstructCurrentCourse) > ConstructMaxTurnRate then\r\n        ConstructCurrentCourse = ConstructCurrentCourse * 0.9\r\n    end\r\n\r\n    TimeNeededForConstructToReactSafely = math.min(math.max(90 / ConstructMaxTurnRate, 1), MaximumTimeForCoursePrediction)\r\n    \r\n    local newRateOfRotationAndSpeed = {}\r\n    for id, data in pairs(newPositionsAndVectors) do\r\n        if not LastFramePositionsAndVectors[id] then\r\n            RateOfRotationAndSpeed[id] = {Id = data.Id, CurrentCourse = 0, MaxSpeed = 1}\r\n            LastFramePositionsAndVectors[id] = {Id = data.Id, Position = data.Position, Velocity = data.Velocity}\r\n        end        \r\n        newRateOfRotationAndSpeed[id] = {\r\n            Id = data.Id,           \r\n            CurrentCourse = RateOfRotationAndSpeed[id].CurrentCourse * (1 - EmaNumberForCourse)\r\n                    + Vector3.SignedAngle(data.Velocity, LastFramePositionsAndVectors[id].Velocity, Vector3.up) * ConstantForFramesPerSecond * EmaNumberForCourse,\r\n            MaxSpeed = math.max(1, RateOfRotationAndSpeed[id].MaxSpeed * DeclineOfSpeed,\r\n                    RateOfRotationAndSpeed[id].MaxSpeed * (1 - EmaNumber) + data.Velocity.magnitude * EmaNumber)\r\n        }\r\n    end\r\n    RateOfRotationAndSpeed = newRateOfRotationAndSpeed\r\n    LastFrameConstructVelocity = constructVelocity\r\nend\r\n\r\n\r\nfunction GetSphericalHalfSize(id)\r\n    if id == ConstantForConstructId then\r\n        return ConstructSphericalHalfSize\r\n    end\r\n    if id == ConstantForEnemyId then\r\n        return EnemySphericalHalfSize                                            -- Add size list \r\n    end\r\n\r\n    if DimensionsOfFriendlies[id] ~= nil then\r\n        return DimensionsOfFriendlies[id].MaxSphericalHalfSize                   -- check id for the rest\r\n    end\r\n    \r\n --   DBG(\"No size for Id: \"..id..\"  ConstantForConstructId: \"..ConstantForConstructId..\"  ConstantForEnemyId: \"..ConstantForEnemyId)\r\n    return EnemySphericalHalfSize\r\nend\r\n\r\n\r\nfunction GetDistanceToObstacleSphere (constructPosition, obstaclePosition, obstacleId)   -- Skip check for construct if not used in full\r\n    return (constructPosition - obstaclePosition).magnitude - ConstructSphericalHalfSize --[[GetSphericalHalfSize(ConstantForConstructId) ]]- GetSphericalHalfSize(obstacleId)\r\nend\r\n\r\n\r\nfunction CalculateFlybyDistanceAndTime(constructPosition, constructVelocity, obstaclePosition, obstacleVelocity, obstacleId)   \r\n    local currentSphericalDistance = GetDistanceToObstacleSphere(constructPosition, obstaclePosition, obstacleId)           -- Add id for frd     \r\n    local distanceVector = constructPosition - obstaclePosition    \r\n    local velocityProjection = Vector3.Dot(constructVelocity - obstacleVelocity, distanceVector) / distanceVector.magnitude\r\n    local timeToCloseTheDistance = (currentSphericalDistance / velocityProjection) * -1 \r\n    local predictedPositionForObstacle = obstaclePosition + obstacleVelocity * timeToCloseTheDistance            \r\n    local predictedPositionForConstruct = constructPosition + constructVelocity * timeToCloseTheDistance\r\n    local predictedDistance = GetDistanceToObstacleSphere(predictedPositionForConstruct, predictedPositionForObstacle, obstacleId)\r\n    return predictedDistance, timeToCloseTheDistance, currentSphericalDistance, predictedPositionForConstruct.y\r\nend\r\n\r\n\r\nfunction FindMinimalFlybyDistanceAndTime(constructPosition, constructVelocity, positionsAndVectors)\r\n    local minDistancePredicted = ConstantForBigNumber\r\n    local minTimePredicted = ConstantForBigNumber\r\n    local minDistance = ConstantForBigNumber\r\n    local constructNewAltitudeForClosest = 0\r\n    local closestObstacleId = 0 \r\n    \r\n    for id, data in pairs(positionsAndVectors) do\r\n            local distancePrediction, timePrediction, currentSphericalDistance, constructNewAltitude = CalculateFlybyDistanceAndTime(\r\n                                                            constructPosition, constructVelocity,\r\n                                                            data.Position, data.Velocity, data.Id)\r\n        if timePrediction < minTimePredicted and timePrediction > 0 then\r\n            minDistancePredicted = distancePrediction\r\n            minTimePredicted = timePrediction\r\n            constructNewAltitudeForClosest = constructNewAltitude\r\n        end\r\n        if currentSphericalDistance < minDistance then\r\n            minDistance = currentSphericalDistance\r\n            closestObstacleId = id\r\n        end\r\n     --   DBG(\"FB: id: \"..id..\" distancePrediction: \"..distancePrediction..\" timePrediction:\"..timePrediction..\" currentSphericalDistance: \"..currentSphericalDistance)\r\n    end\r\n    return minDistancePredicted, minTimePredicted, minDistance, closestObstacleId, constructNewAltitudeForClosest                  \r\nend\r\n\r\n\r\nfunction PredictFutureCircularPosition(travelTime, currentPosition, velocityVector, speed, rateOfTurn, currentCourse)           -- V3 math are FUUUCKING SLOOOOW!\r\n    local timeToChangeCourse = math.abs((currentCourse - rateOfTurn) / rateOfTurn)\r\n    local partialCourseChange = (rateOfTurn * (travelTime / timeToChangeCourse) + currentCourse) / 2\r\n\r\n    if travelTime < timeToChangeCourse then\r\n      --  return currentPosition + Quaternion.AngleAxis(medianCourse, Vector3.up) * velocityVector * (travelTime * 0.8)       -- Am i happy with this? \r\n        return currentPosition + Quaternion.AngleAxis(partialCourseChange, Vector3.up) * velocityVector.normalized * speed * (travelTime * 0.8)\r\n    end\r\n    \r\n    local medianCourse = (rateOfTurn + currentCourse) / 2\r\n    \r\n    travelTime = travelTime - timeToChangeCourse\r\n    local vectorFromStartToCenter = Quaternion(0, 0.70710676908493, 0, 0.70710676908493) * velocityVector.normalized * (speed * 180 / rateOfTurn /  math.pi)\r\n    local vectorFromCenterToPredictionPoint = Quaternion.AngleAxis(rateOfTurn * travelTime, Vector3.up) * (vectorFromStartToCenter * -1)\r\n    return currentPosition + Quaternion.AngleAxis(medianCourse, Vector3.up) * velocityVector * timeToChangeCourse\r\n            + vectorFromStartToCenter + vectorFromCenterToPredictionPoint\r\nend\r\n\r\n\r\nfunction CompareSafetyOfManeuversAndChooseDirectionOfTurn (timeNeededToReactSafely, numberOfFrames, constructPosition, constructVelocity, currentPositionsAndVectors)\r\n    local constructSpeed = ConstructCurrentSpeed\r\n    local constructCurrentCourse = ConstructCurrentCourse * -0.7\r\n    local constructHardRightCourse = ConstructMaxTurnRate * 0.7\r\n    local constructHardLeftCourse = ConstructMaxTurnRate * -0.7\r\n\r\n   -- DBG(\"L: \"..constructHardLeftCourse..\" C: \"..constructCurrentCourse..\" R: \"..constructHardRightCourse)\r\n\r\n    local minCurrentDistanceCurrentCourse, minFinalCurrentDistanceCurrentCourse = ConstantForBigNumber, ConstantForBigNumber\r\n    local minCurrentDistanceHardRightCourse, minFinalCurrentDistanceHardRightCourse = ConstantForBigNumber, ConstantForBigNumber\r\n    local minCurrentDistanceHardLeftCourse, minFinalCurrentDistanceHardLeftCourse = ConstantForBigNumber, ConstantForBigNumber\r\n\r\n    local averageDistanceCC, averageDistanceHR, averageDistanceHL = 0, 0, 0\r\n    \r\n    for currentFrame = 1, numberOfFrames do\r\n        local timeFrame = timeNeededToReactSafely / numberOfFrames * currentFrame\r\n\r\n        local constructPositionCurrentCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructCurrentCourse, constructCurrentCourse)\r\n        local constructPositionHardRightCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructHardRightCourse, constructCurrentCourse)\r\n        local constructPositionHardLeftCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructHardLeftCourse, constructCurrentCourse)\r\n\r\n        for id, data in pairs(currentPositionsAndVectors) do\r\n            local currentCourse = Get_TurnRate(id)\r\n            local obstaclePosition = PredictFutureCircularPosition (timeFrame, data.Position, data.Velocity, Get_Speed(id), currentCourse, currentCourse)\r\n            local fakeId = data.Id\r\n\r\n            local currentDistanceCurrentCourse = GetDistanceToObstacleSphere(constructPositionCurrentCourse, obstaclePosition, fakeId)\r\n            local currentDistanceHardRightCourse = GetDistanceToObstacleSphere(constructPositionHardRightCourse, obstaclePosition, fakeId)\r\n            local currentDistanceHardLeftCourse = GetDistanceToObstacleSphere(constructPositionHardLeftCourse, obstaclePosition, fakeId)\r\n\r\n            averageDistanceCC = averageDistanceCC + currentDistanceCurrentCourse                        -- Ignore by distance\r\n            averageDistanceHR = averageDistanceHR + currentDistanceHardRightCourse\r\n            averageDistanceHL = averageDistanceHL + currentDistanceHardLeftCourse\r\n            \r\n            if currentFrame == numberOfFrames then\r\n                if currentDistanceCurrentCourse < minFinalCurrentDistanceCurrentCourse then\r\n                    minFinalCurrentDistanceCurrentCourse = currentDistanceCurrentCourse\r\n                end\r\n                if currentDistanceHardRightCourse < minFinalCurrentDistanceHardRightCourse then\r\n                    minFinalCurrentDistanceHardRightCourse = currentDistanceHardRightCourse\r\n                end\r\n                if currentDistanceHardLeftCourse < minFinalCurrentDistanceHardLeftCourse then\r\n                    minFinalCurrentDistanceHardLeftCourse = currentDistanceHardLeftCourse\r\n                end\r\n            else\r\n                if currentDistanceCurrentCourse < minCurrentDistanceCurrentCourse then\r\n                    minCurrentDistanceCurrentCourse = currentDistanceCurrentCourse\r\n                end\r\n                if currentDistanceHardRightCourse < minCurrentDistanceHardRightCourse then\r\n                    minCurrentDistanceHardRightCourse = currentDistanceHardRightCourse\r\n                end\r\n                if currentDistanceHardLeftCourse < minCurrentDistanceHardLeftCourse then\r\n                    minCurrentDistanceHardLeftCourse = currentDistanceHardLeftCourse\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n    end\r\n\r\n    averageDistanceCC = averageDistanceCC / numberOfFrames\r\n    averageDistanceHR = averageDistanceHR / numberOfFrames\r\n    averageDistanceHL = averageDistanceHL / numberOfFrames\r\n--[[\r\n    DBG(\"minCurrentDistanceHardLeftCourse: \"..minCurrentDistanceHardLeftCourse\r\n            ..\" minCurrentDistanceCurrentCourse: \"..minCurrentDistanceCurrentCourse\r\n            ..\" minCurrentDistanceHardRightCourse: \"..minCurrentDistanceHardRightCourse)\r\n    DBG(\"minFinalCurrentDistanceHardLeftCourse: \"..minFinalCurrentDistanceHardLeftCourse\r\n            ..\" minFinalCurrentDistanceCurrentCourse: \"..minFinalCurrentDistanceCurrentCourse\r\n            ..\" minFinalCurrentDistanceHardRightCourse: \"..minFinalCurrentDistanceHardRightCourse)\r\n    DBG(\"averageDistanceHL: \"..averageDistanceHL\r\n            ..\" averageDistanceCC: \"..averageDistanceCC\r\n            ..\" averageDistanceHR: \"..averageDistanceHR)\r\n\r\n    ]]\r\n    local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n    local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n    local YawDirectionSign = 1\r\n    if ConstructForwardsVelocityMagnitude < 0 then                                          -- Redo!\r\n        propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n        PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n        YawDirectionSign = -1\r\n    end\r\n    \r\n    if AggressiveForward \r\n            and minFinalCurrentDistanceCurrentCourse > SafeDistance and (minCurrentDistanceCurrentCourse > SafeDistance\r\n            or (minCurrentDistanceCurrentCourse > 0 and averageDistanceCC > averageDistanceHL and averageDistanceCC > averageDistanceHR))\r\n       --     and minCurrentDistanceCurrentCourse > minCurrentDistanceHardLeftCourse and minCurrentDistanceCurrentCourse > minCurrentDistanceHardRightCourse \r\n    then    \r\n        DBG(\"It's fine!\")\r\n        return 0, 0, 0\r\n    end\r\n    \r\n    if PreferredRight and minFinalCurrentDistanceHardRightCourse > SafeDistance and minCurrentDistanceHardRightCourse > 0 \r\n        and averageDistanceHR > averageDistanceHL\r\n    then\r\n        DBG(\"Preferred Right.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse and\r\n            minFinalCurrentDistanceHardRightCourse > SafeDistance and\r\n            minCurrentDistanceHardRightCourse > 0 then\r\n        DBG(\"Go right. Safe.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardLeftCourse > minFinalCurrentDistanceHardRightCourse and\r\n            minFinalCurrentDistanceHardLeftCourse > SafeDistance and\r\n            minCurrentDistanceHardLeftCourse > 0 then\r\n        DBG(\"Go left. Safe.\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardRightCourse < 0 and minFinalCurrentDistanceHardLeftCourse < 0 then\r\n        if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse then\r\n        --if minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse then\r\n            DBG(\"Right. Unsafe!\")\r\n            return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n        else\r\n            DBG(\"Left. Unsafe!\")\r\n            return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0  \r\n        end\r\n    end\r\n \r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse\r\n            and minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse\r\n    then\r\n        DBG(\"Right. Unsafe 2!\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n    if minFinalCurrentDistanceHardLeftCourse > minFinalCurrentDistanceHardRightCourse\r\n            and minCurrentDistanceHardLeftCourse > minCurrentDistanceHardRightCourse\r\n    then    \r\n        DBG(\"Left. Unsafe 2!\")\r\n         return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n        \r\n    end\r\n\r\n    if  averageDistanceHR > averageDistanceHL\r\n            and minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse then\r\n        DBG(\"Right. Unsafe 3 !\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0    \r\n    end\r\n    if averageDistanceHL > averageDistanceHR\r\n            and minCurrentDistanceHardLeftCourse > minCurrentDistanceHardRightCourse then\r\n        DBG(\"Left. Unsafe 3 !\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n    \r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse then\r\n        DBG(\"Attaque! Right.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\n    else\r\n        DBG(\"Attaque! Left.\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, PropulsionRequestReverse, 0\r\n    end\r\n\r\n    return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\nend\r\n\r\n\r\n\r\nfunction CompareSafetyOfManeuversAndChooseDirectionOfTurnForPlane(constructPosition, constructVelocity, newPositionsAndVectors, timeToCollision)\r\n    local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n    local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n    local YawDirectionSign = 1\r\n    if ConstructForwardsVelocityMagnitude < 0 then                                          -- Redo!\r\n        propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n        PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n        YawDirectionSign = -1\r\n    end\r\n    \r\n    \r\n    local angleStep = CourseChangeDegreesForPlane\r\n    local desiredYaw, desiredForward, desiredPitch = 0, 0, 0\r\n\r\n    local constructRightVector = I:GetConstructRightVector()\r\n    local constructUpVector = I:GetConstructUpVector()\r\n\r\n --   DBG(\"Up: \"..PV(constructUpVector))\r\n --   DBG(\"Ri: \"..PV(constructRightVector))    \r\n    \r\n    local minDistancePredictedUp, minTimePredictedUp, currentDistanceUp, closestObstacleIdUp, constructNewAltitudeUp\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * -1, constructRightVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedDown, minTimePredictedDown, currentDistanceDown, closestObstacleIdDown, constructNewAltitudeDown\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep, constructRightVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedLeft, minTimePredictedLeft, currentDistanceLeft, closestObstacleIdLeft, constructNewAltitudeLeft\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * -1, constructUpVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedRight, minTimePredictedRight, currentDistanceRight, closestObstacleIdRight, constructNewAltitudeRight\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep, constructUpVector) * constructVelocity, newPositionsAndVectors)\r\n\r\n    if minTimePredictedUp < timeToCollision and minTimePredictedDown < timeToCollision then\r\n        if minTimePredictedDown > minTimePredictedUp then\r\n            desiredPitch = PropulsionRequestForPitchUp * -1\r\n            desiredForward = PropulsionRequestReverse\r\n            DBG(\"Close. Down.\")\r\n        else\r\n            desiredPitch = PropulsionRequestForPitchUp\r\n            desiredForward = PropulsionRequestReverse\r\n            DBG(\"Close. Up.\")\r\n        end\r\n        if (constructNewAltitudeDown < MinimumAltitudeForPlanePitchDown or constructNewAltitudeUp > MaximumAltitudeForPlanePitchUp) and UsePitchAltitudeLimit then\r\n            desiredPitch = 0\r\n            desiredForward = 0\r\n            DBG(\"Pitch limit.\")\r\n        end        \r\n    end\r\n    if desiredPitch == 0 then\r\n        if minTimePredictedDown > minTimePredictedUp then\r\n            desiredPitch = PropulsionRequestForPitchUp * -1\r\n            desiredForward = propulsionRequestForward\r\n            DBG(\"Down.\")\r\n        else\r\n            desiredPitch = PropulsionRequestForPitchUp\r\n            desiredForward = propulsionRequestForward\r\n            DBG(\"Up.\")\r\n        end\r\n        if (constructNewAltitudeDown < MinimumAltitudeForPlanePitchDown or constructNewAltitudeUp > MaximumAltitudeForPlanePitchUp) and UsePitchAltitudeLimit  then\r\n            desiredPitch = 0\r\n            desiredForward = 0\r\n            DBG(\"Pitch limit.\")\r\n        end\r\n    end\r\n\r\n    if minTimePredictedLeft < timeToCollision and minTimePredictedRight < timeToCollision then\r\n        if minTimePredictedRight > minTimePredictedLeft then\r\n            desiredYaw = PropulsionRequestForYawRight * YawDirectionSign\r\n            desiredForward = PropulsionRequestReverse\r\n            DBG(\"Close. Right.\")\r\n        else\r\n            desiredYaw = PropulsionRequestForYawRight * YawDirectionSign * -1\r\n            desiredForward = PropulsionRequestReverse\r\n            DBG(\"Close. Left.\")\r\n        end\r\n     --[[   if (constructNewAltitudeDown < MinimumAltitudeForPlanePitchDown or constructNewAltitudeUp > MaximumAltitudeForPlanePitchUp) and UsePitchAltitudeLimit then\r\n            desiredYaw = 0\r\n            desiredForward = 0\r\n            DBG(\"Yaw limit.\")\r\n        end]]\r\n    end    \r\n    if desiredYaw == 0 then\r\n        if minTimePredictedRight > minTimePredictedLeft then\r\n            desiredYaw = PropulsionRequestForYawRight * YawDirectionSign\r\n            desiredForward = propulsionRequestForward\r\n            DBG(\"Right\")\r\n        else\r\n            desiredYaw = PropulsionRequestForYawRight * YawDirectionSign * -1\r\n            desiredForward = propulsionRequestForward\r\n            DBG(\"Left\")\r\n        end\r\n     --[[   if (constructNewAltitudeDown < MinimumAltitudeForPlanePitchDown or constructNewAltitudeUp > MaximumAltitudeForPlanePitchUp) and UsePitchAltitudeLimit then\r\n            desiredYaw = 0\r\n            desiredForward = 0\r\n            DBG(\"Yaw limit.\")\r\n        end    ]]    \r\n    end\r\n    --DBG(\"desiredYaw: \"..desiredYaw..\"  desiredForward: \"..desiredForward..\"  desiredPitch: \"..desiredPitch)\r\n\r\n    if DisablePitchControlForPlanes then\r\n        desiredPitch = 0 \r\n    end\r\n    \r\n    return desiredYaw, desiredForward, desiredPitch\r\nend\r\n\r\n\r\nfunction SetPriorityNumberAndCountFriendlies ()\r\n    local result = 0\r\n    local count = 1\r\n    local FriendlyIds = {}\r\n    local constructId = I:GetUniqueId()\r\n    table.insert (FriendlyIds, constructId)\r\n    for i = 0, I:GetFriendlyCount() - 1, 1 do\r\n        table.insert (FriendlyIds, I:GetFriendlyInfo(i).Id)\r\n        count = count + 1\r\n    end\r\n    \r\n    table.sort(FriendlyIds, function(a,b) return a<b end)\r\n\r\n    for _, data in pairs(FriendlyIds) do\r\n        if constructId == data then\r\n            break\r\n        end        \r\n        result = result + 1\r\n    end\r\n\r\n    PreviousCountForFriendlies = count\r\n    ConstructPriorityNumber = result\r\nend\r\n\r\n\r\nfunction ShouldItBeAvoided(info, position)\r\n    local altitude = position.y\r\n    local speed = info.Velocity.magnitude\r\n    \r\n    local isItPlane = false\r\n    if altitude > 15 or speed > 55 then\r\n        isItPlane = true\r\n    end\r\n\r\n    if IsConstructPlane == isItPlane then\r\n        return true\r\n    end\r\n\r\n    if IsConstructPlane and not isItPlane and ShouldYourPlaneAvoidEnemyShips then\r\n        return true\r\n    end\r\n\r\n    return false    \r\nend\r\n\r\nfunction DetectAndAvoidCollision()    \r\n    local friendlyCount = I:GetFriendlyCount()\r\n    local enemyCount = I:GetNumberOfTargets(0)\r\n\r\n    if (friendlyCount + 1) ~= PreviousCountForFriendlies then\r\n        SetPriorityNumberAndCountFriendlies()        \r\n    end\r\n    \r\n    local constructPosition = I:GetConstructCenterOfMass()\r\n    local constructVelocity = I:GetVelocityVector()\r\n\r\n    --constructVelocity.y=0                                                             -- Should it stay or should it go ??\r\n    \r\n    ConstructForwardsVelocityMagnitude = I:GetForwardsVelocityMagnitude()\r\n    local newPositionsAndVectors = {}                                 \r\n                                                                        \r\n    if DoCheckForCollisionWithFriendlies then\r\n        for i = 0, friendlyCount - 1, 1 do\r\n            local infoForObstacle = I:GetFriendlyInfo(i)\r\n            if ShouldItBeAvoided(infoForObstacle, infoForObstacle.CenterOfMass) then\r\n                newPositionsAndVectors[infoForObstacle.Id] = {\r\n                    Id = infoForObstacle.Id,\r\n                    Position = infoForObstacle.CenterOfMass,\r\n                    Velocity = infoForObstacle.Velocity\r\n                }\r\n            end\r\n        end\r\n    end\r\n\r\n    if DoCheckForCollisionWithEnemy then\r\n        for i = 0, enemyCount - 1, 1 do\r\n            local infoForObstacle = I:GetTargetInfo(0, i)\r\n            if ShouldItBeAvoided(infoForObstacle, infoForObstacle.Position) then\r\n                newPositionsAndVectors[infoForObstacle.Id] = {                                \r\n                    Id = ConstantForEnemyId, --infoForObstacle.Id,                           -- Deplorable! \r\n                    Position = infoForObstacle.Position,\r\n                    Velocity = infoForObstacle.Velocity\r\n                }\r\n            end            \r\n        end\r\n    end\r\n\r\n    DBG(\"Obstacles in play: \"..GetLengthOfTable(newPositionsAndVectors))\r\n\r\n    UpdateRotationAndSpeed(constructVelocity, newPositionsAndVectors)                                       -- Need some love\r\n    LastFramePositionsAndVectors = newPositionsAndVectors\r\n    \r\n    local minDistancePredicted, minTimePredicted, currentDistance, closestObstacleId\r\n        =  FindMinimalFlybyDistanceAndTime(constructPosition, constructVelocity, newPositionsAndVectors)\r\n    \r\n    local timeNeededToReactSafely = TimeNeededForConstructToReactSafely * 2\r\n  --  if IsConstructPlane then         \r\n  --      timeNeededToReactSafely = timeNeededToReactSafely / 2 \r\n  --  end\r\n    local distanceNeededToReactSafely = ConstructCurrentSpeed * TimeNeededForConstructToReactSafely * 2                -- wrong !!!\r\n    local numberOfFrames = NumberOfFramesToPredictWith\r\n    DBG(\"timeNeededToReactSafely: \"..timeNeededToReactSafely..\" distanceNeededToReactSafely: \"..distanceNeededToReactSafely..\" ConstructCurrentSpeed: \"..ConstructCurrentSpeed)\r\n    DBG(\"minDistancePredicted: \"..minDistancePredicted..\"  minTimePredicted: \"..minTimePredicted..\" currentDistance: \"..currentDistance)\r\n\r\n    if currentDistance < 0 then    \r\n        local obstacleRelativePosition = constructPosition - newPositionsAndVectors[closestObstacleId].Position\r\n                + newPositionsAndVectors[closestObstacleId].Velocity.normalized * (GetSphericalHalfSize(newPositionsAndVectors[closestObstacleId].Id) * 0.0)\r\n        local signForSide = constructVelocity.x * obstacleRelativePosition.z - constructVelocity.z * obstacleRelativePosition.x\r\n    \r\n        local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n        local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n        local YawDirectionSign = 1\r\n        if ConstructForwardsVelocityMagnitude < 0 then                                   --And again - Redo!\r\n            propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n            PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n            YawDirectionSign = -1\r\n        end\r\n\r\n        if signForSide > 0 then\r\n            DBG (\"All is lost! Left! \"..currentDistance..\"  signForSide: \"..signForSide)\r\n            return PropulsionRequestForYawRight * -1 * YawDirectionSign, PropulsionRequestReverse, 0                            -- Add pitch\r\n        else\r\n            DBG (\"All is lost! Right! \"..currentDistance..\"  signForSide: \"..signForSide)\r\n            return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\n        end\r\n        \r\n    elseif  (currentDistance < SafeDistance )\r\n            or (currentDistance < distanceNeededToReactSafely and minTimePredicted > 0 and minTimePredicted < timeNeededToReactSafely)\r\n            or (minDistancePredicted < SafeDistance and minTimePredicted > 0 and minTimePredicted < timeNeededToReactSafely) then        \r\n        if IsConstructPlane then\r\n            return CompareSafetyOfManeuversAndChooseDirectionOfTurnForPlane (constructPosition, constructVelocity, newPositionsAndVectors, minTimePredicted)\r\n        else\r\n            return CompareSafetyOfManeuversAndChooseDirectionOfTurn (timeNeededToReactSafely, numberOfFrames, constructPosition, constructVelocity, newPositionsAndVectors)\r\n        end\r\n    end\r\n    DBG (\"All good. \"..currentDistance) \r\n\r\n    return 0, 0, 0\r\nend\r\n\r\n\r\nFramesSinceLastControlRequest = 0\r\n\r\nfunction DoStuff (desiredYaw, desiredForward, desiredPitch)\r\n    if DoTakeControlFromAiAndSendYawCommand then\r\n        if CounterForDelayBeforeTakingControlFromStandardAI <= 0 then\r\n            if IsConstructPlane then                \r\n                if desiredYaw ~= 0 or desiredPitch ~= 0 then\r\n                    if FramesSinceLastControlRequest == 0 or FramesSinceLastControlRequest >= ConstantForFramesPerSecond then\r\n                        I:TellAiThatWeAreTakingControl()\r\n                        FramesSinceLastControlRequest = NumberOfSkippedFrames\r\n                    end\r\n                    I:RequestControl(0, 0, desiredYaw)               \r\n                    I:RequestControl(0, 4, desiredPitch)\r\n                    I:RequestControl(0, 8, PropulsionRequestWhileAvoiding)\r\n                end\r\n            else\r\n                if desiredYaw ~= 0 then\r\n                    if FramesSinceLastControlRequest == 0 or FramesSinceLastControlRequest >= ConstantForFramesPerSecond then\r\n                        I:TellAiThatWeAreTakingControl()\r\n                        FramesSinceLastControlRequest = NumberOfSkippedFrames\r\n                    end\r\n                    I:RequestControl(0, 0, desiredYaw )                \r\n                    I:RequestControl(0, 8, desiredForward)\r\n                end                \r\n            end\r\n        end        \r\n        CounterForDelayBeforeTakingControlFromStandardAI = CounterForDelayBeforeTakingControlFromStandardAI - NumberOfSkippedFrames        \r\n    end\r\n\r\n    if DoSendComplexControlCommand then\r\n        if IsConstructPlane then\r\n            if desiredYaw == PropulsionRequestForYawRight * -1 then I:RequestComplexControllerStimulus(CCCForYawLeft) end\r\n            if desiredYaw == PropulsionRequestForYawRight then I:RequestComplexControllerStimulus(CCCForYawRight) end\r\n\r\n            if desiredPitch == PropulsionRequestForPitchUp then I:RequestComplexControllerStimulus(CCCForPitchUp) end\r\n            if desiredPitch == PropulsionRequestForPitchUp * -1 then I:RequestComplexControllerStimulus(CCCForPitchDown) end            \r\n        else\r\n            if desiredYaw == PropulsionRequestForYawRight * -1 then I:RequestComplexControllerStimulus(CCCForYawLeft) end\r\n            if desiredYaw == PropulsionRequestForYawRight then I:RequestComplexControllerStimulus(CCCForYawRight) end\r\n\r\n            if desiredForward == PropulsionRequestWhileAvoiding then I:RequestComplexControllerStimulus(CCCWhileAvoiding) end\r\n            if desiredForward == PropulsionRequestToStopOrReverse then I:RequestComplexControllerStimulus(CCCToStopOrReverse) end            \r\n        end\r\n    end\r\n--[[\r\n    if TryToOversaturateControlAxies then\r\n        if desiredYaw ~= 0 then\r\n            I:RequestControl(0, 0, desiredYaw * YawCommandMultiplier)                          \r\n           -- I:RequestControl(0, 1, desiredYaw * YawCommandMultiplier * -1)\r\n        end\r\n        if desiredPitch ~= 0 then\r\n            I:RequestControl(0, 4, desiredPitch * YawCommandMultiplier)                          \r\n            I:RequestControl(0, 5, desiredPitch * YawCommandMultiplier * -1)\r\n        end\r\n        if desiredForward ~= 0 then  \r\n            I:RequestControl(0, 8, desiredForward )             -- Redo             \r\n        end        \r\n    end\r\n ]]   \r\n    \r\n    DBG(Mathf.Round(I:GetGameTime())..\": DesiredYaw = \"..desiredYaw..\" desiredForward: \"..desiredForward..\"  desiredPitch: \"..desiredPitch)\r\nend\r\n\r\n\r\nfunction DoInputSanityCheck()\r\n    local msg = \"\"\r\n    if SafeDistance < 0 then\r\n        SafeDistance = 10\r\n        msg = msg .. \" SafeDistance! \"\r\n    end\r\n    if MaximumSizeOfEnemyShip < 50 then\r\n        MaximumSizeOfEnemyShip = 50\r\n        msg = msg .. \" MaximumSizeOfEnemyShip! \"\r\n    end\r\n    if CCCForYawRight == CCCForYawLeft then\r\n        msg = msg .. \" CCCForYawRight==CCCForYawLeft - not fixed! \"\r\n    end\r\n    if MaximumTimeForCoursePrediction < 0 then\r\n        MaximumTimeForCoursePrediction = 10\r\n        msg = msg .. \" MaximumTimeForCoursePrediction! \"\r\n    end\r\n    if ConstantForConstructId == ConstantForEnemyId then\r\n        msg = msg .. \" Nuts - not fixed! \"\r\n    end\r\n    return msg\r\nend\r\n\r\n\r\nfunction StartupInitialization()\r\n    DoInitializationOnStart = false    \r\n    I:ClearLogs()\r\n\r\n    if IsConstructPlane then\r\n        EnemySphericalHalfSize = MaximumSizeOfEnemyPlane/2                                   -- Not valid for ships!\r\n        SafeDistance = SafeDistanceForPlanes\r\n    else\r\n        EnemySphericalHalfSize = MaximumSizeOfEnemyShip/2\r\n    end\r\n\r\n    SetPriorityNumberAndCountFriendlies()\r\n    \r\n    if InTheFightWithCornHollio then\r\n        desiredSpeed = 0\r\n        EngageSelfDestruct(true)\r\n    end \r\n    \r\n    ConstructDimensions = ConstructDimensions + I:GetConstructMaxDimensions() - I:GetConstructMinDimensions()\r\n    ConstructSphericalHalfSize = math.max(ConstructDimensions.x, ConstructDimensions.y, ConstructDimensions.z) / 2\r\n\r\n    LastFrameConstructVelocity = I:GetVelocityVector()\r\n    \r\n    for i = 0, I:GetFriendlyCount() - 1, 1 do\r\n        local FriendlyInfo = I:GetFriendlyInfo(i)\r\n        local friendlySize = FriendlyInfo.PositiveSize - FriendlyInfo.NegativeSize + Vector3(1, 1, 1)\r\n        DimensionsOfFriendlies[FriendlyInfo.Id] = {\r\n            Id = FriendlyInfo.Id,\r\n            BoundingBox = friendlySize,\r\n            MaxSphericalHalfSize = math.max(friendlySize.x, friendlySize.y, friendlySize.z) / 2 + ExtraDistanceForBeingFriendly\r\n        }\r\n    end\r\n\r\n    local msg = DoInputSanityCheck()\r\n\r\n    if ShowMessageForRunningAndWarnings then\r\n        I:LogToHud(\"CornBox is running on \".. I:GetBlueprintName()..\" (Id: \".. I:GetUniqueId()..\"). \"..msg)        \r\n    end\r\n    \r\nend\r\n\r\n\r\nfunction IsThisFrameActive(frameCounter, activeCraftsPerFrame, previousCountForFriendlies, constructPriorityNumber)\r\n    local FirstPriorityNumberForThisFrame = frameCounter * activeCraftsPerFrame % previousCountForFriendlies\r\n    local FirstPriorityNumberForNextFrame = (frameCounter + 1) * activeCraftsPerFrame % previousCountForFriendlies\r\n\r\n    if (previousCountForFriendlies<activeCraftsPerFrame)\r\n            or (constructPriorityNumber >= FirstPriorityNumberForThisFrame and constructPriorityNumber < (FirstPriorityNumberForThisFrame + activeCraftsPerFrame))\r\n            or (constructPriorityNumber < FirstPriorityNumberForNextFrame and  constructPriorityNumber >= (FirstPriorityNumberForNextFrame - activeCraftsPerFrame)) then\r\n       -- DBG(\"Run on frame: \"..frameCounter)\r\n        NumberOfSkippedFrames = FrameCounter - LastActiveFrame\r\n        LastActiveFrame = FrameCounter\r\n        return true\r\n    end\r\n    return false\r\nend\r\n\r\n\r\nfunction IsThisBoxActive()\r\n    --local poll = Mathf.Round(I:GetInput(0, 8)*10)\r\n    local poll = Mathf.Round(I:GetCustomAxis(\"CornBoxPoll\")*10)\r\n\r\n    if (poll == 0 and VictoryInThePollForPreviousFrame) or (poll == 1 and VictoryInThePoll) then\r\n        --I:RequestControl(0, 8, 0.1)\r\n        I:RequestCustomAxis(\"CornBoxPoll\", 0.1)\r\n        VictoryInThePollForPreviousFrame = true \r\n        return true\r\n    end \r\n    \r\n    if CounterForPollDelay == -99 then\r\n        CounterForPollDelay = math.random(0, 20)\r\n    end\r\n    \r\n    if poll ~= 1 and PollResultForPreviousFrame ~= 1 then\r\n        CounterForPollDelay = CounterForPollDelay - 1\r\n        VictoryInThePoll = false\r\n        VictoryInThePollForPreviousFrame = false\r\n        \r\n        if CounterForPollDelay <= 0 then\r\n            --I:RequestControl(0, 8, 0.1)\r\n            I:RequestCustomAxis(\"CornBoxPoll\", 0.1)\r\n            VictoryInThePoll = true\r\n            CounterForPollDelay = math.random(0, 20)\r\n        end\r\n    end\r\n\r\n    PollResultForPreviousFrame = poll    \r\n    return false\r\nend\r\n\r\n\r\nfunction Update(ILocal)\r\n    if StartupDelay <= 0 then\r\n        I=ILocal\r\n        I:ClearLogs()\r\n\r\n        local activeFrame = IsThisFrameActive(FrameCounter, ActiveCraftsPerFrame, PreviousCountForFriendlies, ConstructPriorityNumber)\r\n    --    DBG(\"FrameCounter: \"..FrameCounter..\"  activeFrame: \"..tostring(activeFrame))\r\n\r\n        local successForPoll, activeBox = pcall(IsThisBoxActive)\r\n        if not successForPoll then\r\n          --  DBG(\"Unsuccessful poll.\")\r\n            activeBox = true\r\n        end\r\n        --local activeBox = IsThisBoxActive()\r\n     --   DBG(\"FrameCounter: \"..FrameCounter..\"  successForPoll: \"..tostring(successForPoll)..\"  activeBox: \"..tostring(activeBox))\r\n        \r\n        if activeFrame and activeBox then\r\n            local success = false\r\n            \r\n            if DoInitializationOnStart then                         -- add support for new spawns and test for sanity\r\n                StartupInitialization()                                 -- And where are missing friendly size come from?\r\n            end\r\n           \r\n            success, DesiredYaw, DesiredForward, DesiredPitch = pcall(DetectAndAvoidCollision)                -- Is it fast?\r\n            --success = true  DesiredYaw, DesiredForward, DesiredPitch = DetectAndAvoidCollision()                \r\n\r\n            if not success or DesiredYaw == nil or DesiredForward == nil or DesiredPitch == nil then\r\n                DBG(\"!!Error!!\")\r\n                DesiredYaw = 0\r\n                DesiredForward = 0\r\n                DesiredPitch = 0\r\n            end\r\n        else\r\n            DBG(\"Skipping of the frame. FrameCounter: \"..FrameCounter..\"  activeFrame: \"..tostring(activeFrame)..\"  activeBox: \"..tostring(activeBox))\r\n        end\r\n\r\n        if DesiredYaw ~= 0 or DesiredForward ~= 0 or DesiredPitch ~= 0 then\r\n            DoStuff(DesiredYaw, DesiredForward, DesiredPitch)\r\n        else\r\n            CounterForDelayBeforeTakingControlFromStandardAI = DelayBeforeTakingControlFromStandardAI\r\n            DBG(Mathf.Round(I:GetGameTime())..\": No collision to avoid.\")\r\n        end\r\n        FramesSinceLastControlRequest = FramesSinceLastControlRequest + NumberOfSkippedFrames\r\n    else\r\n        StartupDelay = StartupDelay - 1\r\n    end\r\n    FrameCounter = FrameCounter + 1\r\nend\r\n\r\n\r\nfunction DBG(string)\r\n    I:Log(string)\r\nend\r\n\r\n\r\nfunction PV(v)\r\n    return \" x: \"..v.x..\"  y: \"..v.y..\"  z: \"..v.z..\"   mg: \"..v.magnitude\r\nend\r\n\r\n\r\nfunction GetLengthOfTable(table)\r\n    local count = 0\r\n    for _ in pairs(table) do\r\n        count = count + 1\r\n    end\r\n    return count\r\nend\r\n\r\n\r\nfunction Get_Speed (id)\r\n    return RateOfRotationAndSpeed[id].MaxSpeed\r\nend                                                                         -- Kill it?\r\nfunction Get_TurnRate (id)\r\n    return RateOfRotationAndSpeed[id].CurrentCourse\r\nend\r\n\r\n"],"BlockStringDataIds":[135],"GameVersion":"3.3.2.38","PersistentSubObjectIndex":0,"PersistentBlockIndex":152,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"1cc99486-fff6-4c8c-ab26-cf71343faa66","ObjectId":"d956da19-d52c-48fd-bf96-42faf8748eec","CreatorReadableName":"CornHollio","HashV1":"e5ed7d26f2ac63ad090bd4502662a1da"},"BlockCount":1686}}