{"FileModelVersion":{"Major":1,"Minor":0},"Name":"Test Boat v7","Version":14,"SavedTotalBlockCount":2062,"SavedMaterialCost":216486.5,"ContainedMaterialCost":13846.1416,"ItemDictionary":{"1368":"ca924c87-8012-448a-a6c7-a7ff91b0e801","1347":"0d554a9d-7d06-48b3-8aea-ffaeaa30380a","1376":"52a61c5e-07be-4bb9-9649-d3375c66e97e","1352":"db9ed060-d556-435b-945c-19c923e233d3","1346":"a7f5d8de-4882-4111-9d01-436493e5b2d8","1380":"d48733e2-f003-4643-86a2-cb350fd0dc04","1373":"bcaf33a4-98c3-41d7-b416-438670e97d53","1357":"ac09f902-8921-4a58-aad5-c679706697f6","1345":"46f54639-5f91-4731-93eb-e5c0a7460538","1372":"b183f553-ce82-47c5-a4ed-6470b83b0d45","1349":"5548037e-8428-43f8-bcb6-d730dbcd0a79","1360":"5f07c608-acf2-4cc5-97d0-1a0a96acb9e3","1344":"2a22f176-01c2-42f2-a7d2-2c7054504aa9","1371":"225daaae-6f35-4489-aeb5-73e66e0664a4","1354":"442f3ea3-c7cd-4759-84ee-a0d2fac5a711","1351":"a09be1c6-93fd-4b54-b9ca-62e60efbc818","766":"ab699540-efc8-4592-bc97-204f6a874b3a","1348":"e5d065f6-907b-450d-b998-213cdc54eec1","1350":"8477bbec-974c-45bf-a1ce-49a48d5b5307","1374":"40659614-1b34-497a-b745-78497e4b2025","1378":"369eefd9-0c39-412e-a294-d0bb2251c509","1358":"2ddec223-13c2-4bf9-ba05-66338c51bd45","1355":"b9d21957-633f-4926-9562-4cfab38badee","1377":"ee18a848-1319-4ff9-b5e5-3f3710635dbf","1353":"de50f4f6-3d7e-4d6b-ae34-e6a34b24b104","1356":"91183077-8eac-4e29-a197-9190429ef0ba","1359":"098917ec-d86a-4cee-9c65-7997295bc248","1367":"d09c2121-c7e4-4d99-9556-02b92d17a652","1259":"f5d2db25-114e-473a-8313-96831ccd011e","545":"8331c71c-5725-472d-ad2e-65e4110982b7","366":"e8d04f75-a134-452e-a04a-af5172d65040","313":"8600329a-4b2b-44c7-8e66-634b0d81ce3d","315":"56c27d46-39b3-4ac1-b4f7-71c118d8dde9","321":"c8fe583a-357b-4fa6-86f1-fc2de639c909","656":"19a3d1a2-574e-4619-91b0-050d3b1201a9","635":"b6184e42-1647-4bd2-8465-f8b88f76621f","633":"ceae02f9-2a21-40a0-b0d5-fdb0e4975826","771":"9a0ae372-beb4-4009-b14e-36ed0715af73","484":"2e715d3f-349f-41e1-bd89-7f685939d5aa","260":"26a604f0-071c-49ca-8a0e-e1d9c959b1c5","256":"edd65760-896f-4f6a-ba8c-eb2b072635f4","304":"2c557c38-4136-436a-bae2-c5cd1102690c","503":"936f57b0-0376-411e-a9c2-776681111efc","97":"fb1276c4-ba55-4e62-8315-40d4bf8adbf2","538":"b06788d5-4715-4168-8f7d-d6380f73fe54","533":"f71f9cfc-a107-4404-bb2c-7dc30e10e8da","472":"a3d914e9-697d-425f-abda-a6b21b4de952","255":"5ef97d26-1196-4b1a-ba1d-fd539c26b684","240":"c0e407e9-fc15-43fa-9a61-4c79a3acb6a9","490":"d3924bae-be5a-43a0-be19-64fc7c8d6059","492":"ceed114a-ddb5-47d4-9b7a-ef1ce9398e09","552":"953f1c50-c18f-43f4-815a-c19e5aff7af7","621":"e63040c9-0027-4fd3-be30-67fe3e950140"},"Blueprint":{"ContainedMaterialCost":13846.1416,"CSI":[0.0,0.0,-1.0,0.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0000002384185791,1.0,1.0,0.0,1.0,44.2837028503418,6.32326602935791,-1.0,0.0,0.0,1.0,1.0,7200000.0,0.0,0.0,0.0,1977.9500732421875,0.0,0.1,0.1,1.0,1.0,3.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,0.0,-1.0,0.0,0.0,12000.0,7199700.066521883,7200000.0,0.0,0.0,-1.0,4592.0,0.0,-1.0,918.0,0.0,500.0,-1.0,12.0,0.0,0.0,0.0,7.0559043884277344,0.0,0.0,0.0,2.0000002384185791,0.051812350749969482,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0],"COL":["0.011764,0,0,0","1,0,0,0.5","0,1,0,0.5","0,0,1,0.5","0.1,0.1,0.1,0.5","0.3,0.3,0.3,0.5","0.5,0.5,0.5,0.5","1,1,1,0.1","1,1,1,0.5","1,1,1,0.99","1,0.921568,0.015686,0.99","0,1,1,0.99","1,0,1,0.99","0.616029,0.041568,0.598922,0.616381","0.204702,0.754058,0.712989,0.740486","0.554607,0.64452,0.926487,0.219472","0.737624,0.457268,0.625993,0.319465","0.483263,0.8098,0.5415,0.423461","0.049516,0.2,0.475453,0.410689","0.200739,0.229956,0.828186,0.247301","0.167417,0.88698,0.657702,0.062131","0.534748,0.218002,0.187084,0.406349","0.530859,0.881647,0.906455,0.04621","0.209334,0.32636,0.295473,0.48137","0.686063,0.987506,0.803765,0.354047","0.050415,0.668246,0.241258,0.053549","0.755998,0.95323,0.172363,0.411452","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0","0,0,0,0"],"SCs":[],"BLP":["-7,3,16","-7,3,20","-7,3,24","-7,3,28","-7,3,32","-7,3,36","-7,3,40","-7,3,44","-7,3,48","-7,3,52","-7,3,53","-7,4,16","-7,4,17","-7,4,21","-7,4,25","-7,4,29","-7,4,33","-7,4,37","-7,4,41","-7,4,45","-7,4,49","-7,4,53","-7,5,16","-7,5,17","-7,5,21","-7,5,25","-7,5,29","-7,5,33","-7,5,37","-7,5,41","-7,5,45","-7,5,49","-7,5,53","-7,6,16","-7,6,17","-7,6,21","-7,6,25","-7,6,29","-7,6,33","-7,6,37","-7,6,41","-7,6,45","-7,6,49","-7,6,53","-6,2,12","-6,2,16","-6,2,20","-6,2,24","-6,2,28","-6,2,32","-6,2,36","-6,2,40","-6,2,44","-6,2,48","-6,2,52","-6,2,53","-6,3,8","-6,3,12","-6,3,13","-6,3,53","-6,3,57","-6,3,61","-6,3,65","-6,4,8","-6,4,9","-6,4,13","-6,4,53","-6,4,57","-6,4,61","-6,4,65","-6,5,4","-6,5,8","-6,5,9","-6,5,13","-6,5,53","-6,5,57","-6,5,61","-6,5,65","-6,6,4","-6,6,8","-6,6,9","-6,6,13","-6,6,53","-6,6,57","-6,6,61","-6,6,65","-6,7,4","-6,7,8","-6,7,9","-6,7,13","-6,7,17","-6,7,21","-6,7,25","-6,7,29","-6,7,33","-6,7,37","-6,7,41","-6,7,45","-6,7,49","-6,7,53","-6,7,57","-6,7,61","-6,7,65","-6,7,69","-6,8,4","-6,8,8","-6,8,9","-6,8,13","-6,8,17","-6,8,21","-6,8,25","-6,8,29","-6,8,33","-6,8,37","-6,8,41","-6,8,45","-6,8,49","-6,8,53","-6,8,57","-6,8,61","-6,8,65","-6,8,69","-5,1,12","-5,1,16","-5,1,20","-5,1,24","-5,1,28","-5,1,32","-5,1,36","-5,1,40","-5,1,44","-5,1,48","-5,1,52","-5,1,53","-5,2,8","-5,2,12","-5,2,16","-5,2,17","-5,2,20","-5,2,24","-5,2,28","-5,2,32","-5,2,36","-5,2,40","-5,2,44","-5,2,48","-5,2,52","-5,2,53","-5,2,57","-5,2,61","-5,2,65","-5,2,69","-5,3,8","-5,3,65","-5,3,69","-5,4,8","-5,4,65","-5,4,69","-5,5,4","-5,5,8","-5,5,69","-5,6,1","-5,6,69","-5,7,1","-5,7,69","-5,7,73","-5,8,1","-5,8,73","-4,1,8","-4,1,12","-4,1,15","-4,1,20","-4,1,24","-4,1,28","-4,1,32","-4,1,36","-4,1,40","-4,1,44","-4,1,48","-4,1,52","-4,1,53","-4,1,57","-4,1,61","-4,1,65","-4,1,69","-4,1,70","-4,2,8","-4,2,68","-4,2,71","-4,2,72","-4,3,8","-4,3,67","-4,3,71","-4,3,72","-4,4,8","-4,4,70","-4,4,74","-4,5,4","-4,5,8","-4,5,71","-4,5,75","-4,6,72","-4,6,76","-4,7,73","-4,7,77","-4,8,77","-4,8,81","-3,1,9","-3,1,12","-3,1,17","-3,1,21","-3,1,25","-3,1,29","-3,1,33","-3,1,37","-3,1,41","-3,1,45","-3,1,49","-3,1,53","-3,1,57","-3,1,61","-3,1,65","-3,1,69","-3,1,70","-3,1,74","-3,2,8","-3,2,74","-3,2,75","-3,3,75","-3,3,76","-3,4,7","-3,4,77","-3,4,78","-3,5,4","-3,5,8","-3,5,78","-3,5,79","-3,6,76","-3,6,80","-3,7,79","-3,7,80","-3,7,81","-3,8,81","-3,8,85","-2,0,78","-2,0,79","-2,0,80","-2,0,81","-2,0,82","-2,1,9","-2,1,12","-2,1,16","-2,1,19","-2,1,23","-2,1,27","-2,1,31","-2,1,35","-2,1,39","-2,1,43","-2,1,47","-2,1,51","-2,1,55","-2,1,59","-2,1,63","-2,1,67","-2,1,71","-2,1,72","-2,1,76","-2,1,77","-2,1,81","-2,1,82","-2,2,8","-2,2,79","-2,2,80","-2,2,82","-2,3,78","-2,3,79","-2,3,80","-2,4,80","-2,4,81","-2,5,2","-2,5,3","-2,5,8","-2,5,81","-2,5,82","-2,5,84","-2,6,84","-2,6,85","-2,7,85","-2,7,86","-2,8,85","-2,8,86","-2,8,87","-1,0,74","-1,0,78","-1,0,81","-1,0,82","-1,0,84","-1,1,8","-1,1,11","-1,1,15","-1,1,19","-1,1,23","-1,1,27","-1,1,31","-1,1,35","-1,1,39","-1,1,43","-1,1,47","-1,1,51","-1,1,55","-1,1,59","-1,1,63","-1,1,67","-1,1,71","-1,1,72","-1,1,76","-1,1,84","-1,2,8","-1,2,82","-1,2,84","-1,3,81","-1,3,82","-1,4,8","-1,4,82","-1,4,83","-1,4,84","-1,5,4","-1,5,8","-1,5,84","-1,5,85","-1,6,1","-1,6,85","-1,6,86","-1,7,1","-1,7,86","-1,7,87","-1,8,1","-1,8,87","-1,8,88","0,0,74","0,0,78","0,0,81","0,0,82","0,0,84","0,1,8","0,1,11","0,1,15","0,1,19","0,1,23","0,1,27","0,1,31","0,1,35","0,1,39","0,1,43","0,1,47","0,1,51","0,1,55","0,1,59","0,1,63","0,1,67","0,1,71","0,1,72","0,1,85","0,2,8","0,2,82","0,2,83","0,2,84","0,3,8","0,3,82","0,4,83","0,4,84","0,5,4","0,5,8","0,5,85","0,6,86","0,7,87","0,8,88","1,0,74","1,0,78","1,0,81","1,0,82","1,0,84","1,1,8","1,1,11","1,1,15","1,1,19","1,1,23","1,1,27","1,1,31","1,1,35","1,1,39","1,1,43","1,1,47","1,1,51","1,1,55","1,1,59","1,1,63","1,1,67","1,1,71","1,1,72","1,1,84","1,2,8","1,2,82","1,2,84","1,3,81","1,3,82","1,4,82","1,4,83","1,4,84","1,5,4","1,5,8","1,5,84","1,5,85","1,6,85","1,6,86","1,7,86","1,7,87","1,8,87","1,8,88","2,0,78","2,0,79","2,0,80","2,0,81","2,0,82","2,1,11","2,1,12","2,1,16","2,1,19","2,1,23","2,1,27","2,1,31","2,1,35","2,1,39","2,1,43","2,1,47","2,1,51","2,1,55","2,1,59","2,1,63","2,1,67","2,1,71","2,1,72","2,1,76","2,1,77","2,1,81","2,1,82","2,2,8","2,2,79","2,2,80","2,2,82","2,3,78","2,3,79","2,3,80","2,4,80","2,4,81","2,5,2","2,5,3","2,5,8","2,5,81","2,5,82","2,5,84","2,6,84","2,6,85","2,7,85","2,7,86","2,8,85","2,8,86","2,8,87","3,1,11","3,1,12","3,1,17","3,1,21","3,1,25","3,1,29","3,1,33","3,1,37","3,1,41","3,1,45","3,1,49","3,1,53","3,1,57","3,1,61","3,1,65","3,1,69","3,1,70","3,1,74","3,2,8","3,2,74","3,2,75","3,3,75","3,3,76","3,4,7","3,4,77","3,4,78","3,5,4","3,5,8","3,5,78","3,5,79","3,6,76","3,6,80","3,7,79","3,7,80","3,7,81","3,8,81","3,8,85","4,1,8","4,1,12","4,1,15","4,1,20","4,1,24","4,1,28","4,1,32","4,1,36","4,1,40","4,1,44","4,1,48","4,1,52","4,1,53","4,1,57","4,1,61","4,1,65","4,1,69","4,1,70","4,2,8","4,2,68","4,2,71","4,2,72","4,3,8","4,3,67","4,3,71","4,3,72","4,4,8","4,4,70","4,4,74","4,5,4","4,5,8","4,5,71","4,5,75","4,6,72","4,6,76","4,7,73","4,7,77","4,8,77","4,8,81","5,1,12","5,1,16","5,1,20","5,1,24","5,1,28","5,1,32","5,1,36","5,1,40","5,1,44","5,1,48","5,1,52","5,1,53","5,2,8","5,2,12","5,2,16","5,2,17","5,2,20","5,2,24","5,2,28","5,2,32","5,2,36","5,2,40","5,2,44","5,2,48","5,2,52","5,2,53","5,2,57","5,2,61","5,2,65","5,2,69","5,3,8","5,3,65","5,3,69","5,4,8","5,4,65","5,4,69","5,5,4","5,5,8","5,5,69","5,6,1","5,6,69","5,7,1","5,7,69","5,7,73","5,8,1","5,8,73","6,2,12","6,2,16","6,2,20","6,2,24","6,2,28","6,2,32","6,2,36","6,2,40","6,2,44","6,2,48","6,2,52","6,2,53","6,3,8","6,3,12","6,3,13","6,3,53","6,3,57","6,3,61","6,3,65","6,4,8","6,4,9","6,4,13","6,4,53","6,4,57","6,4,61","6,4,65","6,5,4","6,5,8","6,5,9","6,5,13","6,5,53","6,5,57","6,5,61","6,5,65","6,6,4","6,6,8","6,6,9","6,6,13","6,6,53","6,6,57","6,6,61","6,6,65","6,7,4","6,7,8","6,7,9","6,7,13","6,7,17","6,7,21","6,7,25","6,7,29","6,7,33","6,7,37","6,7,41","6,7,45","6,7,49","6,7,53","6,7,57","6,7,61","6,7,65","6,7,69","6,8,4","6,8,8","6,8,9","6,8,13","6,8,17","6,8,21","6,8,25","6,8,29","6,8,33","6,8,37","6,8,41","6,8,45","6,8,49","6,8,53","6,8,57","6,8,61","6,8,65","6,8,69","7,3,16","7,3,20","7,3,24","7,3,28","7,3,32","7,3,36","7,3,40","7,3,44","7,3,48","7,3,52","7,3,53","7,4,16","7,4,17","7,4,21","7,4,25","7,4,29","7,4,33","7,4,37","7,4,41","7,4,45","7,4,49","7,4,53","7,5,16","7,5,17","7,5,21","7,5,25","7,5,29","7,5,33","7,5,37","7,5,41","7,5,45","7,5,49","7,5,53","7,6,16","7,6,17","7,6,21","7,6,25","7,6,29","7,6,33","7,6,37","7,6,41","7,6,45","7,6,49","7,6,53","0,2,35","0,2,36","0,2,37","0,2,38","0,2,39","0,2,40","0,2,41","0,2,42","0,2,43","0,2,44","0,2,45","0,2,46","0,2,47","0,2,48","0,2,49","0,2,50","0,2,51","0,2,52","0,2,53","0,2,54","0,2,55","0,2,56","0,2,57","0,2,58","0,2,59","0,2,60","0,2,61","0,2,62","0,2,63","0,2,64","0,2,65","0,2,66","0,2,67","0,2,68","0,2,69","0,2,70","0,2,71","0,2,72","0,2,73","0,2,74","0,2,75","0,2,76","0,2,77","0,2,78","0,2,34","0,2,33","0,2,32","0,2,31","0,2,30","0,2,29","0,2,28","0,2,27","0,2,26","0,2,25","0,2,24","0,2,23","0,2,22","0,2,21","0,2,20","0,2,19","0,2,18","0,2,17","0,2,16","0,2,15","0,2,14","0,2,13","0,2,12","0,2,11","0,2,10","0,2,9","6,6,38","-6,6,38","5,5,42","-5,5,42","5,5,45","-5,5,45","5,5,48","-5,5,48","3,5,41","-3,5,41","3,5,42","-3,5,42","3,5,43","-3,5,43","2,5,41","-2,5,41","2,5,42","-2,5,42","2,5,43","-2,5,43","2,5,45","-2,5,45","2,5,48","-2,5,48","2,4,42","-2,4,42","2,4,45","-2,4,45","2,4,48","-2,4,48","2,3,42","-2,3,42","2,3,45","-2,3,45","2,3,48","-2,3,48","1,5,41","-1,5,41","1,5,42","-1,5,42","1,5,43","-1,5,43","5,2,7","-5,2,7","5,2,6","-5,2,6","5,2,5","-5,2,5","-5,8,64","5,8,64","-5,8,63","-5,8,62","-4,8,63","-5,8,61","-4,8,62","-4,8,64","-3,8,63","-5,8,60","-4,8,61","-3,8,62","-4,8,65","-3,8,64","-2,8,63","-5,8,59","-4,8,60","-3,8,61","-2,8,62","-4,8,66","-3,8,65","-5,8,65","-2,8,64","-1,8,63","-5,8,58","-4,8,59","-3,8,60","-2,8,61","-1,8,62","-4,8,67","-3,8,66","-5,8,66","-2,8,65","-1,8,64","0,8,63","-5,8,57","-4,8,58","-3,8,59","-2,8,60","-1,8,61","0,8,62","-4,8,68","-3,8,67","-5,8,67","-2,8,66","-1,8,65","0,8,64","1,8,63","-5,8,56","-4,8,57","-3,8,58","-2,8,59","-1,8,60","0,8,61","1,8,62","-4,8,69","-3,8,68","-5,8,68","-2,8,67","-1,8,66","0,8,65","1,8,64","2,8,63","-5,8,55","-4,8,56","-3,8,57","-2,8,58","-1,8,59","0,8,60","1,8,61","2,8,62","-4,8,70","-3,8,69","-5,8,69","-2,8,68","-1,8,67","0,8,66","1,8,65","2,8,64","3,8,63","-5,8,54","-4,8,55","-3,8,56","-2,8,57","-1,8,58","0,8,59","1,8,60","2,8,61","3,8,62","-4,8,71","-3,8,70","-5,8,70","-2,8,69","-1,8,68","0,8,67","1,8,66","2,8,65","3,8,64","4,8,63","-5,8,53","-4,8,54","-3,8,55","-2,8,56","-1,8,57","0,8,58","1,8,59","2,8,60","3,8,61","4,8,62","-4,8,72","-3,8,71","-5,8,71","-2,8,70","-1,8,69","0,8,68","1,8,67","2,8,66","3,8,65","4,8,64","5,8,63","-5,8,52","-4,8,53","-3,8,54","-2,8,55","-1,8,56","0,8,57","1,8,58","2,8,59","3,8,60","4,8,61","5,8,62","-4,8,73","-3,8,72","-5,8,72","-2,8,71","-1,8,70","0,8,69","1,8,68","2,8,67","3,8,66","4,8,65","-5,8,51","-4,8,52","-3,8,53","-2,8,54","-1,8,55","0,8,56","1,8,57","2,8,58","3,8,59","4,8,60","5,8,61","-4,8,74","-3,8,73","-2,8,72","-1,8,71","0,8,70","1,8,69","2,8,68","3,8,67","4,8,66","5,8,65","-5,8,50","-4,8,51","-3,8,52","-2,8,53","-1,8,54","0,8,55","1,8,56","2,8,57","3,8,58","4,8,59","5,8,60","-4,8,75","-3,8,74","-2,8,73","-1,8,72","0,8,71","1,8,70","2,8,69","3,8,68","4,8,67","5,8,66","-5,8,49","-4,8,50","-3,8,51","-2,8,52","-1,8,53","0,8,54","1,8,55","2,8,56","3,8,57","4,8,58","5,8,59","-4,8,76","-3,8,75","-2,8,74","-1,8,73","0,8,72","1,8,71","2,8,70","3,8,69","4,8,68","5,8,67","-5,8,48","-4,8,49","-3,8,50","-2,8,51","-1,8,52","0,8,53","1,8,54","2,8,55","3,8,56","4,8,57","5,8,58","-3,8,76","-2,8,75","-1,8,74","0,8,73","1,8,72","2,8,71","3,8,70","4,8,69","5,8,68","-5,8,47","-4,8,48","-3,8,49","-2,8,50","-1,8,51","0,8,52","1,8,53","2,8,54","3,8,55","4,8,56","5,8,57","-3,8,77","-2,8,76","-1,8,75","0,8,74","1,8,73","2,8,72","3,8,71","4,8,70","5,8,69","-5,8,46","-4,8,47","-3,8,48","-2,8,49","-1,8,50","0,8,51","1,8,52","2,8,53","3,8,54","4,8,55","5,8,56","-3,8,78","-2,8,77","-1,8,76","0,8,75","1,8,74","2,8,73","3,8,72","4,8,71","5,8,70","-5,8,45","-4,8,46","-3,8,47","-2,8,48","-1,8,49","0,8,50","1,8,51","2,8,52","3,8,53","4,8,54","5,8,55","-3,8,79","-2,8,78","-1,8,77","0,8,76","1,8,75","2,8,74","3,8,73","4,8,72","5,8,71","-5,8,44","-4,8,45","-3,8,46","-2,8,47","-1,8,48","0,8,49","1,8,50","2,8,51","3,8,52","4,8,53","5,8,54","-3,8,80","-2,8,79","-1,8,78","0,8,77","1,8,76","2,8,75","3,8,74","4,8,73","5,8,72","-5,8,43","-4,8,44","-3,8,45","-2,8,46","-1,8,47","0,8,48","1,8,49","2,8,50","3,8,51","4,8,52","5,8,53","-2,8,80","-1,8,79","0,8,78","1,8,77","2,8,76","3,8,75","4,8,74","-5,8,42","-4,8,43","-3,8,44","-2,8,45","-1,8,46","0,8,47","1,8,48","2,8,49","3,8,50","4,8,51","5,8,52","-2,8,81","-1,8,80","0,8,79","1,8,78","2,8,77","3,8,76","4,8,75","-5,8,41","-4,8,42","-3,8,43","-2,8,44","-1,8,45","0,8,46","1,8,47","2,8,48","3,8,49","4,8,50","5,8,51","-2,8,82","-1,8,81","0,8,80","1,8,79","2,8,78","3,8,77","4,8,76","-5,8,40","-4,8,41","-3,8,42","-2,8,43","-1,8,44","0,8,45","1,8,46","2,8,47","3,8,48","4,8,49","5,8,50","-2,8,83","-1,8,82","0,8,81","1,8,80","2,8,79","3,8,78","-5,8,39","-4,8,40","-3,8,41","-2,8,42","-1,8,43","0,8,44","1,8,45","2,8,46","3,8,47","4,8,48","5,8,49","-2,8,84","-1,8,83","0,8,82","1,8,81","2,8,80","3,8,79","-5,8,38","-4,8,39","-3,8,40","-2,8,41","-1,8,42","0,8,43","1,8,44","2,8,45","3,8,46","4,8,47","5,8,48","-1,8,84","0,8,83","1,8,82","2,8,81","3,8,80","-5,8,37","-4,8,38","-3,8,39","-2,8,40","-1,8,41","0,8,42","1,8,43","2,8,44","3,8,45","4,8,46","5,8,47","-1,8,85","0,8,84","1,8,83","2,8,82","-5,8,36","-4,8,37","-3,8,38","-2,8,39","-1,8,40","0,8,41","1,8,42","2,8,43","3,8,44","4,8,45","5,8,46","-1,8,86","0,8,85","1,8,84","2,8,83","-5,8,35","-4,8,36","-3,8,37","-2,8,38","-1,8,39","0,8,40","1,8,41","2,8,42","3,8,43","4,8,44","5,8,45","0,8,86","1,8,85","2,8,84","-5,8,34","-4,8,35","-3,8,36","-2,8,37","-1,8,38","0,8,39","1,8,40","2,8,41","3,8,42","4,8,43","5,8,44","0,8,87","1,8,86","-5,8,33","-4,8,34","-3,8,35","-2,8,36","-1,8,37","0,8,38","1,8,39","2,8,40","3,8,41","4,8,42","5,8,43","-5,8,32","-4,8,33","-3,8,34","-2,8,35","-1,8,36","0,8,37","1,8,38","2,8,39","3,8,40","4,8,41","5,8,42","-5,8,31","-4,8,32","-3,8,33","-2,8,34","-1,8,35","0,8,36","1,8,37","2,8,38","3,8,39","4,8,40","5,8,41","-5,8,30","-4,8,31","-3,8,32","-2,8,33","-1,8,34","0,8,35","1,8,36","2,8,37","3,8,38","4,8,39","5,8,40","-5,8,29","-4,8,30","-3,8,31","-2,8,32","-1,8,33","0,8,34","1,8,35","2,8,36","3,8,37","4,8,38","5,8,39","-5,8,28","-4,8,29","-3,8,30","-2,8,31","-1,8,32","0,8,33","1,8,34","2,8,35","3,8,36","4,8,37","5,8,38","-5,8,27","-4,8,28","-3,8,29","-2,8,30","-1,8,31","0,8,32","1,8,33","2,8,34","3,8,35","4,8,36","5,8,37","-5,8,26","-4,8,27","-3,8,28","-2,8,29","-1,8,30","0,8,31","1,8,32","2,8,33","3,8,34","4,8,35","5,8,36","-5,8,25","-4,8,26","-3,8,27","-2,8,28","-1,8,29","0,8,30","1,8,31","2,8,32","3,8,33","4,8,34","5,8,35","-5,8,24","-4,8,25","-3,8,26","-2,8,27","-1,8,28","0,8,29","1,8,30","2,8,31","3,8,32","4,8,33","5,8,34","-5,8,23","-4,8,24","-3,8,25","-2,8,26","-1,8,27","0,8,28","1,8,29","2,8,30","3,8,31","4,8,32","5,8,33","-5,8,22","-4,8,23","-3,8,24","-2,8,25","-1,8,26","0,8,27","1,8,28","2,8,29","3,8,30","4,8,31","5,8,32","-5,8,21","-4,8,22","-3,8,23","-2,8,24","-1,8,25","0,8,26","1,8,27","2,8,28","3,8,29","4,8,30","5,8,31","-5,8,20","-4,8,21","-3,8,22","-2,8,23","-1,8,24","0,8,25","1,8,26","2,8,27","3,8,28","4,8,29","5,8,30","-5,8,19","-4,8,20","-3,8,21","-2,8,22","-1,8,23","0,8,24","1,8,25","2,8,26","3,8,27","4,8,28","5,8,29","-5,8,18","-4,8,19","-3,8,20","-2,8,21","-1,8,22","0,8,23","1,8,24","2,8,25","3,8,26","4,8,27","5,8,28","-5,8,17","-4,8,18","-3,8,19","-2,8,20","-1,8,21","0,8,22","1,8,23","2,8,24","3,8,25","4,8,26","5,8,27","-5,8,16","-4,8,17","-3,8,18","-2,8,19","-1,8,20","0,8,21","1,8,22","2,8,23","3,8,24","4,8,25","5,8,26","-5,8,15","-4,8,16","-3,8,17","-2,8,18","-1,8,19","0,8,20","1,8,21","2,8,22","3,8,23","4,8,24","5,8,25","-5,8,14","-4,8,15","-3,8,16","-2,8,17","-1,8,18","0,8,19","1,8,20","2,8,21","3,8,22","4,8,23","5,8,24","-5,8,13","-4,8,14","-3,8,15","-2,8,16","-1,8,17","0,8,18","1,8,19","2,8,20","3,8,21","4,8,22","5,8,23","-5,8,12","-4,8,13","-3,8,14","-2,8,15","-1,8,16","0,8,17","1,8,18","2,8,19","3,8,20","4,8,21","5,8,22","-5,8,11","-4,8,12","-3,8,13","-2,8,14","-1,8,15","0,8,16","1,8,17","2,8,18","3,8,19","4,8,20","5,8,21","-5,8,10","-4,8,11","-3,8,12","-2,8,13","-1,8,14","0,8,15","1,8,16","2,8,17","3,8,18","4,8,19","5,8,20","-5,8,9","-4,8,10","-3,8,11","-2,8,12","-1,8,13","0,8,14","1,8,15","2,8,16","3,8,17","4,8,18","5,8,19","-5,8,8","-4,8,9","-3,8,10","-2,8,11","-1,8,12","0,8,13","1,8,14","2,8,15","3,8,16","4,8,17","5,8,18","-5,8,7","-4,8,8","-3,8,9","-2,8,10","-1,8,11","0,8,12","1,8,13","2,8,14","3,8,15","4,8,16","5,8,17","-5,8,6","-4,8,7","-3,8,8","-2,8,9","-1,8,10","0,8,11","1,8,12","2,8,13","3,8,14","4,8,15","5,8,16","-5,8,5","-4,8,6","-3,8,7","-2,8,8","-1,8,9","0,8,10","1,8,11","2,8,12","3,8,13","4,8,14","5,8,15","-5,8,4","-4,8,5","-3,8,6","-2,8,7","-1,8,8","0,8,9","1,8,10","2,8,11","3,8,12","4,8,13","5,8,14","-5,8,3","-4,8,4","-3,8,5","-2,8,6","-1,8,7","0,8,8","1,8,9","2,8,10","3,8,11","4,8,12","5,8,13","-5,8,2","-4,8,3","-3,8,4","-2,8,5","-1,8,6","0,8,7","1,8,8","2,8,9","3,8,10","4,8,11","5,8,12","-4,8,2","-3,8,3","-2,8,4","-1,8,5","0,8,6","1,8,7","2,8,8","3,8,9","4,8,10","5,8,11","-3,8,2","-2,8,3","-1,8,4","0,8,5","1,8,6","2,8,7","3,8,8","4,8,9","5,8,10","-2,8,2","-1,8,3","0,8,4","1,8,5","2,8,6","3,8,7","4,8,8","5,8,9","-1,8,2","0,8,3","1,8,4","2,8,5","3,8,6","4,8,7","5,8,8","0,8,2","1,8,3","2,8,4","3,8,5","4,8,6","5,8,7","1,8,2","2,8,3","3,8,4","4,8,5","5,8,6","2,8,2","3,8,3","4,8,4","5,8,5","3,8,2","4,8,3","5,8,4","4,8,2","5,8,3","5,8,2","0,9,17","0,9,21","-1,9,21","-1,9,20","0,2,5","0,2,6","0,2,7","0,6,18","1,3,16","-1,3,16","-1,3,15","-1,3,14","-1,3,13","-1,3,12","-1,3,11","-1,3,10","-1,3,9","1,3,79","-1,3,79","0,9,89","0,9,1","-5,5,51","5,5,51","0,9,34","0,9,8","0,9,6","0,9,5","-1,9,5","1,9,5","5,3,36","-5,3,36","5,3,33","-5,3,33","5,3,30","-5,3,30","3,3,37","-3,3,37","3,3,36","-3,3,36","3,3,35","-3,3,35","2,3,37","-2,3,37","2,3,36","-2,3,36","2,3,35","-2,3,35","2,3,33","-2,3,33","2,3,30","-2,3,30","2,4,36","-2,4,36","2,4,33","-2,4,33","2,4,30","-2,4,30","2,5,36","-2,5,36","2,5,33","-2,5,33","2,5,30","-2,5,30","1,3,37","-1,3,37","1,3,36","-1,3,36","1,3,35","-1,3,35","2,3,20","-2,3,20","2,3,23","-2,3,23","2,3,26","-2,3,26","4,3,19","-4,3,19","4,3,20","-4,3,20","4,3,21","-4,3,21","5,3,19","-5,3,19","5,3,20","-5,3,20","5,3,21","-5,3,21","5,3,23","-5,3,23","5,3,26","-5,3,26","5,4,20","-5,4,20","5,4,23","-5,4,23","5,4,26","-5,4,26","5,5,20","-5,5,20","5,5,23","-5,5,23","5,5,26","-5,5,26","6,3,19","-6,3,19","6,3,20","-6,3,20","6,3,21","-6,3,21","4,3,54","-4,3,54","4,3,57","-4,3,57","4,3,60","-4,3,60","4,3,63","-4,3,63","2,3,66","-2,3,66","2,3,69","-2,3,69","2,3,72","-2,3,72","0,9,20","0,8,0","5,8,0","-5,8,0","7,8,5","-7,8,5","7,8,18","-7,8,18","7,8,31","-7,8,31","7,8,43","-7,8,43","7,8,57","-7,8,57","7,8,69","-7,8,69","5,8,80","-5,8,80","0,8,90","-2,8,88","2,8,88","-3,9,35","3,9,35","-4,9,35","-5,9,35","-6,9,35","-7,9,35","-7,9,36","-7,9,34","4,9,35","5,9,35","6,9,35","7,9,35","7,9,36","7,9,34","0,9,4","0,9,3","0,9,2","0,9,0","0,9,-1","1,9,-1","-1,9,-1","3,9,21","0,9,24","2,4,1","-2,4,1","2,3,1","-2,3,1","2,2,1","-2,2,1","2,1,1","-2,1,1","0,4,1","0,3,1","0,2,1","0,1,1","1,4,1","-1,4,1","1,3,1","-1,3,1","1,2,1","-1,2,1","1,1,1","-1,1,1","0,5,86","0,4,86","0,3,86","0,2,86","0,1,86","0,0,86","-1,5,86","1,5,86","-1,4,86","1,4,86","-1,3,86","1,3,86","-1,2,86","1,2,86","-1,1,86","1,1,86","-1,0,86","1,0,86","-2,6,86","2,6,86","-2,5,86","2,5,86","-2,4,86","2,4,86","-2,3,86","2,3,86","-2,2,86","2,2,86","-2,1,86","2,1,86","-2,0,86","2,0,86","-3,4,1","3,4,1","-3,3,1","3,3,1","-3,2,1","3,2,1","-3,1,1","3,1,1","-3,0,1","3,0,1","-2,0,1","2,0,1","-1,0,1","1,0,1","0,0,1","4,4,1","-4,4,1","4,3,1","-4,3,1","4,2,1","-4,2,1","4,1,1","-4,1,1","4,0,1","-4,0,1","3,7,86","-3,7,86","3,6,86","-3,6,86","3,5,86","-3,5,86","3,4,86","-3,4,86","3,3,86","-3,3,86","3,2,86","-3,2,86","3,1,86","-3,1,86","3,0,86","-3,0,86","4,7,84","-4,7,84","4,6,84","-4,6,84","4,5,84","-4,5,84","4,4,84","-4,4,84","4,3,84","-4,3,84","4,2,84","-4,2,84","4,1,84","-4,1,84","4,0,84","-4,0,84","4,-1,84","-4,-1,84","3,-1,86","-3,-1,86","2,-1,86","-2,-1,86","1,-1,86","-1,-1,86","0,-1,86","-4,-1,1","4,-1,1","-3,-1,1","3,-1,1","-2,-1,1","2,-1,1","-1,-1,1","1,-1,1","0,-1,1","5,4,1","-5,4,1","5,3,1","-5,3,1","5,2,1","-5,2,1","5,1,1","-5,1,1","5,0,1","-5,0,1","5,-1,1","-5,-1,1","6,1,42","-6,1,42","7,1,42","-7,1,42","8,1,42","-8,1,42","9,1,42","-9,1,42","10,1,42","-10,1,42","11,1,42","-11,1,42","6,1,43","-6,1,43","7,1,43","-7,1,43","8,1,43","-8,1,43","9,1,43","-9,1,43","10,1,43","-10,1,43","11,1,43","-11,1,43","6,1,41","-6,1,41","7,1,41","-7,1,41","8,1,41","-8,1,41","9,1,41","-9,1,41","10,1,41","-10,1,41","11,1,41","-11,1,41","-3,1,80","3,1,80","-4,1,80","4,1,80","-5,1,80","5,1,80","-6,1,80","6,1,80","-6,1,9","6,1,9","-7,1,9","7,1,9","-8,1,9","8,1,9","-9,1,9","9,1,9","0,9,23"],"BLR":[19,14,14,14,14,14,14,14,14,14,12,19,12,12,12,12,12,12,12,12,12,18,19,18,18,18,18,18,18,18,18,18,18,2,0,0,0,0,0,0,0,0,0,18,19,14,14,14,14,14,14,14,14,14,14,18,15,19,0,12,18,18,18,23,18,0,18,0,0,18,19,19,18,0,18,0,0,18,19,2,0,0,18,0,0,18,19,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,19,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,19,14,14,14,14,14,14,14,14,14,14,18,15,19,19,0,19,19,19,19,19,19,19,19,19,18,18,18,18,18,15,0,18,0,0,18,14,19,18,20,18,20,18,18,20,18,15,14,19,17,17,17,17,17,17,17,17,17,18,12,12,18,15,12,15,2,2,18,1,0,2,18,1,0,18,14,19,0,18,0,18,0,18,18,12,12,12,0,17,17,17,17,17,17,17,17,17,17,17,17,17,12,18,0,0,18,0,18,23,17,18,14,19,14,18,0,18,14,0,18,12,12,14,7,15,7,18,12,12,21,19,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,12,0,18,0,14,0,0,0,0,18,0,18,14,18,19,17,12,18,18,12,18,12,0,18,12,14,14,14,18,18,15,19,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,1,18,0,0,0,0,18,1,0,18,12,14,19,12,12,20,18,12,20,18,12,20,12,12,14,14,14,12,12,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,4,14,19,4,12,12,12,14,14,14,16,16,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,16,0,0,0,0,16,0,16,12,14,17,12,12,16,12,16,12,12,12,14,5,13,5,16,14,12,20,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,12,0,16,0,14,0,0,0,0,16,0,16,14,16,17,19,12,16,16,12,16,12,0,16,12,14,12,0,17,17,17,17,17,17,17,17,17,17,17,17,17,12,16,0,0,16,0,16,22,19,16,14,17,14,16,0,16,14,0,16,12,12,13,14,14,17,17,17,17,17,17,17,17,17,16,12,12,12,13,12,13,2,2,16,3,0,2,16,3,0,16,14,17,0,16,0,16,0,16,16,12,17,14,14,14,14,14,14,14,14,14,14,16,13,17,17,0,17,17,17,17,17,17,17,17,17,16,12,12,12,16,13,0,16,0,0,16,14,17,16,21,16,21,16,16,21,16,17,14,14,14,14,14,14,14,14,14,14,16,13,17,0,12,12,12,16,22,16,0,16,0,0,16,17,17,16,0,16,0,0,16,17,2,0,0,16,0,0,16,17,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,17,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,14,14,14,14,14,14,14,14,14,12,17,12,12,12,12,12,12,12,12,12,16,17,16,16,16,16,16,16,16,16,16,16,2,0,0,0,0,0,0,0,0,0,16,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,9,13,15,13,15,13,15,3,1,3,1,3,1,3,1,3,1,3,1,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,3,1,3,1,3,1,2,2,2,2,0,0,17,19,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,11,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,2,2,2,2,2,1,3,1,3,1,3,15,13,15,13,15,13,15,13,15,13,15,13,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,15,13,15,13,15,13,3,1,3,1,3,1,13,15,13,15,13,15,13,15,13,15,13,15,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,13,15,13,15,13,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,14,14,14,13,15,13,15,13,15,13,15,13,15,13,15,13,15,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,18,16,18,16,18,16,18,16,16,16,16,16,18,16,18,16,18,16,18,16,16,16,16,16,16,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,16,18,16,18,16,18,16,18,16,16,18,16,18,16,18,16,18,16,18,16,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BP1":null,"BP2":nullnull,"BlockData":"","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAADBfVafAAAAAAcAAAAHAAAAAAAAAAAAAAQBAAAAOe0HAAAAAAAHAAAAAAABAAAAAAAAPjUUAAAAAAAHAAAAIwABAAAAAAAACgAEzczMPQsABM3MzD0MAATNzMw9DQAEzczMPQ4ABM3MzD1SQwAAAAAAAAcAAAAAAAEAAAAAAADESgAAAAAAAAcAAAAOAAAAAAAAAAAAAAQAAIRCAwAEAACEQiveCgAAAAAABwAAAAgAAQAAAAAAAAAAAQEBAAEBMo5QAAAAAAAHAAAAAAAAAAAAAAAA0KtlAAAAAAAOAAAAAAAAAAAAAAAAAQAAAAAAAC7LBAAAAAAABwAAAAAAJIgAAAAAAMInYQAAAAAABwAAAEYAAAAAAAAAAAAABAAASEIKAAQAAMjBDwAEAABcQhQABAAA+kMZAAQAgDtFMgAEAEAcRjcABABAHEYeAAQAAIA/IwAEAACAPygABAAAoEES6AEAAAAAAA4AAAAAAA8nAAAAAACghgEAAAAA","designChanged":false,"blueprintVersion":14,"blueprintName":"Test Boat v7","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":621,"LocalPosition":"17245.62,-6.122563,17117.88","LocalRotation":"0.002869001,0.8269353,-0.0009560402,0.5622889","ForceId":1178622084,"TotalBlockCount":2062,"MaxCords":"11,9,91","MinCords":"-11,-1,-1","BlockIds":[1368,1347,1347,1347,1347,1347,1347,1347,1347,1347,1376,1352,1346,1346,1346,1346,1346,1346,1346,1346,1346,1352,1352,1346,1346,1346,1346,1346,1346,1346,1346,1346,1352,1376,1347,1347,1347,1347,1347,1347,1347,1347,1347,1376,1376,1347,1347,1347,1347,1347,1347,1347,1347,1347,1347,1380,1373,1357,1345,1357,1347,1347,1372,1349,1346,1345,1346,1346,1346,1352,1376,1357,1346,1345,1346,1346,1346,1352,1352,1346,1346,1346,1346,1346,1346,1352,1352,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1360,1380,1352,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1352,1376,1347,1347,1347,1347,1347,1347,1347,1347,1347,1347,1380,1373,1357,1346,1344,1344,1346,1346,1346,1346,1346,1346,1346,1346,1360,1347,1347,1347,1371,1354,1346,1351,766,1346,1352,1352,1346,1352,1346,1352,1346,1360,1380,1346,1352,1373,1360,1345,1346,1346,1346,1346,1346,1346,1346,1346,1346,1360,1348,1348,1347,1349,1376,1354,1344,1345,1351,1346,766,1346,1352,1345,1346,1352,1352,1346,1346,1352,1346,1351,1346,1350,1360,1376,1345,1346,766,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1357,1371,766,766,1351,766,1351,1371,1344,1351,1352,1346,1345,1351,1346,1352,1345,766,1352,1357,1374,1372,1349,1349,1349,1378,1345,1346,1345,1345,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,766,1346,766,1350,766,1344,1358,1378,766,766,1350,766,1350,1350,1344,1346,1344,1355,1377,1353,1373,1353,1373,766,1353,1373,1380,1360,1345,1358,1378,1356,1345,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1345,1350,766,1358,1378,766,1349,1345,766,1353,1373,1352,1346,1354,1373,1345,1353,1373,1345,1353,1373,1345,1354,1374,1352,1346,1345,1344,1350,766,1345,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,766,766,766,766,1350,766,766,766,1349,1352,1346,1349,1349,1349,1350,1376,1357,1345,1355,1374,1359,1345,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1350,766,1355,1374,766,1349,766,1354,1377,1352,1346,1353,1377,1354,1377,1354,1377,1353,1378,1368,1349,1349,1349,1374,1345,1346,1345,1345,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,766,1346,766,1350,766,1344,1355,1374,766,766,1350,766,1350,1350,1344,1346,1344,1358,1373,1354,1377,1354,1377,766,1354,1377,1345,1346,766,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1360,1367,766,766,1351,766,1351,1367,1344,1351,1352,1346,1345,1351,1346,1352,1345,766,1352,1360,1378,1377,1357,1345,1346,1346,1346,1346,1346,1346,1346,1346,1346,1357,1347,1347,1347,1349,1380,1353,1344,1345,1351,1346,766,1346,1352,1345,1346,1352,1352,1346,1346,1352,1346,1351,1346,1350,1357,1380,1380,1348,1348,1348,1348,1348,1348,1348,1348,1348,1348,1376,1377,1360,1346,1344,1344,1346,1346,1346,1346,1346,1346,1346,1346,1357,1347,1347,1347,1367,1353,1346,1351,766,1346,1352,1352,1346,1352,1346,1352,1346,1357,1376,1346,1352,1380,1348,1348,1348,1348,1348,1348,1348,1348,1348,1348,1376,1377,1360,1345,1360,1347,1347,1368,1349,1346,1345,1346,1346,1346,1352,1380,1360,1346,1345,1346,1346,1346,1352,1352,1346,1346,1346,1346,1346,1346,1352,1352,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1357,1376,1352,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1346,1352,1372,1348,1348,1348,1348,1348,1348,1348,1348,1348,1380,1352,1346,1346,1346,1346,1346,1346,1346,1346,1346,1352,1352,1346,1346,1346,1346,1346,1346,1346,1346,1346,1352,1380,1348,1348,1348,1348,1348,1348,1348,1348,1348,1380,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,1259,545,545,366,366,366,366,366,366,313,313,313,313,313,313,313,313,313,313,313,313,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,321,321,313,313,313,313,656,656,635,635,633,633,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,771,484,260,256,304,633,635,656,503,97,97,97,97,97,97,97,97,97,97,97,538,538,366,366,533,472,472,472,472,472,366,366,366,366,366,366,313,313,313,313,313,313,313,313,313,313,313,313,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,321,321,313,313,313,313,366,366,366,366,366,366,313,313,313,313,313,313,313,313,313,313,313,313,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,321,321,313,313,313,313,366,366,366,366,366,366,366,366,366,366,366,366,366,366,255,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,533,490,492,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,552,492],"BlockState":"=0,2062","AliveCount":2062,"BlockStringData":["\r\n-- V7\r\n\r\n\r\n-- User-friendly settings:\r\n\r\n\r\n\r\n\r\n--      1. Select AI type on your craft:\r\n--                        '1' for Standard/Hybrid AI. Will take control from AI.\r\n--                        '2' for Breadboard AI. Will send commands via complex controls.\r\n--                        '3' use both for whatever unholy reasons.\r\n            TypeOfAiOnTheCraft = 2\r\n\r\n\r\n--      2. Run integration test and don't forget to set this to 0 after:\r\n--                        Set this to some time in seconds to run integration test. 10 seconds will do.\r\n--                        Set this to '0' to disable it afterwards.\r\n            IntegrationTestDuration = 0\r\n\r\n\r\n\r\n\r\n\r\n--  The end of user-friendly settings! \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--  Dimensions and margins\r\n            MaximumSizeOfEnemyShips = 300\r\n            MaximumSizeOfEnemyPlanes = 100\r\n            MaximumSizeOfEnemySubmarines = 100\r\n            MaximumSizeOfEnemyLandUnits = 50\r\n\r\n            SafeDistanceForShips = 350\r\n            SafeDistanceForPlanes = 100\r\n            SafeDistanceForSubmarines = 200\r\n            SafeDistanceForLandUnits = 100\r\n\r\n            ExtraDistanceForBeingFriendly = 25\r\n            \r\n            MaximumTimeForCoursePrediction = 15\r\n            ObstacleExclusionDistance = 1000                -- Only crafts closer than this will be considered for possible collision.\r\n\r\n\r\n-- Map and terrain\r\n            DoAvoidMapBorders = false               -- Set this to 'true' if your craft will be fighting on a map with limited area. \r\n                                                    -- Map will be scanned to find its borders, where terrain ends with the sharp drop to the seabed level.\r\n                                                    -- This feature intended for Arena-style maps.\r\n            MinimumDistanceFromBorder = 500\r\n            TimeToPredictBorderViolation = 5\r\n\r\n            ProbeAheadForTerrain = false             -- 'true' for you craft to bounce away from walls on arena or from slopes of regular terrain. 'false' to disable.\r\n            TimeToPredictTerrain = 10\r\n            AltitudeDifferenceToPanic = -30         -- Craft will turn away if the difference between CoM and terrain ahead are this big.\r\n                                                    -- E.g. >0 - hill/wall for tanks, <0 - safe depth for ship.\r\n            ProbeForTerrainIfPlane = true\r\n            SendPitchUpIfTerrainAhead = true         -- In addition to turning left/right, will try to go up if 'true'. 'false' to disable.\r\n            \r\n            MinimumTerrainAltitudeToBeLandMap = -10     -- If altitude around center of the map is more than this - map will be treated as \"Land map\"\r\n                                                        --      and everything that is too low for \"Plane\" and too high for \"Submarine\"\r\n                                                        --      will be treated as \"Land Unit\", instead of being \"Ship\".\r\n\r\n\r\n--  Definition for Classes\r\n            AltitudeToBePlane = 20                -- Altitude (above average height of map center) at which crafts will be treated as planes.\r\n            \r\n            AltitudeToBeSubmarine = -11           -- Altitude at which crafts will be treated as submarines.\r\n            \r\n            TypeOfTheCraft = 1                    -- Type of the craft. Default - '1'.\r\n                                                  -- '1' for Automatic/Universal. Appropriate class will chosen based on current altitude.\r\n                                                  -- '2' for Surface: Ships, Water skimmers, Land units, etc.\r\n                                                  -- '3' for Planes.                \r\n                                                  -- '4' for Submarines.    \r\n\r\n\r\n-- Class segregation rules:\r\n            ShouldYourPlaneAvoidSurfaceCrafts = false\r\n            ShouldYourSurfaceCraftAvoidPlanes = false\r\n            ShouldYourSurfaceCraftAvoidSubmarines = false\r\n            ShouldYourSubmarineAvoidSurfaceCrafts = true\r\n            \r\n            DoCheckForCollisionWithEnemy = true             --  Leave this as 'true', unless you are building melee craft\r\n            DoCheckForCollisionWithFriendlies = true        --  or hate your own fleet\r\n            \r\n\r\n\r\n-- \"Gant\" algorithm tuning (by default it will be used on Planes and Submarines):\r\n            DisableUpAndDownCourseChange = false    -- If set to 'true' - craft will not change its altitude to avoid collision.\r\n            \r\n            UsePitchAltitudeLimit = true            -- If set to 'true' - craft will not change its altitude to avoid collision, \r\n                                                    --      if its altitude will be predicted outside of set safe limits.\r\n            \r\n            MinimumAltitudeForPlanePitchDown = 200\r\n            MaximumAltitudeForPlanePitchUp = 350\r\n            \r\n            MinimumAltitudeForSubmarinePitchDown = -200\r\n            MaximumAltitudeForSubmarinePitchUp = -100\r\n            \r\n            DownwardsSafetyFactor = 0.5             -- Multipliers for perceived safety for maneuvers. Set to '1' for fair assessment.\r\n            LeftSafetyFactor = 0.95\r\n\r\n\r\n--  Delays, in frames (1/40 of a second)\r\n            DelayBeforeTakingControlFromStandardAI = 10  -- To prevent small corrections to interfere with standard AI.\r\n            StartupDelay = 0         -- Increase it if you need more control after spawn.             \r\n\r\n\r\n--  Values for control axies, useful for standard AI\r\n            PropulsionRequestWhileAvoiding = 1\r\n            PropulsionRequestToStopOrReverse = 0.1\r\n            PropulsionRequestForYawRight = -1               -- Set this to '0' to disable the use of the control axis. \r\n            PropulsionRequestForPitchUp = 1                 -- Will not be overridden by roll-remap!\r\n\r\n            ChangeToYawDirectionWhileInReverse = 1              -- Set to -1 to invert yaw. Using reverse are not recommended!\r\n            MinimumDistanceToKeepReversing = 200                -- You craft will continue to reverse until it get this far from obstacle. \r\n\r\n--  Meaning of complex controls for commands, used for breadboard\r\n            CCCForYawRight = 8       -- K\r\n            CCCForYawLeft = 4        -- H\r\n            \r\n            CCCForPitchUp = 10       -- L\r\n            CCCForPitchDown = 9      -- O\r\n\r\n            CCCWhileAvoiding = 5     -- U\r\n            CCCToStopOrReverse = 6   -- J\r\n\r\n-- \"Don't mess with\" section (and i mean it!)\r\n            ActiveCraftsPerFrame = 3        -- This must be the same for all crafts in your fleet!\r\n                                            -- Defines how many instances of the script can be active on the crafts in your fleet during each frame.\r\n\r\n            ShowMessageForRunningAndWarnings = false\r\n\r\n            CourseChangeDegreesToLookForSafety = 30\r\n            \r\n            ForceUsageOfAlgorithm = \"Auto\"      --  'Auto' - Based on current class.\r\n                                                --  'Big Boy' - will use recorded turn rate to predict movement of obstacles.\r\n                                                --      Expensive, but capable of preventing pile-ups.\r\n                                                --      Intended for big ships and other not too wobbly or too pitchy crafts.\r\n                                                --  'Gnat' - will prob at the sides for less dangerous position, assuming instant turn.\r\n                                                --      Cheap, but good enough for maneuverable crafts.\r\n            AlgorithmForShip = \"Big Boy\"\r\n            AlgorithmForPlane = \"Gnat\"\r\n            AlgorithmForSubmarine = \"Gnat\"\r\n            AlgorithmForLandUnit = \"Big Boy\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--[[\r\n\r\n\r\n\r\n\r\nFirst shalt thou set type of AI, be that bread or standard.\r\nThen, shalt thou do no more, but do no less.\r\nSetting of the type shalt be the change thou shalt do,\r\n and the only change to the script shall be setting of the AI type.\r\nAny functions shalt thou not change, nor either unknown variables,\r\n excepting that thou set the AI type.\r\nAny change to the any function is right out.\r\nOnce the type of AI, being in the beginning of the script, be set,\r\n then all changes shall be ceased and no naughty collisions thou shalt suffer.\r\n \r\n \r\n\r\n\r\n\r\n]]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--                                      Don't touch the rest!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nCounterForDelayBeforeTakingControlFromStandardAI = 0\r\n\r\nFrameCounter = 0\r\nLastActiveFrame = 0\r\nNumberOfSkippedFrames = 1\r\n\r\nPreferredRight = true\r\nAggressiveForward = true\r\n\r\n--MaximumRateOfRotation = 25\r\n--MinimumRateOfRotation = 1\r\n\r\n--YawCommandMultiplier = 1\r\n--TryToOversaturateControlAxies = false\r\n\r\n\r\nDoInitializationOnStart = true\r\n\r\nConstructDimensions = Vector3(1, 1, 1)\r\nConstructSphericalHalfSize = 0\r\n\r\nFallBackForEnemySphericalHalfSize = MaximumSizeOfEnemyShips / 2\r\nDimensionsOfFriendlies = {}\r\nDimensionsOfEnemies = {}\r\nConstantForConstructId = -99\r\nConstantForEnemyId = -77\r\n\r\nLastFrameConstructVelocity = Vector3(0, 0, 0)\r\nLastFrameConstructPosition = Vector3(0, 10000, 0)\r\nConstructCurrentSpeed = 10\r\nConstructCurrentCourse = 0\r\nConstructMaxTurnRate = 10\r\nTimeNeededForConstructToReactSafely = 3\r\nLastFramePositionsAndVectors = {}\r\nRateOfRotationAndSpeed = {}\r\nDeclineOfRateOfRotation = 0.999        -- Redo\r\nDeclineOfSpeed = 0.9992\r\nEmaNumber = 0.1\r\nEmaNumberForConstructSpeed = 0.1\r\nEmaNumberForCourse = 0.15           -- As function of speed or something !!!\r\nEmaNumberForMaxCourse = 0.01\r\nEmaNumberForTurnRate = 0.1\r\nConstantForBigNumber = 999999\r\n\r\nConstantForFramesPerSecond = 40\r\n\r\nNumberOfFramesToPredictWith = 10\r\n\r\nConstructForwardsVelocityMagnitude = 0\r\n\r\nConstructHealthFractionWhenMaxSpeed = 1\r\nConstructHealthFractionWhenMaxTurnRate = 1\r\nConstructMaxSpeed = 0\r\nChangeInConstructHealthBeforeEvaluation = 0.98\r\n\r\nConstructMaxTurnRateLongAverage = 0\r\n\r\nPreviousCountForEnemiesAndFriendlies = 0\r\nPreviousCountForFriendlies = 0\r\nConstructPriorityNumber = 0\r\n\r\nDesiredYaw = 0\r\nDesiredForward = 0\r\nDesiredPitch = 0\r\n\r\nCounterForPollDelay = -99\r\nPollResultForPreviousFrame = 0\r\nVictoryInThePoll = false\r\nVictoryInThePollForPreviousFrame = false\r\n\r\n\r\nMapBorderPointX1 = -10000\r\nMapBorderPointZ1 = 10000\r\nMapBorderPointX2 = 10000\r\nMapBorderPointZ2 = -10000\r\n\r\nHasTheWorldMovedOn = false\r\n\r\nCurrentSafeDistance = SafeDistanceForShips\r\nCurrentTypeOfTheCraft = TypeOfTheCraft\r\nHeightOfMapCenter = 0\r\nIsItALandMap = false\r\n\r\nCurrentAlgorithm = \"Gnat\"\r\n\r\nfunction UpdateRotationAndSpeed(constructVelocity, newPositionsAndVectors)                             -- Need fix for angle at low speed?\r\n    local constructHealthFraction = I:GetHealthFraction()\r\n    \r\n    if constructVelocity.magnitude < 5 or (constructVelocity-LastFrameConstructVelocity).magnitude < 1 then\r\n        constructVelocity = LastFrameConstructVelocity\r\n    end\r\n\r\n    if constructVelocity.magnitude >= ConstructMaxSpeed then\r\n        ConstructMaxSpeed = ConstructMaxSpeed * (1 - EmaNumberForConstructSpeed) + constructVelocity.magnitude * EmaNumberForConstructSpeed\r\n        ConstructHealthFractionWhenMaxSpeed = constructHealthFraction\r\n    elseif constructHealthFraction <= ConstructHealthFractionWhenMaxSpeed * ChangeInConstructHealthBeforeEvaluation then\r\n        ConstructMaxSpeed = ConstructMaxSpeed - ConstructMaxSpeed * constructHealthFraction / ConstructHealthFractionWhenMaxSpeed / ConstantForFramesPerSecond * NumberOfSkippedFrames / 10\r\n    end    \r\n    \r\n    ConstructCurrentSpeed = math.max(1, ConstructCurrentSpeed * (1 - EmaNumber) + constructVelocity.magnitude * EmaNumber)            -- Reverse ??\r\n    \r\n    local constructTurnRate = Vector3.SignedAngle(constructVelocity, LastFrameConstructVelocity, Vector3.up) / NumberOfSkippedFrames\r\n    ConstructCurrentCourse = ConstructCurrentCourse * (1 - EmaNumberForCourse)\r\n            + constructTurnRate * ConstantForFramesPerSecond * EmaNumberForCourse\r\n    \r\n    ConstructMaxTurnRateLongAverage = ConstructMaxTurnRateLongAverage * (1 - EmaNumberForMaxCourse) + math.abs(constructTurnRate * ConstantForFramesPerSecond) * EmaNumberForMaxCourse\r\n    if ConstructMaxTurnRateLongAverage >= ConstructMaxTurnRate then\r\n        ConstructMaxTurnRate = ConstructMaxTurnRate * (1 - EmaNumberForCourse) + ConstructMaxTurnRateLongAverage * EmaNumberForCourse\r\n        ConstructHealthFractionWhenMaxTurnRate = constructHealthFraction\r\n    elseif (constructHealthFraction <= ConstructHealthFractionWhenMaxTurnRate * ChangeInConstructHealthBeforeEvaluation)\r\n            or (ConstructMaxTurnRate > ConstructMaxTurnRateLongAverage * 2) then\r\n        ConstructMaxTurnRate = ConstructMaxTurnRate - ConstructMaxTurnRate * constructHealthFraction / ConstructHealthFractionWhenMaxTurnRate / ConstantForFramesPerSecond * NumberOfSkippedFrames / 10\r\n    end\r\n\r\n    if math.abs(ConstructCurrentCourse) > ConstructMaxTurnRate then\r\n        ConstructCurrentCourse = ConstructCurrentCourse * 0.9\r\n    end\r\n\r\n    TimeNeededForConstructToReactSafely = math.min(math.max(90 / ConstructMaxTurnRate, 1), MaximumTimeForCoursePrediction)\r\n    \r\n    local newRateOfRotationAndSpeed = {}\r\n    for id, data in pairs(newPositionsAndVectors) do\r\n        if not LastFramePositionsAndVectors[id] then\r\n            RateOfRotationAndSpeed[id] = {Id = data.Id, CurrentCourse = 0, MaxSpeed = 1}\r\n            LastFramePositionsAndVectors[id] = {Id = data.Id, Position = data.Position, Velocity = data.Velocity}\r\n        end        \r\n        newRateOfRotationAndSpeed[id] = {\r\n            Id = data.Id,           \r\n            CurrentCourse = RateOfRotationAndSpeed[id].CurrentCourse * (1 - EmaNumberForCourse)\r\n                    + Vector3.SignedAngle(data.Velocity, LastFramePositionsAndVectors[id].Velocity, Vector3.up) * ConstantForFramesPerSecond * EmaNumberForCourse,\r\n            MaxSpeed = math.max(1, RateOfRotationAndSpeed[id].MaxSpeed * DeclineOfSpeed,\r\n                    RateOfRotationAndSpeed[id].MaxSpeed * (1 - EmaNumber) + data.Velocity.magnitude * EmaNumber)\r\n        }\r\n    end\r\n    RateOfRotationAndSpeed = newRateOfRotationAndSpeed\r\n    LastFrameConstructVelocity = constructVelocity\r\nend\r\n\r\n\r\nfunction GetSphericalHalfSize(id)\r\n    if id == ConstantForConstructId then\r\n        return ConstructSphericalHalfSize\r\n    end\r\n\r\n    if DimensionsOfEnemies[id] ~= nil then\r\n       -- DBG(\"DimensionsOfEnemies[id]: \".. DimensionsOfEnemies[id])\r\n        return DimensionsOfEnemies[id]                   \r\n    end    \r\n\r\n    if DimensionsOfFriendlies[id] ~= nil then\r\n      --  DBG(\"DimensionsOfFriendlies[id].MaxSphericalHalfSize: \".. DimensionsOfFriendlies[id].MaxSphericalHalfSize ..\"  id: \"..id)        \r\n        return DimensionsOfFriendlies[id].MaxSphericalHalfSize               \r\n    end\r\n\r\n    if id == ConstantForEnemyId then\r\n       -- DBG(\"Wrong size. id: \"..id)\r\n        return FallBackForEnemySphericalHalfSize                                           \r\n    end\r\n\r\n    UpdateFriendlySizes()\r\n    if DimensionsOfFriendlies[id] ~= nil then\r\n      --  DBG(\"New DimensionsOfFriendlies[id].MaxSphericalHalfSize: \".. DimensionsOfFriendlies[id].MaxSphericalHalfSize ..\"  id: \"..id)\r\n        return DimensionsOfFriendlies[id].MaxSphericalHalfSize                   \r\n    end    \r\n    \r\n    DBG(\"No Size! for  \"..id)\r\n    return FallBackForEnemySphericalHalfSize\r\nend\r\n\r\n\r\nfunction GetDistanceToObstacleSphere (constructPosition, obstaclePosition, obstacleId) \r\n    return (constructPosition - obstaclePosition).magnitude - ConstructSphericalHalfSize - GetSphericalHalfSize(obstacleId)\r\nend\r\n\r\n\r\nfunction CalculateFlybyDistanceAndTime(constructPosition, constructVelocity, obstaclePosition, obstacleVelocity, obstacleId)   \r\n    local currentSphericalDistance = GetDistanceToObstacleSphere(constructPosition, obstaclePosition, obstacleId)           -- Add id for frd     \r\n    local distanceVector = constructPosition - obstaclePosition    \r\n    local velocityProjection = Vector3.Dot(constructVelocity - obstacleVelocity, distanceVector) / distanceVector.magnitude\r\n    local timeToCloseTheDistance = (currentSphericalDistance / velocityProjection) * -1 \r\n    local predictedPositionForObstacle = obstaclePosition + obstacleVelocity * timeToCloseTheDistance            \r\n    local predictedPositionForConstruct = constructPosition + constructVelocity * timeToCloseTheDistance\r\n    local predictedDistance = GetDistanceToObstacleSphere(predictedPositionForConstruct, predictedPositionForObstacle, obstacleId)\r\n    return predictedDistance, timeToCloseTheDistance, currentSphericalDistance, predictedPositionForConstruct.y\r\nend\r\n\r\n\r\nfunction FindMinimalFlybyDistanceAndTime(constructPosition, constructVelocity, positionsAndVectors)\r\n    local minDistancePredicted = ConstantForBigNumber\r\n    local minTimePredicted = ConstantForBigNumber\r\n    local minDistance = ConstantForBigNumber\r\n    local constructNewAltitudeForClosest = 0\r\n    local closestObstacleId = 0 \r\n    \r\n    for id, data in pairs(positionsAndVectors) do\r\n            local distancePrediction, timePrediction, currentSphericalDistance, constructNewAltitude = CalculateFlybyDistanceAndTime(\r\n                                                            constructPosition, constructVelocity,\r\n                                                            data.Position, data.Velocity, data.Id)\r\n        if timePrediction < minTimePredicted and timePrediction > 0 then\r\n            minDistancePredicted = distancePrediction\r\n            minTimePredicted = timePrediction\r\n            constructNewAltitudeForClosest = constructNewAltitude\r\n        end\r\n        if currentSphericalDistance < minDistance then\r\n            minDistance = currentSphericalDistance\r\n            closestObstacleId = id\r\n        end\r\n     --   DBG(\"FB: id: \"..id..\" distancePrediction: \"..distancePrediction..\" timePrediction:\"..timePrediction..\" currentSphericalDistance: \"..currentSphericalDistance)\r\n    end\r\n    return minDistancePredicted, minTimePredicted, minDistance, closestObstacleId, constructNewAltitudeForClosest                  \r\nend\r\n\r\n\r\nfunction PredictFutureCircularPosition(travelTime, currentPosition, velocityVector, speed, rateOfTurn, currentCourse)           -- V3 math are FUUUCKING SLOOOOW!\r\n    local timeToChangeCourse = math.abs((currentCourse - rateOfTurn) / rateOfTurn)\r\n    local partialCourseChange = (rateOfTurn * (travelTime / timeToChangeCourse) + currentCourse) / 2\r\n\r\n    if travelTime < timeToChangeCourse then\r\n      --  return currentPosition + Quaternion.AngleAxis(medianCourse, Vector3.up) * velocityVector * (travelTime * 0.8)       -- Am i happy with this? \r\n        return currentPosition + Quaternion.AngleAxis(partialCourseChange, Vector3.up) * velocityVector.normalized * speed * (travelTime * 0.8)\r\n    end\r\n    \r\n    local medianCourse = (rateOfTurn + currentCourse) / 2\r\n    \r\n    travelTime = travelTime - timeToChangeCourse\r\n    local vectorFromStartToCenter = Quaternion(0, 0.70710676908493, 0, 0.70710676908493) * velocityVector.normalized * (speed * 180 / rateOfTurn /  math.pi)\r\n    local vectorFromCenterToPredictionPoint = Quaternion.AngleAxis(rateOfTurn * travelTime, Vector3.up) * (vectorFromStartToCenter * -1)\r\n    return currentPosition + Quaternion.AngleAxis(medianCourse, Vector3.up) * velocityVector * timeToChangeCourse\r\n            + vectorFromStartToCenter + vectorFromCenterToPredictionPoint\r\nend\r\n\r\n\r\nfunction CompareSafetyOfManeuversAndChooseDirectionOfTurn (timeNeededToReactSafely, numberOfFrames, constructPosition, constructVelocity, currentPositionsAndVectors)\r\n    local constructSpeed = ConstructCurrentSpeed\r\n    local constructCurrentCourse = ConstructCurrentCourse * -0.7\r\n    local constructHardRightCourse = ConstructMaxTurnRate * 0.7\r\n    local constructHardLeftCourse = ConstructMaxTurnRate * -0.7\r\n\r\n   -- DBG(\"L: \"..constructHardLeftCourse..\" C: \"..constructCurrentCourse..\" R: \"..constructHardRightCourse)\r\n\r\n    local minCurrentDistanceCurrentCourse, minFinalCurrentDistanceCurrentCourse = ConstantForBigNumber, ConstantForBigNumber\r\n    local minCurrentDistanceHardRightCourse, minFinalCurrentDistanceHardRightCourse = ConstantForBigNumber, ConstantForBigNumber\r\n    local minCurrentDistanceHardLeftCourse, minFinalCurrentDistanceHardLeftCourse = ConstantForBigNumber, ConstantForBigNumber\r\n\r\n    local averageDistanceCC, averageDistanceHR, averageDistanceHL = 0, 0, 0\r\n    \r\n    for currentFrame = 1, numberOfFrames do\r\n        local timeFrame = timeNeededToReactSafely / numberOfFrames * currentFrame\r\n\r\n        local constructPositionCurrentCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructCurrentCourse, constructCurrentCourse)\r\n        local constructPositionHardRightCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructHardRightCourse, constructCurrentCourse)\r\n        local constructPositionHardLeftCourse = PredictFutureCircularPosition(\r\n                timeFrame, constructPosition, constructVelocity, constructSpeed, constructHardLeftCourse, constructCurrentCourse)\r\n\r\n        for id, data in pairs(currentPositionsAndVectors) do\r\n            local currentCourse = Get_TurnRate(id)\r\n            local obstaclePosition = PredictFutureCircularPosition (timeFrame, data.Position, data.Velocity, Get_Speed(id), currentCourse, currentCourse)\r\n            local fakeId = data.Id\r\n\r\n            local currentDistanceCurrentCourse = GetDistanceToObstacleSphere(constructPositionCurrentCourse, obstaclePosition, fakeId)\r\n            local currentDistanceHardRightCourse = GetDistanceToObstacleSphere(constructPositionHardRightCourse, obstaclePosition, fakeId)\r\n            local currentDistanceHardLeftCourse = GetDistanceToObstacleSphere(constructPositionHardLeftCourse, obstaclePosition, fakeId)\r\n\r\n            averageDistanceCC = averageDistanceCC + currentDistanceCurrentCourse                        -- Ignore by distance\r\n            averageDistanceHR = averageDistanceHR + currentDistanceHardRightCourse\r\n            averageDistanceHL = averageDistanceHL + currentDistanceHardLeftCourse\r\n            \r\n            if currentFrame == numberOfFrames then\r\n                if currentDistanceCurrentCourse < minFinalCurrentDistanceCurrentCourse then\r\n                    minFinalCurrentDistanceCurrentCourse = currentDistanceCurrentCourse\r\n                end\r\n                if currentDistanceHardRightCourse < minFinalCurrentDistanceHardRightCourse then\r\n                    minFinalCurrentDistanceHardRightCourse = currentDistanceHardRightCourse\r\n                end\r\n                if currentDistanceHardLeftCourse < minFinalCurrentDistanceHardLeftCourse then\r\n                    minFinalCurrentDistanceHardLeftCourse = currentDistanceHardLeftCourse\r\n                end\r\n            else\r\n                if currentDistanceCurrentCourse < minCurrentDistanceCurrentCourse then\r\n                    minCurrentDistanceCurrentCourse = currentDistanceCurrentCourse\r\n                end\r\n                if currentDistanceHardRightCourse < minCurrentDistanceHardRightCourse then\r\n                    minCurrentDistanceHardRightCourse = currentDistanceHardRightCourse\r\n                end\r\n                if currentDistanceHardLeftCourse < minCurrentDistanceHardLeftCourse then\r\n                    minCurrentDistanceHardLeftCourse = currentDistanceHardLeftCourse\r\n                end\r\n            end\r\n\r\n        end\r\n\r\n    end\r\n\r\n    averageDistanceCC = averageDistanceCC / numberOfFrames\r\n    averageDistanceHR = averageDistanceHR / numberOfFrames\r\n    averageDistanceHL = averageDistanceHL / numberOfFrames\r\n--[[\r\n    DBG(\"minCurrentDistanceHardLeftCourse: \"..minCurrentDistanceHardLeftCourse\r\n            ..\" minCurrentDistanceCurrentCourse: \"..minCurrentDistanceCurrentCourse\r\n            ..\" minCurrentDistanceHardRightCourse: \"..minCurrentDistanceHardRightCourse)\r\n    DBG(\"minFinalCurrentDistanceHardLeftCourse: \"..minFinalCurrentDistanceHardLeftCourse\r\n            ..\" minFinalCurrentDistanceCurrentCourse: \"..minFinalCurrentDistanceCurrentCourse\r\n            ..\" minFinalCurrentDistanceHardRightCourse: \"..minFinalCurrentDistanceHardRightCourse)\r\n    DBG(\"averageDistanceHL: \"..averageDistanceHL\r\n            ..\" averageDistanceCC: \"..averageDistanceCC\r\n            ..\" averageDistanceHR: \"..averageDistanceHR)\r\n\r\n    ]]\r\n    local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n    local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n    local YawDirectionSign = 1\r\n    if ConstructForwardsVelocityMagnitude < 0 then                                          -- Redo!\r\n        propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n        PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n        YawDirectionSign = ChangeToYawDirectionWhileInReverse\r\n    end\r\n    \r\n    if AggressiveForward \r\n            and minFinalCurrentDistanceCurrentCourse > CurrentSafeDistance and (minCurrentDistanceCurrentCourse > CurrentSafeDistance\r\n            or (minCurrentDistanceCurrentCourse > 0 and averageDistanceCC > averageDistanceHL and averageDistanceCC > averageDistanceHR))\r\n       --     and minCurrentDistanceCurrentCourse > minCurrentDistanceHardLeftCourse and minCurrentDistanceCurrentCourse > minCurrentDistanceHardRightCourse \r\n    then    \r\n        DBG(\"It's fine!\")\r\n        return 0, 0, 0\r\n    end\r\n    \r\n    if PreferredRight and minFinalCurrentDistanceHardRightCourse > CurrentSafeDistance and minCurrentDistanceHardRightCourse > 0 \r\n        and averageDistanceHR > averageDistanceHL\r\n    then\r\n        DBG(\"Preferred Right.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse and\r\n            minFinalCurrentDistanceHardRightCourse > CurrentSafeDistance and\r\n            minCurrentDistanceHardRightCourse > 0 then\r\n        DBG(\"Go right. Safe.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardLeftCourse > minFinalCurrentDistanceHardRightCourse and\r\n            minFinalCurrentDistanceHardLeftCourse > CurrentSafeDistance and\r\n            minCurrentDistanceHardLeftCourse > 0 then\r\n        DBG(\"Go left. Safe.\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n\r\n    if minFinalCurrentDistanceHardRightCourse < 0 and minFinalCurrentDistanceHardLeftCourse < 0 then\r\n        if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse then\r\n        --if minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse then\r\n            DBG(\"Right. Unsafe!\")\r\n            return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n        else\r\n            DBG(\"Left. Unsafe!\")\r\n            return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0  \r\n        end\r\n    end\r\n \r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse\r\n            and minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse\r\n    then\r\n        DBG(\"Right. Unsafe 2!\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n    if minFinalCurrentDistanceHardLeftCourse > minFinalCurrentDistanceHardRightCourse\r\n            and minCurrentDistanceHardLeftCourse > minCurrentDistanceHardRightCourse\r\n    then    \r\n        DBG(\"Left. Unsafe 2!\")\r\n         return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n        \r\n    end\r\n\r\n    if  averageDistanceHR > averageDistanceHL\r\n            and minCurrentDistanceHardRightCourse > minCurrentDistanceHardLeftCourse then\r\n        DBG(\"Right. Unsafe 3 !\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, propulsionRequestForward, 0    \r\n    end\r\n    if averageDistanceHL > averageDistanceHR\r\n            and minCurrentDistanceHardLeftCourse > minCurrentDistanceHardRightCourse then\r\n        DBG(\"Left. Unsafe 3 !\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, propulsionRequestForward, 0\r\n    end\r\n    \r\n    if minFinalCurrentDistanceHardRightCourse > minFinalCurrentDistanceHardLeftCourse then\r\n        DBG(\"Attaque! Right.\")\r\n        return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\n    else\r\n        DBG(\"Attaque! Left.\")\r\n        return PropulsionRequestForYawRight * -1 * YawDirectionSign, PropulsionRequestReverse, 0\r\n    end\r\n\r\n    return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\nend\r\n\r\n\r\nfunction GetConstructRoll(constructForwardVector, constructUpVector)\r\n    local constructYawRaw = math.atan2(constructForwardVector.z, constructForwardVector.x);\r\n    local constructRoll = math.asin(constructUpVector.x * math.sin(constructYawRaw) - constructUpVector.z * math.cos(constructYawRaw));\r\n    if(constructUpVector.y < 0) then\r\n        if constructRoll < 0 then\r\n            constructRoll = -1 * math.pi - constructRoll\r\n        else\r\n            constructRoll = 1 * math.pi - constructRoll\r\n        end\r\n    end\r\n    return constructRoll * 180 / math.pi * -1  \r\nend\r\n\r\n\r\nfunction CompareSafetyOfManeuversAndChooseDirectionOfTurnForPlane(constructPosition, constructVelocity, newPositionsAndVectors, timeToCollision)\r\n    local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n    local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n    local YawDirectionSign = 1\r\n    if ConstructForwardsVelocityMagnitude < 0 then                                          -- Redo!\r\n        propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n        PropulsionRequestReverse = PropulsionRequestWhileAvoiding\r\n        YawDirectionSign = ChangeToYawDirectionWhileInReverse\r\n    end\r\n\r\n   -- DBG(\"YawDirectionSign: \"..YawDirectionSign)\r\n    \r\n    local desiredYaw, desiredForward, desiredPitch = 0, 0, 0\r\n\r\n    local constructRightVector = I:GetConstructRightVector()\r\n    local constructUpVector = I:GetConstructUpVector()\r\n    local constructForwardVector = I:GetConstructForwardVector()\r\n    \r\n\r\n    local constructRollRounded = Mathf.Round(GetConstructRoll(constructForwardVector, constructUpVector) / 90) * 90\r\n    \r\n    local angleStep = CourseChangeDegreesToLookForSafety    \r\n    local angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight = 1, 1, 1, 1\r\n\r\n    if constructRollRounded == 0 then\r\n        angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight\r\n            = -1, DownwardsSafetyFactor, -1 * LeftSafetyFactor, 1\r\n    end\r\n    if constructRollRounded == -90 then\r\n        angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight\r\n        = -1, 1 * LeftSafetyFactor, -1, DownwardsSafetyFactor\r\n    end\r\n    if constructRollRounded == 90 then\r\n        angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight\r\n        = -1 * LeftSafetyFactor, 1, -1 * DownwardsSafetyFactor, 1\r\n    end    \r\n    if constructRollRounded == -180 or constructRollRounded == 180 then\r\n        angleStepRemapMultiplierUp, angleStepRemapMultiplierDown, angleStepRemapMultiplierLeft, angleStepRemapMultiplierRight\r\n        = -1 * DownwardsSafetyFactor, 1, -1, 1 * LeftSafetyFactor\r\n    end\r\n    \r\n    local minDistancePredictedUp, minTimePredictedUp, currentDistanceUp, closestObstacleIdUp, constructNewAltitudeUp\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * angleStepRemapMultiplierUp, constructRightVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedDown, minTimePredictedDown, currentDistanceDown, closestObstacleIdDown, constructNewAltitudeDown\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * angleStepRemapMultiplierDown, constructRightVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedLeft, minTimePredictedLeft, currentDistanceLeft, closestObstacleIdLeft, constructNewAltitudeLeft\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * angleStepRemapMultiplierLeft, constructUpVector) * constructVelocity, newPositionsAndVectors)\r\n    local minDistancePredictedRight, minTimePredictedRight, currentDistanceRight, closestObstacleIdRight, constructNewAltitudeRight\r\n    =  FindMinimalFlybyDistanceAndTime(constructPosition, Quaternion.AngleAxis(angleStep * angleStepRemapMultiplierRight, constructUpVector) * constructVelocity, newPositionsAndVectors)\r\n    \r\n    local MinimumAltitudeForPitchDown = MinimumAltitudeForSubmarinePitchDown\r\n    local MaximumAltitudeForPitchUp = MaximumAltitudeForPlanePitchUp\r\n    if CurrentTypeOfTheCraft == 3 then\r\n        MinimumAltitudeForPitchDown = MinimumAltitudeForPlanePitchDown\r\n        MaximumAltitudeForPitchUp = MaximumAltitudeForPlanePitchUp      \r\n    end\r\n    if CurrentTypeOfTheCraft == 4 then\r\n        MinimumAltitudeForPitchDown = MinimumAltitudeForSubmarinePitchDown\r\n        MaximumAltitudeForPitchUp = MaximumAltitudeForSubmarinePitchUp\r\n    end\r\n\r\n    if DisableUpAndDownCourseChange then\r\n        MinimumAltitudeForPitchDown = 10000\r\n        MaximumAltitudeForPitchUp = -10000\r\n        UsePitchAltitudeLimit = true\r\n    end\r\n    \r\n    \r\n    if desiredPitch == 0 then\r\n        if minDistancePredictedDown > minDistancePredictedUp then\r\n            desiredPitch = PropulsionRequestForPitchUp * -1\r\n            DBG(\"Down.\")\r\n            if UsePitchAltitudeLimit\r\n                and ( (constructRollRounded == 0 and constructNewAltitudeDown < MinimumAltitudeForPitchDown)\r\n                    or ((constructRollRounded == -180 or constructRollRounded == 180) and constructNewAltitudeDown > MaximumAltitudeForPitchUp) ) then\r\n                desiredPitch = 0\r\n           --     DBG(\"Pitch limit.  constructNewAltitudeDown: \"..constructNewAltitudeDown)\r\n            end\r\n        else\r\n            desiredPitch = PropulsionRequestForPitchUp\r\n            DBG(\"Up.\")\r\n            if UsePitchAltitudeLimit\r\n                and ( (constructRollRounded == 0 and constructNewAltitudeUp > MaximumAltitudeForPitchUp)\r\n                    or ((constructRollRounded == -180 or constructRollRounded == 180) and constructNewAltitudeUp < MinimumAltitudeForPitchDown) ) then\r\n                desiredPitch = 0\r\n        --        DBG(\"Pitch limit.  constructNewAltitudeUp: \"..constructNewAltitudeUp)\r\n            end\r\n        end\r\n        if minTimePredictedUp < timeToCollision and minTimePredictedDown < timeToCollision then\r\n            desiredForward = PropulsionRequestReverse\r\n       --     DBG(\"Close U/D.\")\r\n        else\r\n            desiredForward = propulsionRequestForward        \r\n        end\r\n    end\r\n    \r\n    if desiredYaw == 0 then\r\n        if minDistancePredictedRight > minDistancePredictedLeft then\r\n            desiredYaw = PropulsionRequestForYawRight * YawDirectionSign\r\n            DBG(\"Right\")\r\n            if UsePitchAltitudeLimit\r\n                and ( (constructRollRounded == 90 and constructNewAltitudeRight > MaximumAltitudeForPitchUp)\r\n                    or (constructRollRounded == -90 and constructNewAltitudeRight < MinimumAltitudeForPitchDown) ) then\r\n                desiredYaw = 0\r\n            --    DBG(\"Yaw limit.  constructNewAltitudeRight: \"..constructNewAltitudeRight)\r\n            end\r\n        else\r\n            desiredYaw = PropulsionRequestForYawRight * YawDirectionSign * -1\r\n            DBG(\"Left\")\r\n            if UsePitchAltitudeLimit\r\n                and ( (constructRollRounded == 90 and constructNewAltitudeLeft < MinimumAltitudeForPitchDown)\r\n                    or (constructRollRounded == -90 and constructNewAltitudeLeft > MaximumAltitudeForPitchUp) ) then\r\n                desiredYaw = 0\r\n           --     DBG(\"Yaw limit.  constructNewAltitudeLeft: \"..constructNewAltitudeLeft)\r\n            end\r\n        end\r\n        if minTimePredictedLeft < timeToCollision and minTimePredictedRight < timeToCollision then\r\n            desiredForward = PropulsionRequestReverse\r\n           -- DBG(\"Close L/R.\")\r\n        else\r\n            desiredForward = propulsionRequestForward\r\n        end\r\n    end\r\n    \r\n    return desiredYaw, desiredForward, desiredPitch\r\nend\r\n\r\n\r\nfunction SetPriorityNumberAndCountFriendlies ()\r\n    local result = 0\r\n    local count = 1\r\n    local FriendlyIds = {}\r\n    local constructId = I:GetUniqueId()\r\n    table.insert (FriendlyIds, constructId)\r\n    for i = 0, I:GetFriendlyCount() - 1, 1 do\r\n        table.insert (FriendlyIds, I:GetFriendlyInfo(i).Id)\r\n        count = count + 1\r\n    end\r\n    \r\n    table.sort(FriendlyIds, function(a,b) return a<b end)\r\n\r\n    for _, data in pairs(FriendlyIds) do\r\n        if constructId == data then\r\n            break\r\n        end        \r\n        result = result + 1\r\n    end\r\n\r\n    PreviousCountForFriendlies = count\r\n    ConstructPriorityNumber = result\r\nend\r\n\r\n\r\nfunction ShouldItBeAvoided(constructPosition, position)\r\n\r\n    local typeOfEnemy = GetTypeOfUnitFromAltitude (position)\r\n\r\n  --  DBG(\"ShouldItBeAvoided. \"..PV(position-constructPosition))\r\n\r\n    if (position - constructPosition).magnitude < ObstacleExclusionDistance then\r\n        \r\n        if typeOfEnemy == CurrentTypeOfTheCraft then\r\n            return true\r\n        end\r\n        \r\n        if CurrentTypeOfTheCraft == 2 and ShouldYourSurfaceCraftAvoidPlanes and typeOfEnemy == 3 then\r\n            return true\r\n        end\r\n\r\n        if CurrentTypeOfTheCraft == 2 and ShouldYourSurfaceCraftAvoidSubmarines and typeOfEnemy == 4 then\r\n            return true\r\n        end\r\n\r\n        if CurrentTypeOfTheCraft == 3 and ShouldYourPlaneAvoidSurfaceCrafts and typeOfEnemy == 2 then\r\n            return true\r\n        end\r\n\r\n        if CurrentTypeOfTheCraft == 4 and ShouldYourSubmarineAvoidSurfaceCrafts and typeOfEnemy == 2 then\r\n            return true\r\n        end\r\n    end\r\n    \r\n --   DBG(\"ShouldItBeAvoided. false !!\")\r\n    \r\n    return false\r\nend\r\n\r\n\r\nfunction GetBorderViolationMetric  (constructPosition, constructVelocity)\r\n    local newPosition = constructPosition + constructVelocity * TimeToPredictBorderViolation\r\n    local north = newPosition.z - MapBorderPointZ1\r\n    local south = (newPosition.z - MapBorderPointZ2) * -1\r\n    local west = (newPosition.x - MapBorderPointX1) * -1\r\n    local east = newPosition.x - MapBorderPointX2\r\n\r\n  --  DBG(\"north: \"..north..\" south: \"..south..\" west: \"..west..\" east: \"..east)    \r\n    \r\n    return math.max(north, south, west, east)    \r\nend\r\n\r\n\r\nfunction CheckForBorderViolation (constructPosition, constructVelocity)\r\n  --  local newPosition = constructPosition + constructVelocity * TimeToPredictBorderViolation\r\n\r\n --   DBG(\"I:GetConstructYaw(): \"..I:GetConstructYaw())\r\n    local currentViolation = GetBorderViolationMetric(constructPosition, constructVelocity)\r\n    \r\n --   DBG(\"currentViolation: \"..currentViolation)\r\n\r\n\r\n    if currentViolation>0 then\r\n        local angleStep = CourseChangeDegreesToLookForSafety\r\n\r\n       -- local constructRightVector = I:GetConstructRightVector()\r\n      --  local constructUpVector = I:GetConstructUpVector()        \r\n        \r\n        \r\n        local rightTurnViolation = GetBorderViolationMetric(constructPosition, Quaternion.AngleAxis(angleStep --[[ *angleStepRemapMultiplierUp]], Vector3.up) * constructVelocity)\r\n        local leftTurnViolation = GetBorderViolationMetric(constructPosition, Quaternion.AngleAxis(angleStep * -1--[[ *angleStepRemapMultiplierUp]], Vector3.up) * constructVelocity)\r\n        DBG(\"rightTurnViolation: \"..rightTurnViolation..\" leftTurnViolation: \"..leftTurnViolation)\r\n\r\n        local turnDirectionSign = 1\r\n        \r\n        if rightTurnViolation < leftTurnViolation then\r\n            DBG(\"Turning right from border!\")\r\n            turnDirectionSign = 1\r\n        else\r\n            DBG(\"Turning left from border!\")\r\n            turnDirectionSign = -1\r\n        end\r\n\r\n        \r\n        local constructUpVector = I:GetConstructUpVector()\r\n        local constructForwardVector = I:GetConstructForwardVector()\r\n        local constructRollRounded = Mathf.Round(GetConstructRoll(constructForwardVector, constructUpVector) / 90) * 90\r\n\r\n        if constructRollRounded == 0 then\r\n            return PropulsionRequestForYawRight * turnDirectionSign, 0\r\n        end\r\n        if constructRollRounded == -90 then\r\n            return 0, PropulsionRequestForPitchUp * turnDirectionSign                                       -- check roll sign!\r\n        end\r\n        if constructRollRounded == 90 then\r\n            return 0, PropulsionRequestForPitchUp * turnDirectionSign * -1\r\n        end\r\n        if constructRollRounded == -180 or constructRollRounded == 180 then\r\n            return PropulsionRequestForYawRight * turnDirectionSign * -1, 0\r\n        end\r\n        \r\n    end\r\n    \r\n    return 0, 0\r\nend\r\n\r\n\r\nfunction CheckForWorldShift (constructPosition, lastFrameConstructPosition, constructVelocity)\r\n    if (constructPosition - lastFrameConstructPosition).magnitude / (constructVelocity.magnitude * NumberOfSkippedFrames / 40 ) > 100 then\r\n      --  I:LogToHud(\"World Shift! Xc:\" .. Mathf.Round((MapBorderPointX1+MapBorderPointX2)/2)..\" Zc: \"..Mathf.Round((MapBorderPointZ1+MapBorderPointZ2)/2))\r\n        return true\r\n    else    \r\n        return false\r\n    end\r\nend\r\n\r\n\r\n\r\nfunction FindMapBorderPoints(anyTerrainX, anyTerrainZ, farFarAway)\r\n\r\n    function FindBorderLine(lastTerrainPoint, lastSeabedPoint, seabedDepth, direction, otherCoordinate)\r\n        --local lastTerrainPoint-lastSeabedPoint\r\n        --  I:Log(\"lastTerrainPoint: \"..lastTerrainPoint..\"  lastSeabedPoint: \"..lastSeabedPoint)\r\n        if (lastSeabedPoint - lastTerrainPoint) <= 1 and (lastSeabedPoint - lastTerrainPoint) >= -1 then\r\n            return lastTerrainPoint\r\n        else\r\n            local newPoint = lastTerrainPoint + (lastSeabedPoint - lastTerrainPoint)/2\r\n            local depth = 0\r\n            if direction == \"NS\" then\r\n                depth = I:GetTerrainAltitudeForPosition(otherCoordinate, 0, newPoint)\r\n            else\r\n                depth = I:GetTerrainAltitudeForPosition(newPoint, 0, otherCoordinate)\r\n            end\r\n\r\n            if depth == seabedDepth then\r\n                return FindBorderLine(lastTerrainPoint, newPoint, seabedDepth, direction, otherCoordinate)\r\n            else\r\n                return FindBorderLine(newPoint, lastSeabedPoint, seabedDepth, direction, otherCoordinate)\r\n            end\r\n\r\n        end\r\n    end\r\n\r\n    local seabedDepth = I:GetTerrainAltitudeForPosition(farFarAway, 0, farFarAway)\r\n  --  I:Log(\"seabedDepth: \"..seabedDepth)\r\n    --[[ I:Log(\"zE: \"..FindBorderLine(anyTerrainX, farFarAway, seabedDepth, \"WE\", anyTerrainZ))\r\n     I:Log(\"zW: \"..FindBorderLine(anyTerrainX, -farFarAway, seabedDepth, \"WE\", anyTerrainZ))\r\n     I:Log(\"zN: \"..FindBorderLine(anyTerrainZ, farFarAway, seabedDepth, \"NS\", anyTerrainX))\r\n     I:Log(\"zS: \"..FindBorderLine(anyTerrainZ, -farFarAway, seabedDepth, \"NS\", anyTerrainX))\r\n     ]]\r\n    return FindBorderLine(anyTerrainX, -farFarAway, seabedDepth, \"WE\", anyTerrainZ) + MinimumDistanceFromBorder,\r\n    FindBorderLine(anyTerrainZ, farFarAway, seabedDepth, \"NS\", anyTerrainX) - MinimumDistanceFromBorder,\r\n    FindBorderLine(anyTerrainX, farFarAway, seabedDepth, \"WE\", anyTerrainZ) - MinimumDistanceFromBorder,\r\n    FindBorderLine(anyTerrainZ, -farFarAway, seabedDepth, \"NS\", anyTerrainX) + MinimumDistanceFromBorder\r\n\r\nend\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction CheckForTerrainAhead (constructPosition, constructVelocity)\r\n   -- local newPosition = constructPosition + constructVelocity * TimeToPredictBorderViolation\r\n    \r\n    local constructForwardVector = I:GetConstructForwardVector()\r\n  \r\n\r\n    local altitudeOfTerrainAhead = I:GetTerrainAltitudeForPosition(constructPosition + constructVelocity * TimeToPredictTerrain)\r\n    local altitudeOfTerrainCloseAhead = I:GetTerrainAltitudeForPosition(constructPosition + constructVelocity * 1)  \r\n\r\n --   DBG(\"constructPosition.y: \"..constructPosition.y..\"  altitudeOfTerrainAhead: \"..altitudeOfTerrainAhead..\"  altitudeOfTerrainCloseAhead: \"..altitudeOfTerrainCloseAhead)\r\n\r\n\r\n    if ((altitudeOfTerrainAhead - AltitudeDifferenceToPanic) > constructPosition.y)\r\n            or ((altitudeOfTerrainCloseAhead - AltitudeDifferenceToPanic) > constructPosition.y) then\r\n        \r\n        local angleStep = CourseChangeDegreesToLookForSafety\r\n\r\n        local rightTurnTerrainAltitude = I:GetTerrainAltitudeForPosition(constructPosition + Quaternion.AngleAxis(angleStep, Vector3.up) * constructVelocity * TimeToPredictTerrain)\r\n        local leftTurnTerrainAltitude = I:GetTerrainAltitudeForPosition(constructPosition + Quaternion.AngleAxis(angleStep * -1, Vector3.up) * constructVelocity * TimeToPredictTerrain)\r\n        DBG(\"rightTurnTerrainAltitude: \"..rightTurnTerrainAltitude..\" leftTurnTerrainAltitude: \"..leftTurnTerrainAltitude)\r\n\r\n        \r\n        local turnDirectionSign = 1\r\n        local desiredPitch = 0\r\n        \r\n        if SendPitchUpIfTerrainAhead then\r\n            desiredPitch = PropulsionRequestForPitchUp\r\n        end\r\n        \r\n        if rightTurnTerrainAltitude < leftTurnTerrainAltitude then\r\n            DBG(\"Turning right from terrain!\")\r\n            turnDirectionSign = 1\r\n        else\r\n            DBG(\"Turning left from terrain!\")\r\n            turnDirectionSign = -1            \r\n        end\r\n\r\n\r\n        local constructUpVector = I:GetConstructUpVector()\r\n\r\n        local constructRollRounded = Mathf.Round(GetConstructRoll(constructForwardVector, constructUpVector) / 90) * 90\r\n\r\n        if constructRollRounded == 0 then\r\n            return PropulsionRequestForYawRight * turnDirectionSign, desiredPitch\r\n        end\r\n        if constructRollRounded == -90 then\r\n            return PropulsionRequestForYawRight * -1, PropulsionRequestForPitchUp * turnDirectionSign                                       -- check roll sign!\r\n        end\r\n        if constructRollRounded == 90 then\r\n            return PropulsionRequestForYawRight, PropulsionRequestForPitchUp * turnDirectionSign * -1\r\n        end\r\n        if constructRollRounded == -180 or constructRollRounded == 180 then\r\n            return PropulsionRequestForYawRight * turnDirectionSign * -1, desiredPitch * -1\r\n        end\r\n\r\n    end\r\n\r\n    return 0, 0\r\nend\r\n\r\n\r\n\r\nfunction GetTypeOfUnitFromAltitude(constructPosition)\r\n    local altitude = constructPosition.y\r\n    \r\n --   DBG(\"altitude: \"..altitude..\"  HeightOfMapCenter: \"..HeightOfMapCenter..\"  AltitudeToBePlane: \"..AltitudeToBePlane..\"  AltitudeToBeSubmarine: \"..AltitudeToBeSubmarine)\r\n    \r\n    if altitude > AltitudeToBePlane + HeightOfMapCenter then\r\n        return 3\r\n    elseif altitude < AltitudeToBeSubmarine then\r\n        return 4    \r\n    else    \r\n        return 2\r\n    end\r\nend\r\n\r\n\r\nfunction DetectAndAvoidCollision()\r\n\r\n\r\n    local constructPosition = I:GetConstructCenterOfMass()\r\n    local constructVelocity = I:GetVelocityVector()\r\n    --constructVelocity.y=0                                                             -- Should it stay or should it go ??\r\n\r\n    HasTheWorldMovedOn = CheckForWorldShift(constructPosition, LastFrameConstructPosition, constructVelocity)                       -- remove for borderless maps??\r\n\r\n    if TypeOfTheCraft == 1 then\r\n        CurrentTypeOfTheCraft = GetTypeOfUnitFromAltitude (constructPosition)\r\n        UpdateCurrentSafeDistance (CurrentTypeOfTheCraft)\r\n    end\r\n\r\n    if ForceUsageOfAlgorithm == \"Auto\" then\r\n        if CurrentTypeOfTheCraft == 2 and IsItALandMap then\r\n            CurrentAlgorithm = AlgorithmForLandUnit            \r\n        else    \r\n            CurrentAlgorithm = AlgorithmForShip\r\n        end\r\n        if CurrentTypeOfTheCraft == 3 then\r\n            CurrentAlgorithm = AlgorithmForPlane\r\n        end\r\n        if CurrentTypeOfTheCraft == 4 then\r\n            CurrentAlgorithm = AlgorithmForSubmarine\r\n        end        \r\n    end\r\n    \r\n    \r\n --   DBG(\"CurrentTypeOfTheCraft: \"..CurrentTypeOfTheCraft)\r\n\r\n    if HasTheWorldMovedOn and DoAvoidMapBorders then\r\n        MapBorderPointX1, MapBorderPointZ1, MapBorderPointX2, MapBorderPointZ2 = FindMapBorderPoints(constructPosition.x, constructPosition.z, 20000)\r\n    end\r\n\r\n  --  DBG(\"X1: \"..MapBorderPointX1..\" Z1: \"..MapBorderPointZ1..\"   X2: \"..MapBorderPointX2..\" Z2: \"..MapBorderPointZ2)\r\n    --DBG(\"Xc:\" .. Mathf.Round((MapBorderPointX1+MapBorderPointX2)/2)..\" Zc: \"..Mathf.Round((MapBorderPointZ1+MapBorderPointZ2)/2))\r\n  --  DBG(\"Xc:\" .. Mathf.Round((MapBorderPointX1+MapBorderPointX2)/2)..\" Zc: \"..Mathf.Round((MapBorderPointZ1+MapBorderPointZ2)/2)..\"   X1: \"..MapBorderPointX1..\" Z1: \"..MapBorderPointZ1..\"   X2: \"..MapBorderPointX2..\" Z2: \"..MapBorderPointZ2)\r\n    local friendlyCount = I:GetFriendlyCount()\r\n    local enemyCount = I:GetNumberOfTargets(0)\r\n\r\n    if (friendlyCount + 1) ~= PreviousCountForFriendlies then\r\n        SetPriorityNumberAndCountFriendlies()        \r\n    end\r\n\r\n    \r\n    ConstructForwardsVelocityMagnitude = I:GetForwardsVelocityMagnitude()\r\n    local newPositionsAndVectors = {}                                 \r\n                                                                        \r\n    if DoCheckForCollisionWithFriendlies then\r\n        for i = 0, friendlyCount - 1, 1 do\r\n            local infoForObstacle = I:GetFriendlyInfo(i)\r\n            if ShouldItBeAvoided(constructPosition, infoForObstacle.CenterOfMass) then\r\n                newPositionsAndVectors[infoForObstacle.Id] = {\r\n                    Id = infoForObstacle.Id,\r\n                    Position = infoForObstacle.CenterOfMass,\r\n                    Velocity = infoForObstacle.Velocity\r\n                }\r\n            end\r\n        end\r\n    end\r\n\r\n    local enemyType = 0\r\n    if DoCheckForCollisionWithEnemy then\r\n        for i = 0, enemyCount - 1, 1 do\r\n            local infoForObstacle = I:GetTargetInfo(0, i)\r\n            if ShouldItBeAvoided(constructPosition, infoForObstacle.Position) then\r\n                \r\n                enemyType = GetTypeOfUnitFromAltitude (infoForObstacle.Position)\r\n                if enemyType == 2 and IsItALandMap then\r\n                    DimensionsOfEnemies[infoForObstacle.Id] = MaximumSizeOfEnemyLandUnits / 2 \r\n                elseif enemyType == 3 then\r\n                    DimensionsOfEnemies[infoForObstacle.Id] = MaximumSizeOfEnemyPlanes / 2\r\n                elseif enemyType == 4 then\r\n                    DimensionsOfEnemies[infoForObstacle.Id] = MaximumSizeOfEnemySubmarines / 2                    \r\n                else\r\n                    DimensionsOfEnemies[infoForObstacle.Id] = MaximumSizeOfEnemyShips / 2\r\n                end\r\n                \r\n                newPositionsAndVectors[infoForObstacle.Id] = {                                \r\n                   -- Id = ConstantForEnemyId, --infoForObstacle.Id,                           -- Deplorable! \r\n                    Id = infoForObstacle.Id,\r\n                    Position = infoForObstacle.Position,\r\n                    Velocity = infoForObstacle.Velocity\r\n                }\r\n            end            \r\n        end\r\n    end\r\n\r\n    --DBG(\"Obstacles in play: \"..GetLengthOfTable(newPositionsAndVectors))\r\n\r\n    UpdateRotationAndSpeed(constructVelocity, newPositionsAndVectors)                                       -- Need some love\r\n    LastFramePositionsAndVectors = newPositionsAndVectors\r\n    LastFrameConstructPosition = constructPosition\r\n\r\n\r\n    if DoAvoidMapBorders then\r\n        local yawFromBorder, pitchFromBorder = CheckForBorderViolation(constructPosition, constructVelocity)\r\n        if yawFromBorder ~= 0 or pitchFromBorder ~= 0 then                                                           -- reverse?!?\r\n            \r\n            return yawFromBorder, PropulsionRequestWhileAvoiding, pitchFromBorder\r\n        end\r\n    end\r\n    \r\n\r\n    if ProbeAheadForTerrain and ((CurrentTypeOfTheCraft ~= 3) or (ProbeForTerrainIfPlane and CurrentTypeOfTheCraft == 3)) then\r\n        local yawFromTerrain, pitchFromTerrain = CheckForTerrainAhead(constructPosition, constructVelocity)\r\n        if yawFromTerrain ~= 0 or pitchFromTerrain ~= 0 then                                                        -- reverse?!?\r\n           -- DBG('Terrain Ahead!')\r\n            return yawFromTerrain, PropulsionRequestWhileAvoiding, pitchFromTerrain\r\n        end      \r\n    end\r\n\r\n\r\n    local minDistancePredicted, minTimePredicted, currentDistance, closestObstacleId\r\n        =  FindMinimalFlybyDistanceAndTime(constructPosition, constructVelocity, newPositionsAndVectors)\r\n    \r\n    local timeNeededToReactSafely = TimeNeededForConstructToReactSafely * 2\r\n    local distanceNeededToReactSafely = ConstructCurrentSpeed * TimeNeededForConstructToReactSafely * 2                -- wrong !!!\r\n    local numberOfFrames = NumberOfFramesToPredictWith\r\n    DBG(\"timeNeededToReactSafely: \"..timeNeededToReactSafely..\" distanceNeededToReactSafely: \"..distanceNeededToReactSafely..\" ConstructCurrentSpeed: \"..ConstructCurrentSpeed)\r\n    DBG(\"minDistancePredicted: \"..minDistancePredicted..\"  minTimePredicted: \"..minTimePredicted..\" currentDistance: \"..currentDistance)\r\n\r\n    if currentDistance < 0 then    \r\n        local obstacleRelativePosition = constructPosition - newPositionsAndVectors[closestObstacleId].Position\r\n                + newPositionsAndVectors[closestObstacleId].Velocity.normalized * (GetSphericalHalfSize(newPositionsAndVectors[closestObstacleId].Id) * 0.0)\r\n        local signForSide = constructVelocity.x * obstacleRelativePosition.z - constructVelocity.z * obstacleRelativePosition.x\r\n    \r\n        local propulsionRequestForward = PropulsionRequestWhileAvoiding\r\n        local PropulsionRequestReverse = PropulsionRequestToStopOrReverse\r\n        local YawDirectionSign = 1\r\n        if ConstructForwardsVelocityMagnitude < 0 then                                   --And again - Redo!\r\n           -- propulsionRequestForward = PropulsionRequestToStopOrReverse\r\n           -- PropulsionRequestReverse = PropulsionRequestWhileAvoiding                 --                      !!!!\r\n            YawDirectionSign = ChangeToYawDirectionWhileInReverse\r\n        end\r\n\r\n        if signForSide > 0 then\r\n            DBG (\"All is lost! Left! \"..currentDistance..\"  signForSide: \"..signForSide)\r\n            return PropulsionRequestForYawRight * -1 * YawDirectionSign, PropulsionRequestReverse, 0                            -- Add pitch\r\n        else\r\n            DBG (\"All is lost! Right! \"..currentDistance..\"  signForSide: \"..signForSide)\r\n            return PropulsionRequestForYawRight * YawDirectionSign, PropulsionRequestReverse, 0\r\n        end\r\n        \r\n    elseif CurrentAlgorithm == \"Big Boy\" then\r\n\r\n         if (currentDistance < CurrentSafeDistance )\r\n            or (currentDistance < distanceNeededToReactSafely and minTimePredicted > 0 and minTimePredicted < timeNeededToReactSafely)\r\n            or (minDistancePredicted < CurrentSafeDistance and minTimePredicted > 0 and minTimePredicted < timeNeededToReactSafely) then        \r\n  \r\n            return CompareSafetyOfManeuversAndChooseDirectionOfTurn (timeNeededToReactSafely, numberOfFrames, constructPosition, constructVelocity, newPositionsAndVectors)\r\n        \r\n         elseif currentDistance < MinimumDistanceToKeepReversing and DesiredForward == PropulsionRequestToStopOrReverse then \r\n             \r\n            return DesiredYaw, DesiredForward, 0\r\n             \r\n         end\r\n    else\r\n        if (currentDistance < CurrentSafeDistance )\r\n                or (minTimePredicted < timeNeededToReactSafely / 3 and minDistancePredicted < distanceNeededToReactSafely / 3) then\r\n\r\n            return CompareSafetyOfManeuversAndChooseDirectionOfTurnForPlane (constructPosition, constructVelocity, newPositionsAndVectors, minTimePredicted)\r\n\r\n        end\r\n    end\r\n    \r\n    DBG (\"All good. \"..currentDistance) \r\n\r\n    return 0, 0, 0\r\nend\r\n\r\n\r\nFramesSinceLastControlRequest = 0\r\n\r\nfunction DoStuff (desiredYaw, desiredForward, desiredPitch)\r\n    if TypeOfAiOnTheCraft == 1 or TypeOfAiOnTheCraft == 3 then\r\n        if CounterForDelayBeforeTakingControlFromStandardAI <= 0 then\r\n            \r\n            if desiredYaw ~= 0 or desiredPitch ~= 0 or desiredForward ~= 0 then\r\n                if FramesSinceLastControlRequest == 0 or FramesSinceLastControlRequest >= ConstantForFramesPerSecond then\r\n                    I:TellAiThatWeAreTakingControl()\r\n                    FramesSinceLastControlRequest = NumberOfSkippedFrames\r\n                end\r\n                \r\n                I:RequestControl(0, 0, desiredYaw)\r\n                I:RequestControl(0, 4, desiredPitch)\r\n                I:RequestControl(0, 8, desiredForward)\r\n                \r\n            end\r\n            \r\n        end        \r\n        CounterForDelayBeforeTakingControlFromStandardAI = CounterForDelayBeforeTakingControlFromStandardAI - NumberOfSkippedFrames        \r\n        \r\n    end\r\n\r\n    if TypeOfAiOnTheCraft == 2 or TypeOfAiOnTheCraft == 3 then\r\n\r\n        if desiredYaw == PropulsionRequestForYawRight * -1 then I:RequestComplexControllerStimulus(CCCForYawLeft) end\r\n        if desiredYaw == PropulsionRequestForYawRight then I:RequestComplexControllerStimulus(CCCForYawRight) end\r\n\r\n        if desiredForward == PropulsionRequestWhileAvoiding then I:RequestComplexControllerStimulus(CCCWhileAvoiding) end\r\n        if desiredForward == PropulsionRequestToStopOrReverse then I:RequestComplexControllerStimulus(CCCToStopOrReverse) end\r\n\r\n        if desiredPitch == PropulsionRequestForPitchUp then I:RequestComplexControllerStimulus(CCCForPitchUp) end\r\n        if desiredPitch == PropulsionRequestForPitchUp * -1 then I:RequestComplexControllerStimulus(CCCForPitchDown) end\r\n        \r\n    end\r\n\r\n    DBG(FrameCounter..\": DesiredYaw = \"..desiredYaw..\" desiredForward: \"..desiredForward..\"  desiredPitch: \"..desiredPitch)\r\nend\r\n\r\n\r\nfunction DoInputSanityCheck()\r\n    local msg = \"\"\r\n    if CurrentSafeDistance < 0 then\r\n        CurrentSafeDistance = 10\r\n        msg = msg .. \" CurrentSafeDistance! \"\r\n    end\r\n    if MaximumSizeOfEnemyShips < 50 then\r\n        MaximumSizeOfEnemyShips = 50\r\n        msg = msg .. \" MaximumSizeOfEnemyShips! \"\r\n    end\r\n    if CCCForYawRight == CCCForYawLeft then\r\n        msg = msg .. \" CCCForYawRight==CCCForYawLeft - not fixed! \"\r\n    end\r\n    if MaximumTimeForCoursePrediction < 0 then\r\n        MaximumTimeForCoursePrediction = 10\r\n        msg = msg .. \" MaximumTimeForCoursePrediction! \"\r\n    end\r\n    if ConstantForConstructId == ConstantForEnemyId then\r\n        msg = msg .. \" Nuts - not fixed! \"\r\n    end\r\n    return msg\r\nend\r\n\r\nfunction UpdateFriendlySizes()\r\n    for i = 0, I:GetFriendlyCount() - 1, 1 do\r\n        local FriendlyInfo = I:GetFriendlyInfo(i)\r\n        local friendlySize = FriendlyInfo.PositiveSize - FriendlyInfo.NegativeSize + Vector3(1, 1, 1)\r\n        DimensionsOfFriendlies[FriendlyInfo.Id] = {\r\n            Id = FriendlyInfo.Id,\r\n            BoundingBox = friendlySize,\r\n            MaxSphericalHalfSize = math.max(friendlySize.x, friendlySize.y, friendlySize.z) / 2 + ExtraDistanceForBeingFriendly\r\n        }\r\n    end \r\nend\r\n\r\nfunction UpdateCurrentSafeDistance (currentTypeOfTheCraft)\r\n\r\n    if currentTypeOfTheCraft == 1 or currentTypeOfTheCraft == 2 then\r\n        if IsItALandMap then\r\n            CurrentSafeDistance = SafeDistanceForLandUnits\r\n        else\r\n            CurrentSafeDistance = SafeDistanceForShips\r\n        end\r\n    elseif currentTypeOfTheCraft == 3 then\r\n        CurrentSafeDistance = SafeDistanceForPlanes\r\n    elseif currentTypeOfTheCraft == 4 then\r\n        CurrentSafeDistance = SafeDistanceForSubmarines\r\n    end\r\n    \r\n    \r\nend\r\n\r\nfunction StartupInitialization()\r\n    DoInitializationOnStart = false    \r\n    I:ClearLogs()\r\n\r\n    SetPriorityNumberAndCountFriendlies()\r\n    \r\n    if InTheFightWithCornHollio then\r\n        desiredSpeed = 0\r\n        EngageSelfDestruct(true)\r\n    end \r\n    \r\n    ConstructDimensions = ConstructDimensions + I:GetConstructMaxDimensions() - I:GetConstructMinDimensions()\r\n    ConstructSphericalHalfSize = math.max(ConstructDimensions.x, ConstructDimensions.y, ConstructDimensions.z) / 2\r\n\r\n    LastFrameConstructVelocity = I:GetVelocityVector()\r\n\r\n    UpdateFriendlySizes()\r\n\r\n  --  local msg = DoInputSanityCheck()\r\n\r\n    local constructPosition = I:GetConstructPosition()    \r\n    MapBorderPointX1, MapBorderPointZ1, MapBorderPointX2, MapBorderPointZ2 = FindMapBorderPoints(constructPosition.x, constructPosition.z, 20000)\r\n    local mapCenterX = (MapBorderPointX1 + MapBorderPointX2) / 2\r\n    local mapCenterZ = (MapBorderPointZ1 + MapBorderPointZ2) / 2\r\n    \r\n  --  I:LogToHud(\"mapCenterX: \"..mapCenterX..\"  mapCenterZ: \"..mapCenterZ)\r\n    \r\n    CurrentTypeOfTheCraft = TypeOfTheCraft\r\n    HeightOfMapCenter = ( I:GetTerrainAltitudeForPosition(mapCenterX, 0, 0)\r\n                        + I:GetTerrainAltitudeForPosition(mapCenterX + 500, 0, mapCenterZ + 500)\r\n                        + I:GetTerrainAltitudeForPosition(mapCenterX + 500, 0, mapCenterZ - 500)\r\n                        + I:GetTerrainAltitudeForPosition(mapCenterX - 500, 0, mapCenterZ + 500)\r\n                        + I:GetTerrainAltitudeForPosition(mapCenterX - 500, 0, mapCenterZ - 500) ) / 5\r\n    if HeightOfMapCenter > MinimumTerrainAltitudeToBeLandMap then                                                        \r\n        IsItALandMap = true\r\n    end\r\n    HeightOfMapCenter = math.max(0, HeightOfMapCenter)\r\n\r\n    UpdateCurrentSafeDistance (TypeOfTheCraft)\r\n    CurrentTypeOfTheCraft = TypeOfTheCraft\r\n\r\n    if ForceUsageOfAlgorithm ~= \"Auto\" then\r\n        CurrentAlgorithm = ForceUsageOfAlgorithm     \r\n    end\r\n    \r\n    \r\n    if ShowMessageForRunningAndWarnings then\r\n        I:LogToHud(\"CornBox is running on \".. I:GetBlueprintName()..\" (Id: \".. I:GetUniqueId()..\"). \"..msg)        \r\n    end\r\n    \r\nend\r\n\r\n\r\nfunction IsThisFrameActive(frameCounter, activeCraftsPerFrame, previousCountForFriendlies, constructPriorityNumber)\r\n    local FirstPriorityNumberForThisFrame = frameCounter * activeCraftsPerFrame % previousCountForFriendlies\r\n    local FirstPriorityNumberForNextFrame = (frameCounter + 1) * activeCraftsPerFrame % previousCountForFriendlies\r\n\r\n    if (previousCountForFriendlies<activeCraftsPerFrame)\r\n            or (constructPriorityNumber >= FirstPriorityNumberForThisFrame and constructPriorityNumber < (FirstPriorityNumberForThisFrame + activeCraftsPerFrame))\r\n            or (constructPriorityNumber < FirstPriorityNumberForNextFrame and  constructPriorityNumber >= (FirstPriorityNumberForNextFrame - activeCraftsPerFrame)) then\r\n       -- DBG(\"Run on frame: \"..frameCounter)\r\n        NumberOfSkippedFrames = FrameCounter - LastActiveFrame\r\n        LastActiveFrame = FrameCounter\r\n        return true\r\n    end\r\n    return false\r\nend\r\n\r\n\r\nfunction IsThisBoxActive()\r\n    --local poll = Mathf.Round(I:GetInput(0, 8)*10)\r\n    local poll = Mathf.Round(I:GetCustomAxis(\"CornBoxPoll\")*10)\r\n\r\n    if (poll == 0 and VictoryInThePollForPreviousFrame) or (poll == 1 and VictoryInThePoll) then\r\n        --I:RequestControl(0, 8, 0.1)\r\n        I:RequestCustomAxis(\"CornBoxPoll\", 0.1)\r\n        VictoryInThePollForPreviousFrame = true \r\n        return true\r\n    end \r\n    \r\n    if CounterForPollDelay == -99 then\r\n        CounterForPollDelay = math.random(0, 20)\r\n    end\r\n    \r\n    if poll ~= 1 and PollResultForPreviousFrame ~= 1 then\r\n        CounterForPollDelay = CounterForPollDelay - 1\r\n        VictoryInThePoll = false\r\n        VictoryInThePollForPreviousFrame = false\r\n        \r\n        if CounterForPollDelay <= 0 then\r\n            --I:RequestControl(0, 8, 0.1)\r\n            I:RequestCustomAxis(\"CornBoxPoll\", 0.1)\r\n            VictoryInThePoll = true\r\n            CounterForPollDelay = math.random(0, 20)\r\n        end\r\n    end\r\n\r\n    PollResultForPreviousFrame = poll    \r\n    return false\r\nend\r\n\r\n\r\nIntegrationModeCycleCounter = 0\r\nIntegrationModeCurrentStep = 0\r\n\r\n\r\nfunction RunIntegrationTest()\r\n    IntegrationModeHudRepeatNumber = (IntegrationTestDuration * 40) / (Mathf.Round((IntegrationTestDuration * 40) / (3*40*2))*2)\r\n    IntegrationModeCycleCounter = IntegrationModeCycleCounter - NumberOfSkippedFrames\r\n\r\n    if IntegrationModeCycleCounter <=0 then\r\n        IntegrationModeCurrentStep = IntegrationModeCurrentStep + 1\r\n        IntegrationModeCycleCounter = IntegrationTestDuration * 40\r\n    end\r\n                                                                                        --DesiredYaw, DesiredForward, DesiredPitch = RunIntegrationTest()\r\n    \r\n    local msg = \"Integration test for [\"..I:GetBlueprintName()..\"].\"\r\n    if IsItALandMap then\r\n        msg = msg..\" Land map (\"..HeightOfMapCenter..\"m).\"\r\n    else\r\n        msg = msg..\" Water map.\"       \r\n    end\r\n\r\n    local currentTypeOfTheCraft = GetTypeOfUnitFromAltitude(I:GetConstructCenterOfMass())\r\n\r\n    if TypeOfTheCraft == 1 then \r\n        if currentTypeOfTheCraft == 2 then msg = msg..\" Type: Surface (Auto).\" end\r\n        if currentTypeOfTheCraft == 3 then msg = msg..\" Type: Plane (Auto).\" end\r\n        if currentTypeOfTheCraft == 4 then msg = msg..\" Type: Submarine (Auto).\" end        \r\n    elseif TypeOfTheCraft == currentTypeOfTheCraft then\r\n        if currentTypeOfTheCraft == 2 then msg = msg..\" Type: Surface.\" end\r\n        if currentTypeOfTheCraft == 3 then msg = msg..\" Type: Plane.\" end\r\n        if currentTypeOfTheCraft == 4 then msg = msg..\" Type: Submarine.\" end\r\n    else\r\n\r\n        if TypeOfTheCraft == 2 then msg = msg..\" Type: Surface\" end\r\n        if TypeOfTheCraft == 3 then msg = msg..\" Type: Plane\" end\r\n        if TypeOfTheCraft == 4 then msg = msg..\" Type: Submarine\" end\r\n\r\n        if currentTypeOfTheCraft == 2 then msg = msg..\", expected: Surface!\" end\r\n        if currentTypeOfTheCraft == 3 then msg = msg..\", expected: Plane!\" end\r\n        if currentTypeOfTheCraft == 4 then msg = msg..\", expected: Submarine!\" end\r\n        \r\n    end\r\n\r\n    if IntegrationModeCurrentStep > 10 then\r\n        IntegrationModeCurrentStep = 1\r\n    end\r\n\r\n    if IntegrationModeCurrentStep == 1 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward and Yaw right.\")\r\n        end\r\n        return PropulsionRequestForYawRight, PropulsionRequestWhileAvoiding, 0\r\n    elseif IntegrationModeCurrentStep == 2 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    elseif IntegrationModeCurrentStep == 3 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward and Yaw left.\")\r\n        end\r\n        return PropulsionRequestForYawRight * -1, PropulsionRequestWhileAvoiding, 0\r\n    elseif IntegrationModeCurrentStep == 4 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    elseif IntegrationModeCurrentStep == 5 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward and Pitch up.\")\r\n        end\r\n        return 0, PropulsionRequestWhileAvoiding, PropulsionRequestForPitchUp\r\n    elseif IntegrationModeCurrentStep == 6 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    elseif IntegrationModeCurrentStep == 7 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward and Pitch down.\")\r\n        end\r\n        return 0, PropulsionRequestWhileAvoiding, PropulsionRequestForPitchUp * -1\r\n    elseif IntegrationModeCurrentStep == 8 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    elseif IntegrationModeCurrentStep == 9 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" Forward slow or stop or reverse.\")\r\n        end\r\n        return 0, PropulsionRequestToStopOrReverse, 0        \r\n    elseif IntegrationModeCurrentStep == 10 then\r\n        if IntegrationModeCycleCounter % IntegrationModeHudRepeatNumber == 0 then\r\n            I:LogToHud(msg..\" CornBox off.\")\r\n        end\r\n        return 0, 0, 0\r\n    end\r\n    \r\nend\r\n\r\n\r\n\r\nfunction Update(ILocal)\r\n    if StartupDelay <= 0 then\r\n        I=ILocal\r\n        I:ClearLogs()\r\n\r\n        local activeFrame = IsThisFrameActive(FrameCounter, ActiveCraftsPerFrame, PreviousCountForFriendlies, ConstructPriorityNumber)\r\n    --    DBG(\"FrameCounter: \"..FrameCounter..\"  activeFrame: \"..tostring(activeFrame))\r\n\r\n        local successForPoll, activeBox = pcall(IsThisBoxActive)\r\n        if not successForPoll then\r\n          --  DBG(\"Unsuccessful poll.\")\r\n            activeBox = true\r\n        end\r\n        --local activeBox = IsThisBoxActive()\r\n     --   DBG(\"FrameCounter: \"..FrameCounter..\"  successForPoll: \"..tostring(successForPoll)..\"  activeBox: \"..tostring(activeBox))\r\n\r\n\r\n\r\n       -- DBG(\"GTF: \"..I:GetGameTime()/0.025)\r\n\r\n\r\n\r\n        if activeFrame and activeBox then\r\n            local success = false\r\n            \r\n            if DoInitializationOnStart then                         -- add support for new spawns and test for sanity\r\n                StartupInitialization()                                 -- And where are missing friendly size come from?\r\n            end\r\n\r\n            if IntegrationTestDuration == 0 then\r\n                success, DesiredYaw, DesiredForward, DesiredPitch = pcall(DetectAndAvoidCollision)\r\n                --success = true  DesiredYaw, DesiredForward, DesiredPitch = DetectAndAvoidCollision()\r\n            else\r\n                success = true\r\n                DesiredYaw, DesiredForward, DesiredPitch = RunIntegrationTest()\r\n            end\r\n                            \r\n\r\n            if not success or DesiredYaw == nil or DesiredForward == nil or DesiredPitch == nil then\r\n                DBG(\"!!Error!!\")\r\n                DesiredYaw = 0\r\n                DesiredForward = 0\r\n                DesiredPitch = 0\r\n            end\r\n        else\r\n            DBG(\"Skipping of the frame. FrameCounter: \"..FrameCounter..\"  activeFrame: \"..tostring(activeFrame)..\"  activeBox: \"..tostring(activeBox))\r\n        end\r\n\r\n        if DesiredYaw ~= 0 or DesiredForward ~= 0 or DesiredPitch ~= 0 then\r\n            DoStuff(DesiredYaw, DesiredForward, DesiredPitch)\r\n        else\r\n            CounterForDelayBeforeTakingControlFromStandardAI = DelayBeforeTakingControlFromStandardAI\r\n            DBG(FrameCounter..\": No collision to avoid.\")\r\n        end\r\n        FramesSinceLastControlRequest = FramesSinceLastControlRequest + NumberOfSkippedFrames\r\n    else\r\n        StartupDelay = StartupDelay - 1\r\n    end\r\n    FrameCounter = FrameCounter + 1\r\nend\r\n\r\n\r\nfunction DBG(string)\r\n    I:Log(string)\r\nend\r\n\r\n\r\nfunction PV(v)\r\n    return \" x: \"..v.x..\"  y: \"..v.y..\"  z: \"..v.z..\"   mg: \"..v.magnitude\r\nend\r\n\r\n\r\nfunction GetLengthOfTable(table)\r\n    local count = 0\r\n    for _ in pairs(table) do\r\n        count = count + 1\r\n    end\r\n    return count\r\nend\r\n\r\n\r\nfunction Get_Speed (id)\r\n    return RateOfRotationAndSpeed[id].MaxSpeed\r\nend                                                                         -- Kill it?\r\nfunction Get_TurnRate (id)\r\n    return RateOfRotationAndSpeed[id].CurrentCourse\r\nend\r\n\r\n"],"BlockStringDataIds":[179],"GameVersion":"3.4.8.0","PersistentSubObjectIndex":0,"PersistentBlockIndex":417,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"1cc99486-fff6-4c8c-ab26-cf71343faa66","ObjectId":"7ff5520f-752e-4f11-9582-b052f87faf5e","CreatorReadableName":"CornHollio","HashV1":"5ce9d17d004db24d2f6e024308db1ee5"},"BlockCount":2062}}